/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/mithril/mithril.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n\"use strict\"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode(\"[\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== \"object\") return Vnode(\"#\", undefined, undefined, node === false ? \"\" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*(\"|'|)((?:\\\\[\"'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction compileSelector(selector) {\n\tvar match, tag = \"div\", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === \"\" && value !== \"\") tag = value\n\t\telse if (type === \"#\") attrs.id = value\n\t\telse if (type === \".\") classes.push(value)\n\t\telse if (match[3][0] === \"[\") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\([\"'])/g, \"$1\").replace(/\\\\\\\\/g, \"\\\\\")\n\t\t\tif (match[4] === \"class\") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(\" \")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + \" \" + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== \"key\") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === \"#\") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== \"string\" && typeof selector !== \"function\" && typeof selector.view !== \"function\") {\n\t\tthrow Error(\"The selector must be either a string or a component.\");\n\t}\n\tif (typeof selector === \"string\") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== \"object\" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === \"string\") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = \"\"\n\treturn Vnode(\"<\", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode(\"[\", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error(\"Promise must be called with `new`\")\n\tif (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n\t\t\t\t\tif (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== \"function\") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === \"function\" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== \"undefined\") {\n\tif (typeof window.Promise === \"undefined\") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== \"undefined\") {\n\tif (typeof global.Promise === \"undefined\") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\"\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join(\"&\")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === \"[object Object]\") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp(\"^file://\", \"i\")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === \"function\") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === \"string\") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = \"GET\"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === \"GET\" || args.method === \"TRACE\") ? false : (typeof args.useBody === \"boolean\" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== \"function\") args.serialize = typeof FormData !== \"undefined\" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== \"function\") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== \"function\") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === \"boolean\" ? args.async : true, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody) {\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize) {\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === \"function\") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don't throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++\n\t\t\tvar script = $window.document.createElement(\"script\")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error(\"JSONP request failed\"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || \"callback\"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== \"\") {\n\t\t\tvar prefix = url.indexOf(\"?\") < 0 ? \"?\" : \"&\"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== \"\" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === \"function\") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === \"string\") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase \"#\": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase \"<\": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase \"[\": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: \"table\", thead: \"table\", tbody: \"table\", tfoot: \"table\", tr: \"tbody\", th: \"tr\", td: \"tr\", colgroup: \"table\", col: \"colgroup\"}[match1[1]] || \"div\"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tswitch (vnode.tag) {\n\t\t\tcase \"svg\": ns = \"http://www.w3.org/2000/svg\"; break\n\t\t\tcase \"math\": ns = \"http://www.w3.org/1998/Math/MathML\"; break\n\t\t}\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== \"\") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === \"function\") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === \"function\") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, undefined)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, undefined, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === \"string\") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase \"#\": updateText(old, vnode); break\n\t\t\t\t\tcase \"<\": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase \"[\": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tswitch (vnode.tag) {\n\t\t\tcase \"svg\": ns = \"http://www.w3.org/2000/svg\"; break\n\t\t\tcase \"math\": ns = \"http://www.w3.org/1998/Math/MathML\"; break\n\t\t}\n\t\tif (vnode.tag === \"textarea\") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== \"\") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === \"<\") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === \"function\") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onbeforeremove === \"function\") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === \"string\") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === \"function\") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onremove === \"function\") vnode._state.onremove.call(vnode.state, vnode)\n\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\telse {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === \"key\" || key2 === \"is\" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== \"object\" || typeof value === \"undefined\" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(\":\")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === \"xlink\") {\n\t\t\telement.setAttributeNS(\"http://www.w3.org/1999/xlink\", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === \"o\" && key2[1] === \"n\" && typeof value === \"function\") updateEvent(vnode, key2, value)\n\t\telse if (key2 === \"style\") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\tif (vnode.tag === \"input\" && key2 === \"value\" && vnode.dom.value == value && vnode.dom === $doc.activeElement) return\n\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\tif (vnode.tag === \"select\" && key2 === \"value\" && vnode.dom.value == value && vnode.dom === $doc.activeElement) return\n\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\tif (vnode.tag === \"option\" && key2 === \"value\" && vnode.dom.value == value) return\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === \"input\" && key2 === \"type\") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tif (value) element.setAttribute(key2, \"\")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === \"className\" ? \"class\" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === \"select\" && attrs2 != null) {\n\t\t\tif (\"value\" in attrs2) setAttr(vnode, \"value\", null, attrs2.value, undefined)\n\t\t\tif (\"selectedIndex\" in attrs2) setAttr(vnode, \"selectedIndex\", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === \"className\") key2 = \"class\"\n\t\t\t\t\tif (key2[0] === \"o\" && key2[1] === \"n\" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== \"key\") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === \"href\" || attr === \"list\" || attr === \"form\" || attr === \"width\" || attr === \"height\"// || attr === \"type\"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf(\"-\") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = \"\", old = null\n\t\tif (style == null) element.style.cssText = \"\"\n\t\telse if (typeof style === \"string\") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === \"string\") element.style.cssText = \"\"\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== \"string\") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== \"function\" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === \"function\" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === \"function\") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === \"function\") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === \"function\") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onbeforeupdate === \"function\") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = \"\"\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, undefined)\n\t\tdom.vnodes = vnodes\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t\tif ($doc.activeElement !== active) active.focus()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === \"function\" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw !== false) redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== \"function\") throw new Error(\"m.mount(element, component) expects a component, not a vnode\")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === \"\" || string == null) return {}\n\tif (string.charAt(0) === \"?\") string = string.slice(1)\n\tvar entries = string.split(\"&\"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split(\"=\")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \"\"\n\t\tif (value === \"true\") value = true\n\t\telse if (value === \"false\") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf(\"[\") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == \"\" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === \"\") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === \"function\"\n\tvar callAsync0 = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === \"pathname\" && data[0] !== \"/\") data = \"/\" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf(\"?\")\n\t\tvar hashIndex = path.indexOf(\"#\")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: \"#!\"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase \"#\": return normalize1(\"hash\").slice(router.prefix.length)\n\t\t\tcase \"?\": return normalize1(\"search\").slice(router.prefix.length) + normalize1(\"hash\")\n\t\t\tdefault: return normalize1(\"pathname\").slice(router.prefix.length) + normalize1(\"search\") + normalize1(\"hash\")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += \"?\" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += \"#\" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp(\"^\" + route0.replace(/:[^\\/]+?\\.{3}/g, \"(.*?)\").replace(/:[^\\/]+/g, \"([^\\\\/]+)\") + \"\\/?$\")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, \"\")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === \"#\") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error(\"Ensure the DOM element that was passed to `m.route` is not undefined\")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error(\"Could not resolve default route \" + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === \"function\" || typeof comp === \"function\")? comp : \"div\"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === \"function\") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, \"div\")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) options = {replace: true}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute(\"href\", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute(\"href\")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== \"undefined\" && typeof key3 !== \"undefined\") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = \"1.1.1\"\nm.vnode = Vnode\nif (true) module[\"exports\"] = m\nelse window.m = m\n}());\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../timers-browserify/main.js */ 10).setImmediate, __webpack_require__(/*! ./../webpack/buildin/global.js */ 1)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.summary = exports.zparams = exports.logArray = exports.righttab = exports.summaryHold = exports.subset = exports.lefttab = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.main = main;\nexports.forceSwitch = forceSwitch;\nexports.estimate = estimate;\nexports.erase = erase;\nexports.tabLeft = tabLeft;\nexports.tabRight = tabRight;\nexports.subsetSelect = subsetSelect;\n\nvar _mithril = __webpack_require__(/*! mithril */ 0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _plots = __webpack_require__(/*! ./plots.js */ 7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// hostname default - the app will use it to obtain the variable metadata\n// (ddi) and pre-processed data info if the file id is supplied as an\n// argument (for ex., gui.html?dfId=17), but hostname isn't.\n// Edit it to suit your installation.\n// (NOTE that if the file id isn't supplied, the app will default to the\n// local files specified below!)\n// NEW: it is also possible now to supply complete urls for the ddi and\n// the tab-delimited data file; the parameters are ddiurl and dataurl.\n// These new parameters are optional. If they are not supplied, the app\n// will go the old route - will try to cook standard dataverse urls\n// for both the data and metadata, if the file id is supplied; or the\n// local files if nothing is supplied.\n\nvar production = false;\nvar rappURL = (production ? 'https://beta.dataverse.org' : 'http://0.0.0.0:8000') + '/custom/';\n\n// initial color scale used to establish the initial colors of nodes\n// allNodes.push() below establishes a field for the master node array allNodes called \"nodeCol\" and assigns a color from this scale to that field\n// everything there after should refer to the nodeCol and not the color scale, this enables us to update colors and pass the variable type to R based on its coloring\nvar colors = d3.scale.category20();\nvar csColor = '#419641';\nvar dvColor = '#28a4c9';\nvar grayColor = '#c0c0c0';\nvar nomColor = '#ff6600';\nvar selVarColor = '#fa8072'; //d3.rgb(\"salmon\");\nvar taggedColor = '#f5f5f5'; //d3.rgb(\"whitesmoke\");\nvar timeColor = '#2d6ca2';\nvar varColor = '#f0f8ff'; //d3.rgb(\"aliceblue\");\n\nvar lefttab = exports.lefttab = 'tab1'; // current tab in left panel\nvar subset = exports.subset = false;\nvar summaryHold = exports.summaryHold = false;\nvar righttab = exports.righttab = 'btnModels'; // current tab in right panel\n\n// transformation toolbar options\nvar t = void 0,\n    typeTransform = void 0;\nvar transformList = 'log(d) exp(d) d^2 sqrt(d) interact(d,e)'.split(' ');\nvar transformVar = '';\n\n// Radius of circle\nvar allR = 40;\n\n// space index\nvar myspace = 0;\n\nvar forcetoggle = [\"true\"];\nvar priv = true;\n\nvar logArray = exports.logArray = [];\nvar zparams = exports.zparams = {\n    zdata: [],\n    zedges: [],\n    ztime: [],\n    znom: [],\n    zcross: [],\n    zmodel: \"\",\n    zvars: [],\n    zdv: [],\n    zdataurl: \"\",\n    zsubset: [],\n    zsetx: [],\n    zmodelcount: 0,\n    zplot: [],\n    zsessionid: \"\",\n    zdatacite: \"\"\n};\n\nvar modelCount = 0;\nvar valueKey = [];\nvar allNodes = [];\nvar allResults = [];\nvar nodes = [];\nvar links = [];\nvar mods = {};\nvar estimated = false;\nvar rightClickLast = false;\nvar selInteract = false;\nvar callHistory = []; // transform and subset calls\n\nvar svg, width, height, div, estimateLadda, selectLadda;\nvar arc3, arc4;\n\nvar byId = function byId(id) {\n    return document.getElementById(id);\n};\n\nvar dataurl;\nfunction main(fileid, hostname, ddiurl, dataurl) {\n    dataurl = dataurl;\n    if (production && fileid == \"\") {\n        alert(\"Error: No fileid has been provided.\");\n        throw new Error(\"Error: No fileid has been provided.\");\n    }\n\n    var dataverseurl = '';\n    if (hostname) dataverseurl = \"https://\" + hostname;else if (production) dataverseurl = \"%PRODUCTION_DATAVERSE_URL%\";else dataverseurl = \"http://localhost:8080\";\n\n    if (fileid && !dataurl) {\n        // file id supplied; assume we are dealing with dataverse and cook a standard dataverse data access url\n        // with the fileid supplied and the hostname we have supplied or configured\n        dataurl = dataverseurl + \"/api/access/datafile/\" + fileid;\n        dataurl = dataurl + \"?key=\" + apikey;\n    }\n\n    svg = d3.select(\"#whitespace\");\n\n    var tempWidth = d3.select(\"#main.left\").style(\"width\");\n    width = tempWidth.substring(0, tempWidth.length - 2);\n    height = $(window).height() - 120; // Hard coding for header and footer and bottom margin.\n\n    estimateLadda = Ladda.create(byId(\"btnEstimate\"));\n    selectLadda = Ladda.create(byId(\"btnSelect\"));\n\n    var colorTime = false;\n    var colorCS = false;\n\n    var depVar = false;\n    var subsetdiv = false;\n    var setxdiv = false;\n\n    //Width and height for histgrams\n    var barwidth = 1.3 * allR;\n    var barheight = 0.5 * allR;\n    var barPadding = 0.35;\n    var barnumber = 7;\n\n    var arc = function arc(start, end) {\n        return d3.svg.arc().innerRadius(allR + 5).outerRadius(allR + 20).startAngle(start).endAngle(end);\n    };\n    var _ref = [arc(0, 3.2), arc(0, 1), arc(1.1, 2.2)],\n        arc0 = _ref[0],\n        arc1 = _ref[1],\n        arc2 = _ref[2];\n\n    arc3 = arc(2.3, 3.3);\n    arc4 = arc(4.3, 5.3);\n\n    // From .csv\n    var dataset2 = [];\n    var lablArray = [];\n    var hold = [];\n    var subsetNodes = [];\n\n    var spaces = [];\n    var trans = []; // var list for each space contain variables in original data plus trans in that space\n\n    // collapsable user log\n    $('#collapseLog').on('shown.bs.collapse', function () {\n        d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").data(logArray).enter().append(\"p\").text(function (d) {\n            return d;\n        });\n    });\n    $('#collapseLog').on('hidden.bs.collapse', function () {\n        d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").remove();\n    });\n\n    // default to California PUMS subset\n    var data = 'data/' + (false ? 'PUMS5small' : 'fearonLaitin');\n    var metadataurl = ddiurl || (fileid ? dataverseurl + '/api/meta/datafile/' + fileid : data + '.xml');\n    // read pre-processed metadata and data\n    var pURL = dataurl ? dataurl + '&format=prep' : data + '.json';\n    var preprocess = {};\n\n    // loads all external data: metadata (DVN's ddi), preprocessed (for plotting distributions), and zeligmodels (produced by Zelig) and initiates the data download to the server\n    var url, p, v, _callback;\n    readPreprocess(url = pURL, p = preprocess, v = null, _callback = function callback() {\n        d3.xml(metadataurl, \"application/xml\", function (xml) {\n            var vars = xml.documentElement.getElementsByTagName(\"var\");\n            var temp = xml.documentElement.getElementsByTagName(\"fileName\");\n            zparams.zdata = temp[0].childNodes[0].nodeValue;\n\n            var cite = xml.documentElement.getElementsByTagName(\"biblCit\");\n            zparams.zdatacite = cite[0].childNodes[0].nodeValue;\n            // clean citation so POST is valid json\n            zparams.zdatacite = zparams.zdatacite.replace(/\\&/g, \"and\").replace(/\\;/g, \",\").replace(/\\%/g, \"-\");\n\n            // dataset name trimmed to 12 chars\n            var dataname = zparams.zdata.replace(/\\.(.*)/, ''); // drop file extension\n            d3.select(\"#dataName\").html(dataname);\n            $('#cite div.panel-body').text(zparams.zdatacite);\n\n            // Put dataset name, from meta-data, into page title\n            d3.select(\"title\").html(\"TwoRavens \" + dataname);\n            // temporary values for hold that correspond to histogram bins\n            hold = [.6, .2, .9, .8, .1, .3, .4];\n            for (var i = 0; i < vars.length; i++) {\n                valueKey[i] = vars[i].attributes.name.nodeValue;\n                lablArray[i] = vars[i].getElementsByTagName(\"labl\").length == 0 ? \"no label\" : vars[i].getElementsByTagName(\"labl\")[0].childNodes[0].nodeValue;\n                var datasetcount = d3.layout.histogram().bins(barnumber).frequency(false)([0, 0, 0, 0, 0]);\n                // contains all the preprocessed data we have for the variable, as well as UI data pertinent to that variable, such as setx values (if the user has selected them) and pebble coordinates\n                var obj = {\n                    id: i,\n                    reflexive: false,\n                    name: valueKey[i],\n                    labl: lablArray[i],\n                    data: [5, 15, 20, 0, 5, 15, 20],\n                    count: hold,\n                    nodeCol: colors(i),\n                    baseCol: colors(i),\n                    strokeColor: selVarColor,\n                    strokeWidth: \"1\",\n                    subsetplot: false,\n                    subsetrange: [\"\", \"\"],\n                    setxplot: false,\n                    setxvals: [\"\", \"\"],\n                    grayout: false\n                };\n                jQuery.extend(true, obj, preprocess[valueKey[i]]);\n                allNodes.push(obj);\n            };\n\n            // read the zelig models and populate model list in right panel\n            d3.json(\"data/zelig5models.json\", function (err, data) {\n                if (err) return console.warn(err);\n                console.log(\"zelig models json: \", data);\n                for (var key in data.zelig5models) {\n                    if (data.zelig5models.hasOwnProperty(key)) mods[data.zelig5models[key].name[0]] = data.zelig5models[key].description[0];\n                }\n                d3.json(\"data/zelig5choicemodels.json\", function (err, data) {\n                    if (err) return console.warn(err);\n                    console.log(\"zelig choice models json: \", data);\n                    for (var _key in data.zelig5choicemodels) {\n                        if (data.zelig5choicemodels.hasOwnProperty(_key)) mods[data.zelig5choicemodels[_key].name[0]] = data.zelig5choicemodels[_key].description[0];\n                    }\n                    scaffolding(_callback = layout);\n                    dataDownload();\n                });\n            });\n        });\n    });\n}\n\nvar $fill = function $fill(obj, op, d1, d2) {\n    return d3.select(obj).transition().attr('fill-opacity', op).delay(d1).duration(d2);\n};\nvar fill = function fill(d, id, op, d1, d2) {\n    return $fill('#' + id + d.id, op, d1, d2);\n};\nvar fillThis = function fillThis(self, op, d1, d2) {\n    return $fill(self, op, d1, d2);\n};\n\n// scaffolding is called after all external data are guaranteed to have been read to completion. this populates the left panel with variable names, the right panel with model names, the transformation tool, an the associated mouseovers. its callback is layout(), which initializes the modeling space\nfunction scaffolding(callback) {\n    var _this = this;\n\n    // establishing the transformation element\n    d3.select(\"#transformations\").append(\"input\").attr(\"id\", \"tInput\").attr(\"class\", \"form-control\").attr(\"type\", \"text\").attr(\"value\", \"Variable transformation\");\n\n    // variable dropdown\n    d3.select(\"#transformations\").append(\"ul\").attr(\"id\", \"transSel\").style(\"display\", \"none\").style(\"background-color\", varColor).selectAll('li').data([\"a\", \"b\"] //set to variables in model space as they're added\n    ).enter().append(\"li\").text(function (d) {\n        return d;\n    });\n\n    // function dropdown\n    d3.select(\"#transformations\").append(\"ul\").attr(\"id\", \"transList\").style(\"display\", \"none\").style(\"background-color\", varColor).selectAll('li').data(transformList).enter().append(\"li\").text(function (d) {\n        return d;\n    });\n\n    $('#tInput').click(function () {\n        var t = byId('transSel').style.display;\n        if (t !== \"none\") {\n            // if variable list is displayed when input is clicked...\n            $('#transSel').fadeOut(100);\n            return false;\n        }\n        var t1 = byId('transList').style.display;\n        if (t1 !== \"none\") {\n            // if function list is displayed when input is clicked...\n            $('#transList').fadeOut(100);\n            return false;\n        }\n\n        // highlight the text\n        $(_this).select();\n        var pos = $('#tInput').offset();\n        pos.top += $('#tInput').width();\n        $('#transSel').fadeIn(100);\n        return false;\n    });\n\n    var n;\n    $('#tInput').keyup(function (evt) {\n        var t = byId('transSel').style.display;\n        var t1 = byId('transList').style.display;\n        if (t != \"none\") $('#transSel').fadeOut(100);else if (t1 != \"none\") $('#transList').fadeOut(100);\n\n        if (evt.keyCode == 13) {\n            // keyup on Enter\n            n = $('#tInput').val();\n            var t = transParse(n = n);\n            if (!t) return;\n            transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n        }\n    });\n\n    var t;\n    $('#transList li').click(function (evt) {\n        // if interact is selected, show variable list again\n        if ($(_this).text() == \"interact(d,e)\") {\n            $('#tInput').val(tvar.concat('*'));\n            selInteract = true;\n            $(_this).parent().fandeOut(100);\n            $('#transSel').fadeIn(100);\n            evt.stopPropagation();\n            return;\n        }\n\n        var tvar = $('#tInput').val();\n        var tfunc = $(_this).text().replace(\"d\", \"_transvar0\");\n        var tcall = $(_this).text().replace(\"d\", tvar);\n        $('#tInput').val(tcall);\n        $(_this).parent().fadeOut(100);\n        evt.stopPropagation();\n        transform(n = tvar, t = tfunc, typeTransform = false);\n    });\n\n    // populating the variable list in the left panel\n    d3.select(\"#tab1\").selectAll(\"p\").data(valueKey).enter().append(\"p\"\n    // replace non-alphanumerics for selection purposes\n    // perhaps ensure this id is unique by adding '_' to the front?\n    ).attr(\"id\", function (d) {\n        return d.replace(/\\W/g, \"_\");\n    }).text(function (d) {\n        return d;\n    }).style('background-color', function (d) {\n        return findNodeIndex(d) > 2 ? varColor : hexToRgba(selVarColor);\n    }).attr(\"data-container\", \"body\").attr(\"data-toggle\", \"popover\").attr(\"data-trigger\", \"hover\").attr(\"data-placement\", \"right\").attr(\"data-html\", \"true\").attr(\"onmouseover\", \"$(this).popover('toggle');\").attr(\"onmouseout\", \"$(this).popover('toggle');\").attr(\"data-original-title\", \"Summary Statistics\");\n\n    d3.select(\"#models\").style('height', 2000).style('overfill', 'scroll');\n\n    d3.select(\"#models\").selectAll(\"p\").data(Object.keys(mods)).enter().append(\"p\").attr(\"id\", \"_model_\".concat).text(function (d) {\n        return d;\n    }).style('background-color', function (d) {\n        return varColor;\n    }).attr(\"data-container\", \"body\").attr(\"data-toggle\", \"popover\").attr(\"data-trigger\", \"hover\").attr(\"data-placement\", \"top\").attr(\"data-html\", \"true\").attr(\"onmouseover\", \"$(this).popover('toggle');\").attr(\"onmouseout\", \"$(this).popover('toggle');\").attr(\"data-original-title\", \"Model Description\").attr(\"data-content\", function (d) {\n        return mods[d];\n    });\n\n    // call layout() because at this point all scaffolding is up and ready\n    if (typeof callback == \"function\") callback();\n}\n\nvar splice = function splice(color, text) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key2 = 2; _key2 < _len; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n    }\n\n    args.forEach(function (x) {\n        if (color != x[0]) return;\n        var idx = zparams[x[1]].indexOf(text);\n        idx > -1 && zparams[x[1]].splice(idx, 1);\n    });\n};\n\nfunction layout(v) {\n    var myValues = [];\n    nodes = [];\n    links = [];\n\n    if (v == \"add\" || v == \"move\") {\n        d3.select(\"#tab1\").selectAll(\"p\").style('background-color', varColor);\n        for (var j = 0; j < zparams.zvars.length; j++) {\n            var ii = findNodeIndex(zparams.zvars[j]);\n            if (allNodes[ii].grayout) continue;\n            nodes.push(allNodes[ii]);\n            var selectMe = zparams.zvars[j].replace(/\\W/g, \"_\");\n            selectMe = \"#\".concat(selectMe);\n            d3.select(selectMe).style('background-color', function () {\n                return hexToRgba(nodes[j].strokeColor);\n            });\n        }\n\n        for (var j = 0; j < zparams.zedges.length; j++) {\n            var mysrc = nodeIndex(zparams.zedges[j][0]);\n            var mytgt = nodeIndex(zparams.zedges[j][1]);\n            links.push({\n                source: nodes[mysrc],\n                target: nodes[mytgt],\n                left: false,\n                right: true\n            });\n        }\n    } else {\n        if (allNodes.length > 2) {\n            nodes = [allNodes[0], allNodes[1], allNodes[2]];\n            links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }, {\n                source: nodes[0],\n                target: nodes[2],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 2) {\n            nodes = [allNodes[0], allNodes[1]];\n            links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 1) {\n            nodes = [allNodes[0]];\n        } else {\n            alert(\"There are zero variables in the metadata.\");\n            return;\n        }\n    }\n\n    panelPlots(); // after nodes is populated, add subset and setx panels\n    populatePopover(); // pipes in the summary stats shown on mouseovers\n\n    var force = d3.layout.force().nodes(nodes).links(links).size([width, height]).linkDistance(150).charge(-800).on('tick', tick);\n\n    // define arrow markers for graph links\n    svg.append('svg:defs').append('svg:marker').attr('id', 'end-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 6).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M0,-5L10,0L0,5').style('fill', '#000');\n\n    svg.append('svg:defs').append('svg:marker').attr('id', 'start-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 4).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M10,-5L0,0L10,5').style('fill', '#000');\n\n    // line displayed when dragging new nodes\n    var drag_line = svg.append('svg:path').attr('class', 'link dragline hidden').attr('d', 'M0,0L0,0');\n\n    // handles to link and node element groups\n    var path = svg.append('svg:g').selectAll('path'),\n        circle = svg.append('svg:g').selectAll('g');\n\n    // mouse event vars\n    var selected_node = null,\n        selected_link = null,\n        mousedown_link = null,\n        mousedown_node = null,\n        mouseup_node = null;\n\n    function resetMouseVars() {\n        mousedown_node = null;\n        mouseup_node = null;\n        mousedown_link = null;\n    }\n\n    // update force layout (called automatically each iteration)\n    function tick() {\n        // draw directed edges with proper padding from node centers\n        path.attr('d', function (d) {\n            var deltaX = d.target.x - d.source.x,\n                deltaY = d.target.y - d.source.y,\n                dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n                normX = deltaX / dist,\n                normY = deltaY / dist,\n                sourcePadding = d.left ? allR + 5 : allR,\n                targetPadding = d.right ? allR + 5 : allR,\n                sourceX = d.source.x + sourcePadding * normX,\n                sourceY = d.source.y + sourcePadding * normY,\n                targetX = d.target.x - targetPadding * normX,\n                targetY = d.target.y - targetPadding * normY;\n            return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n        });\n        circle.attr('transform', function (d) {\n            return 'translate(' + d.x + ',' + d.y + ')';\n        });\n    }\n\n    // add listeners to leftpanel.left. every time a variable is clicked, nodes updates and background color changes.  mouseover shows summary stats or model description.\n    d3.select(\"#tab1\").selectAll(\"p\").on(\"mouseover\", function (d) {\n        $(\"body div.popover\").addClass(\"variables\");\n        $(\"body div.popover div.popover-content\").addClass(\"form-horizontal\");\n    }).on(\"click\", function varClick() {\n        if (allNodes[findNodeIndex(this.id)].grayout) return null;\n        d3.select(this).style('background-color', function (d) {\n            zparams.zvars = [];\n            var text = d3.select(this).text();\n            if (d3.rgb(d3.select(this).style('background-color')).toString() == varColor.toString()) {\n                // we are adding a var\n                nodes.push(findNode(text));\n                if (nodes.length == 0) nodes[0].reflexive = true;\n                return hexToRgba(selVarColor);\n            } else {\n                // dropping a variable\n                nodes.splice(findNode(text).index, 1);\n                spliceLinksForNode(findNode(text));\n                var node = allNodes[findNodeIndex(text)];\n                splice(node.strokeColor, text, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n                nodeReset(node);\n                legend();\n                return varColor;\n            }\n        });\n        panelPlots();\n        restart();\n    });\n\n    d3.select(\"#models\").selectAll(\"p\" // models tab\n    //  d3.select(\"#Display_content\")\n    ).on(\"click\", function () {\n        var myColor = d3.select(this).style('background-color');\n        d3.select(\"#models\").selectAll(\"p\").style('background-color', varColor);\n        d3.select(this).style('background-color', function (d) {\n            if (d3.rgb(myColor).toString() === varColor.toString()) {\n                zparams.zmodel = d.toString();\n                return hexToRgba(selVarColor);\n            } else {\n                zparams.zmodel = '';\n                return varColor;\n            }\n        });\n        restart();\n    });\n\n    // update graph (called when needed)\n    function restart() {\n        // nodes.id is pegged to allNodes, i.e. the order in which variables are read in\n        // nodes.index is floating and depends on updates to nodes.  a variables index changes when new variables are added.\n        circle.call(force.drag);\n        if (forcetoggle[0] == \"true\") {\n            force.gravity(0.1);\n            force.charge(-800);\n            force.linkStrength(1);\n        } else {\n            force.gravity(0);\n            force.charge(0);\n            force.linkStrength(0);\n        }\n        force.resume();\n\n        // path (link) group\n        path = path.data(links);\n\n        // update existing links\n        // VJD: dashed links between pebbles are \"selected\". this is disabled for now\n        path.classed('selected', function (x) {\n            return null;\n        }).style('marker-start', function (x) {\n            return x.left ? 'url(#start-arrow)' : '';\n        }).style('marker-end', function (x) {\n            return x.right ? 'url(#end-arrow)' : '';\n        });\n\n        // add new links\n        path.enter().append('svg:path').attr('class', 'link').classed('selected', function (x) {\n            return null;\n        }).style('marker-start', function (x) {\n            return x.left ? 'url(#start-arrow)' : '';\n        }).style('marker-end', function (x) {\n            return x.right ? 'url(#end-arrow)' : '';\n        }).on('mousedown', function (d) {\n            // do we ever need to select a link? make it delete..\n            var obj = JSON.stringify(d);\n            for (var j = 0; j < links.length; j++) {\n                if (obj === JSON.stringify(links[j])) links.splice(j, 1);\n            }\n        });\n\n        // remove old links\n        path.exit().remove();\n\n        // circle (node) group\n        circle = circle.data(nodes, function (x) {\n            return x.id;\n        });\n\n        // update existing nodes (reflexive & selected visual states)\n        // d3.rgb is the function adjusting the color here\n        circle.selectAll('circle').classed('reflexive', function (x) {\n            return x.reflexive;\n        }).style('fill', function (x) {\n            return d3.rgb(x.nodeCol);\n        }).style('stroke', function (x) {\n            return d3.rgb(x.strokeColor);\n        }).style('stroke-width', function (x) {\n            return x.strokeWidth;\n        });\n\n        // add new nodes\n        var g = circle.enter().append('svg:g').attr('id', function (x) {\n            return x.name + 'biggroup';\n        });\n\n        // add plot\n        g.each(function (d) {\n            d3.select(this);\n            if (d.plottype == 'continuous') (0, _plots.densityNode)(d, this);else if (d.plottype == 'bar') (0, _plots.barsNode)(d, this);\n        });\n\n        var append = function append(str, attr) {\n            return function (x) {\n                return str + x[attr || 'id'];\n            };\n        };\n\n        g.append(\"path\").attr(\"id\", append('dvArc')).attr(\"d\", arc3).style(\"fill\", dvColor).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, 'dvText', .9, 0, 100);\n        }).on('mouseout', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, 'dvText', 0, 100, 500);\n        }).on('click', function (d) {\n            setColors(d, dvColor);\n            legend(dvColor);\n            restart();\n        });\n\n        g.append(\"text\").attr(\"id\", append('dvText')).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append('#dvArc')).text(\"Dep Var\");\n\n        g.append(\"path\").attr(\"id\", append('nomArc')).attr(\"d\", arc4).style(\"fill\", nomColor).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n            if (d.defaultNumchar == \"character\") return;\n            fillThis(this, .3, 0, 100);\n            fill(d, \"nomText\", .9, 0, 100);\n        }).on('mouseout', function (d) {\n            if (d.defaultNumchar == \"character\") return;\n            fillThis(this, 0, 100, 500);\n            fill(d, \"nomText\", 0, 100, 500);\n        }).on('click', function (d) {\n            if (d.defaultNumchar == \"character\") return;\n            setColors(d, nomColor);\n            legend(nomColor);\n            restart();\n        });\n\n        g.append(\"text\").attr(\"id\", append(\"nomText\")).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append(\"#nomArc\")).text(\"Nominal\");\n\n        g.append('svg:circle').attr('class', 'node').attr('r', allR).style('pointer-events', 'inherit').style('fill', function (d) {\n            return d.nodeCol;\n        }).style('opacity', \"0.5\").style('stroke', function (d) {\n            return d3.rgb(d.strokeColor).toString();\n        }).classed('reflexive', function (d) {\n            return d.reflexive;\n        }).on('dblclick', function (_) {\n            d3.event.stopPropagation(); // stop click from bubbling\n            exports.summaryHold = summaryHold = true;\n        }).on('contextmenu', function (d) {\n            // right click on node\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n\n            rightClickLast = true;\n            mousedown_node = d;\n            selected_node = mousedown_node === selected_node ? null : mousedown_node;\n            selected_link = null;\n\n            // reposition drag line\n            drag_line.style('marker-end', 'url(#end-arrow)').classed('hidden', false).attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n            svg.on('mousemove', mousemove);\n            restart();\n        }).on('mouseup', function (d) {\n            d3.event.stopPropagation();\n\n            if (rightClickLast) {\n                rightClickLast = false;\n                return;\n            }\n            if (!mousedown_node) return;\n\n            // needed by FF\n            drag_line.classed('hidden', true).style('marker-end', '');\n\n            // check for drag-to-self\n            mouseup_node = d;\n            if (mouseup_node === mousedown_node) {\n                resetMouseVars();\n                return;\n            }\n\n            // unenlarge target node\n            d3.select(this).attr('transform', '');\n\n            // add link to graph (update if exists)\n            // NB: links are strictly source < target; arrows separately specified by booleans\n            var source, target, direction;\n            if (mousedown_node.id < mouseup_node.id) {\n                source = mousedown_node;\n                target = mouseup_node;\n                direction = 'right';\n            } else {\n                source = mouseup_node;\n                target = mousedown_node;\n                direction = 'left';\n            }\n\n            var link = links.filter(function (x) {\n                return x.source == source && x.target == target;\n            })[0];\n            if (link) {\n                link[direction] = true;\n            } else {\n                link = {\n                    source: source,\n                    target: target,\n                    left: false,\n                    right: false\n                };\n                link[direction] = true;\n                links.push(link);\n            }\n\n            // select new link\n            selected_link = link;\n            selected_node = null;\n            svg.on('mousemove', null);\n\n            resetMouseVars();\n            restart();\n        });\n\n        // show node names\n        g.append('svg:text').attr('x', 0).attr('y', 15).attr('class', 'id').text(function (d) {\n            return d.name;\n        });\n\n        // show summary stats on mouseover\n        // SVG doesn't support text wrapping, use html instead\n        g.selectAll(\"circle.node\").on(\"mouseover\", function (d) {\n            tabLeft('tab3');\n            varSummary(d);\n            byId('transformations').setAttribute('style', 'display:block');\n            byId(\"transSel\").selectedIndex = d.id;\n            transformVar = valueKey[d.id];\n\n            fill(d, \"dvArc\", .1, 0, 100);\n            fill(d, \"dvText\", .5, 0, 100);\n            if (d.defaultNumchar == \"numeric\") {\n                fill(d, \"nomArc\", .1, 0, 100);\n                fill(d, \"nomText\", .5, 0, 100);\n            }\n            fill(d, \"csArc\", .1, 0, 100);\n            fill(d, \"csText\", .5, 0, 100);\n            fill(d, \"timeArc\", .1, 0, 100);\n            fill(d, \"timeText\", .5, 0, 100);\n            _mithril2.default.redraw();\n        }).on('mouseout', function (d) {\n            if (!summaryHold) tabLeft(subset ? 'tab2' : 'tab1');\n            'csArc csText timeArc timeText dvArc dvText nomArc nomText'.split(' ').map(function (x) {\n                return fill(d, x, 0, 100, 500);\n            });\n            _mithril2.default.redraw();\n        });\n\n        // the transformation variable list is silently updated as pebbles are added/removed\n        d3.select(\"#transSel\").selectAll('li').remove();\n\n        d3.select(\"#transSel\").selectAll('li').data(nodes.map(function (x) {\n            return x.name;\n        }) // set to variables in model space as they're added\n        ).enter().append(\"li\").text(function (d) {\n            return d;\n        });\n\n        $('#transSel li').click(function (evt) {\n            // if 'interaction' is the selected function, don't show the function list again\n            if (selInteract) {\n                var n = $('#tInput').val().concat($(this).text());\n                $('#tInput').val(n);\n                evt.stopPropagation();\n                var t = transParse(n = n);\n                if (!t) return;\n                $(this).parent().fadeOut(100);\n                transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n                return;\n            }\n\n            $('#tInput').val($(this).text());\n            $(this).parent().fadeOut(100);\n            $('#transList').fadeIn(100);\n            evt.stopPropagation();\n        });\n\n        // remove old nodes\n        circle.exit().remove();\n        force.start();\n    }\n\n    function mousedown(d) {\n        // prevent I-bar on drag\n        d3.event.preventDefault();\n        // because :active only works in WebKit?\n        svg.classed('active', true);\n        if (d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n        restart();\n    }\n\n    function mousemove(d) {\n        if (!mousedown_node) return;\n        // update drag line\n        drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n    }\n\n    function mouseup(d) {\n        if (mousedown_node) {\n            drag_line.classed('hidden', true).style('marker-end', '');\n        }\n        // because :active only works in WebKit?\n        svg.classed('active', false);\n        // clear mouse event vars\n        resetMouseVars();\n    }\n\n    // app starts here\n    svg.attr('id', function () {\n        return \"whitespace\".concat(myspace);\n    }).attr('height', height).on('mousedown', function () {\n        mousedown(this);\n    }).on('mouseup', function () {\n        mouseup(this);\n    });\n\n    d3.select(window).on('click', function () {\n        // all clicks will bubble here unless event.stopPropagation()\n        $('#transList').fadeOut(100);\n        $('#transSel').fadeOut(100);\n    });\n\n    restart(); // initializes force.layout()\n    fakeClick();\n}\n\n// returns id\nvar find = function find($nodes, name) {\n    for (var _i in $nodes) {\n        if ($nodes[_i].name == name) return $nodes[_i].id;\n    }\n};\n\n// returns id\nvar findNodeIndex = function findNodeIndex(name) {\n    for (var _i2 in allNodes) {\n        if (allNodes[_i2].name == name) return allNodes[_i2].id;\n    }\n};\n\nvar nodeIndex = function nodeIndex(nodeName) {\n    for (var _i3 in nodes) {\n        if (nodes[_i3].name == nodeName) return _i3;\n    }\n};\n\nvar findNode = function findNode(nodeName) {\n    for (var _i4 in allNodes) {\n        if (allNodes[_i4].name == nodeName) return allNodes[_i4];\n    }\n};\n\n// function called by force button\nfunction forceSwitch() {\n    forcetoggle = [forcetoggle[0] == 'true' ? 'false' : 'true'];\n    if (forcetoggle[0] === \"false\") {\n        byId('btnForce').setAttribute(\"class\", \"btn active\");\n    } else {\n        byId('btnForce').setAttribute(\"class\", \"btn btn-default\");\n        fakeClick();\n    }\n}\n\nfunction spliceLinksForNode(node) {\n    links.filter(function (l) {\n        return l.source == node || l.target == node;\n    }).map(function (x) {\n        return links.splice(links.indexOf(x), 1);\n    });\n}\n\nfunction zPop() {\n    if (dataurl) zparams.zdataurl = dataurl;\n    zparams.zmodelcount = modelCount;\n    zparams.zedges = [];\n    zparams.zvars = [];\n    for (var j = 0; j < nodes.length; j++) {\n        //populate zvars array\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsetx[j] = allNodes[temp].setxvals;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n    }\n    for (var _j = 0; _j < links.length; _j++) {\n        //populate zedges array\n        //correct the source target ordering for Zelig\n        var srctgt = links[_j].left == false ? [links[_j].source.name, links[_j].target.name] : [links[_j].target.name, links[_j].source.name];\n        zparams.zedges.push(srctgt);\n    }\n}\n\nfunction estimate(btn) {\n    if (production && zparams.zsessionid == '') {\n        alert(\"Warning: Data download is not complete. Try again soon.\");\n        return;\n    }\n\n    zPop();\n    // write links to file & run R CMD\n    // package the output as JSON\n    // add call history and package the zparams object as JSON\n    zparams.callHistory = callHistory;\n    var jsonout = JSON.stringify(zparams);\n\n    var urlcall = rappURL + \"zeligapp\"; //base.concat(jsonout);\n    var solajsonout = \"solaJSON=\" + jsonout;\n    console.log(\"urlcall out: \", urlcall);\n    console.log(\"POST out: \", solajsonout);\n\n    zparams.allVars = valueKey.slice(10, 25); // because the URL is too long...\n    jsonout = JSON.stringify(zparams);\n    var selectorurlcall = rappURL + \"selectorapp\";\n\n    function estimateSuccess(btn, json) {\n        estimateLadda.stop(); // stop spinner\n        allResults.push(json);\n        console.log(\"json in: \", json);\n\n        if (!estimated) byId(\"results\").removeChild(byId(\"resultsHolder\"));\n\n        estimated = true;\n        d3.select(\"#results\").style(\"display\", \"block\");\n\n        d3.select(\"#resultsView\").style(\"display\", \"block\");\n\n        d3.select(\"#modelView\").style(\"display\", \"block\");\n\n        // programmatic click on Results button\n        $(\"#btnResults\").trigger(\"click\");\n\n        var model = \"Model\".concat(modelCount = modelCount + 1);\n\n        function modCol() {\n            d3.select(\"#modelView\").selectAll(\"p\").style('background-color', hexToRgba(varColor));\n        }\n        modCol();\n\n        d3.select(\"#modelView\").insert(\"p\", \":first-child\" // top stack for results\n        ).attr(\"id\", model).text(model).style('background-color', hexToRgba(selVarColor)).on(\"click\", function () {\n            var a = this.style.backgroundColor.replace(/\\s*/g, \"\");\n            var b = hexToRgba(selVarColor).replace(/\\s*/g, \"\");\n            if (a.substr(0, 17) == b.substr(0, 17)) return; // escape function if displayed model is clicked\n            modCol();\n            d3.select(this).style('background-color', hexToRgba(selVarColor));\n            viz(this.id);\n        });\n\n        var rCall = [];\n        rCall[0] = json.call;\n        showLog(\"estimate\", rCall);\n\n        viz(model);\n    }\n\n    function estimateFail(btn) {\n        estimateLadda.stop(); // stop spinner\n        estimated = true;\n    }\n\n    function selectorSuccess(btn, json) {\n        d3.select(\"#ticker\").text(\"Suggested variables and percent improvement on RMSE: \" + json.vars);\n        console.log(\"selectorSuccess: \", json);\n    }\n\n    function selectorFail(btn) {\n        alert(\"Selector Fail\");\n    }\n\n    estimateLadda.start(); // start spinner\n    makeCorsRequest(urlcall, btn, estimateSuccess, estimateFail, solajsonout);\n}\n\nfunction dataDownload() {\n    zPop();\n    // write links to file & run R CMD\n\n    //package the output as JSON\n    // add call history and package the zparams object as JSON\n    var jsonout = JSON.stringify(zparams);\n    var btn = \"nobutton\";\n\n    var urlcall = rappURL + \"dataapp\";\n    var solajsonout = \"solaJSON=\" + jsonout;\n    console.log(\"urlcall out: \", urlcall);\n    console.log(\"POST out: \", solajsonout);\n\n    var downloadSuccess = function downloadSuccess(btn, json) {\n        console.log('dataDownload json in: ', json);\n        zparams.zsessionid = json.sessionid[0];\n        // set link URL\n        byId(\"logID\").href = '' + (production ? rappURL + 'log_dir/log_' : 'rook/log_') + zparams.zsessionid + '.txt';\n    };\n    var downloadFail = function downloadFail(_) {\n        return console.log('Data have not been downloaded');\n    };\n    makeCorsRequest(urlcall, btn, downloadSuccess, downloadFail, solajsonout);\n}\n\nfunction viz(mym) {\n    var mym = +mym.substr(5, 5) - 1;\n\n    function removeKids(parent) {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n    }\n\n    removeKids(byId(\"resultsView\"));\n\n    var json = allResults[mym];\n\n    // pipe in figures to right panel\n    var filelist = new Array();\n    for (var i in json.images) {\n        var zfig = document.createElement(\"img\");\n        zfig.setAttribute(\"src\", json.images[i]);\n        zfig.setAttribute('width', 200);\n        zfig.setAttribute('height', 200);\n        byId(\"resultsView\").appendChild(zfig);\n    }\n\n    // write the results table\n    var resultsArray = [];\n    for (var key in json.sumInfo) {\n        if (key == 'colnames') continue;\n        resultsArray.push(json.sumInfo[key]);\n    }\n\n    var table = d3.select(\"#resultsView\").append(\"p\").append(\"table\");\n\n    var thead = table.append(\"thead\");\n    thead.append(\"tr\").selectAll(\"th\").data(json.sumInfo.colnames).enter().append(\"th\").text(function (d) {\n        return d;\n    });\n\n    var tbody = table.append(\"tbody\");\n    tbody.selectAll(\"tr\").data(resultsArray).enter().append(\"tr\").selectAll(\"td\").data(function (d) {\n        return d;\n    }).enter().append(\"td\").text(function (d) {\n        var myNum = Number(d);\n        if (isNaN(myNum)) return d;\n        return myNum.toPrecision(3);\n    }).on(\"mouseover\", function () {\n        d3.select(this).style(\"background-color\", \"aliceblue\");\n    } // for no discernable reason\n    ).on(\"mouseout\", function () {\n        d3.select(this).style(\"background-color\", \"#F9F9F9\");\n    }); //(but maybe we'll think of one)\n\n    d3.select(\"#resultsView\").append(\"p\").html(function () {\n        return \"<b>Formula: </b>\".concat(json.call[0]);\n    });\n\n    _mithril2.default.redraw();\n}\n\n// parses the transformation input. variable names are often nested inside one another, e.g., ethwar, war, wars, and so this is handled\nfunction transParse(n) {\n    var out2 = [];\n    var t2 = n;\n    var k2 = 0;\n    var subMe2 = \"_transvar\".concat(k2);\n    var indexed = [];\n\n    // out2 is all matched variables, indexed is an array, each element is an object that contains the matched variables starting index and finishing index.  e.g., n=\"wars+2\", out2=[war, wars], indexed=[{0,2},{0,3}]\n    for (var i in valueKey) {\n        var m2 = n.match(valueKey[i]);\n        if (m2 != null) out2.push(m2[0]);\n\n        var re = new RegExp(valueKey[i], \"g\");\n        var s = n.search(re);\n        if (s != -1) indexed.push({ from: s, to: s + valueKey[i].length });\n    }\n\n    // nested loop not good, but indexed is not likely to be very large.\n    // if a variable is nested, it is removed from out2\n    // notice, loop is backwards so that index changes don't affect the splice\n    console.log(\"indexed \", indexed);\n    for (var i = indexed.length - 1; i > -1; i--) {\n        for (var j = indexed.length - 1; j > -1; j--) {\n            if (i === j) continue;\n            if (indexed[i].from >= indexed[j].from & indexed[i].to <= indexed[j].to) {\n                console.log(i, \" is nested in \", j);\n                out2.splice(i, 1);\n            }\n        }\n    }\n\n    for (var i in out2) {\n        t2 = t2.replace(out2[i], subMe2); //something that'll never be a variable name\n        k2 = k2 + 1;\n        subMe2 = \"_transvar\".concat(k2);\n    }\n\n    if (out2.length > 0) {\n        out2.push(t2);\n        console.log(\"new out \", out2);\n        return out2;\n    } else {\n        alert(\"No variable name found. Perhaps check your spelling?\");\n        return null;\n    }\n}\n\nfunction transform(n, t, typeTransform) {\n    if (production && zparams.zsessionid == \"\") {\n        alert(\"Warning: Data download is not complete. Try again soon.\");\n        return;\n    }\n\n    if (!typeTransform) t = t.replace(\"+\", \"_plus_\"); // can't send the plus operator\n\n    console.log(n);\n    console.log(t);\n\n    var btn = byId('btnEstimate');\n\n    var myn = allNodes[findNodeIndex(n[0])];\n    if (typeof myn === \"undefined\") {\n        myn = allNodes[findNodeIndex(n)];\n    }\n\n    var outtypes = {\n        varnamesTypes: n,\n        interval: myn.interval,\n        numchar: myn.numchar,\n        nature: myn.nature,\n        binary: myn.binary\n    };\n\n    console.log(myn);\n    // if typeTransform but we already have the metadata\n    if (typeTransform) {\n        if (myn.nature == \"nominal\" & typeof myn.plotvalues !== \"undefined\") {\n            myn.plottype = \"bar\";\n            (0, _plots.barsNode)(myn);\n            populatePopover();\n            panelPlots();\n            return;\n        } else if (myn.nature != \"nominal\" & typeof myn.plotx !== \"undefined\") {\n            myn.plottype = \"continuous\";\n            (0, _plots.densityNode)(myn);\n            populatePopover();\n            panelPlots();\n            return;\n        }\n    }\n\n    //package the output as JSON\n    var transformstuff = {\n        zdataurl: dataurl,\n        zvars: n,\n        zsessionid: zparams.zsessionid,\n        transform: t,\n        callHistory: callHistory,\n        typeTransform: typeTransform,\n        typeStuff: outtypes\n    };\n    var jsonout = JSON.stringify(transformstuff);\n    var urlcall = rappURL + \"transformapp\";\n    var solajsonout = \"solaJSON=\" + jsonout;\n    console.log(\"urlcall out: \", urlcall);\n    console.log(\"POST out: \", solajsonout);\n\n    function transformSuccess(btn, json) {\n        estimateLadda.stop();\n        console.log(\"json in: \", json);\n        if (json.typeTransform[0]) {\n            d3.json(json.url, function (error, json) {\n                if (error) return console.warn(error);\n                var jsondata = json;\n                for (var key in jsondata) {\n                    var myIndex = findNodeIndex(key);\n                    jQuery.extend(true, allNodes[myIndex], jsondata[key]);\n                    if (allNodes[myIndex].plottype === \"continuous\") (0, _plots.densityNode)(allNodes[myIndex]);else if (allNodes[myIndex].plottype === \"bar\") (0, _plots.barsNode)(allNodes[myIndex]);\n                }\n                fakeClick();\n                populatePopover();\n                panelPlots();\n                console.log(allNodes[myIndex]);\n            });\n        } else {\n            callHistory.push({\n                func: \"transform\",\n                zvars: n,\n                transform: t\n            });\n\n            var subseted = false;\n            var rCall = [];\n            rCall[0] = json.call;\n            var newVar = rCall[0][0];\n            trans.push(newVar);\n\n            d3.json(json.url, function (error, json) {\n                if (error) return console.warn(error);\n                var jsondata = json;\n\n                for (var key in jsondata) {\n                    var myIndex = findNodeIndex(key);\n                    if (typeof myIndex !== \"undefined\") {\n                        alert(\"Invalid transformation: this variable name already exists.\");\n                        return;\n                    }\n                    // add transformed variable to the current space\n                    var i = allNodes.length;\n                    var obj1 = {\n                        id: i,\n                        reflexive: false,\n                        name: key,\n                        labl: \"transformlabel\",\n                        data: [5, 15, 20, 0, 5, 15, 20],\n                        count: [.6, .2, .9, .8, .1, .3, .4],\n                        nodeCol: colors(i),\n                        baseCol: colors(i),\n                        strokeColor: selVarColor,\n                        strokeWidth: \"1\",\n                        subsetplot: false,\n                        subsetrange: [\"\", \"\"],\n                        setxplot: false,\n                        setxvals: [\"\", \"\"],\n                        grayout: false,\n                        defaultInterval: jsondata[key].interval,\n                        defaultNumchar: jsondata[key].numchar,\n                        defaultNature: jsondata[key].nature,\n                        defaultBinary: jsondata[key].binary\n                    };\n\n                    jQuery.extend(true, obj1, jsondata[key]);\n                    allNodes.push(obj1);\n\n                    scaffoldingPush(rCall[0]);\n                    valueKey.push(newVar);\n                    nodes.push(allNodes[i]);\n                    fakeClick();\n                    panelPlots();\n\n                    if (allNodes[i].plottype === \"continuous\") {\n                        (0, _plots.densityNode)(allNodes[i]);\n                    } else if (allNodes[i].plottype === \"bar\") {\n                        (0, _plots.barsNode)(allNodes[i]);\n                    }\n                }\n            });\n\n            showLog('transform', rCall);\n        }\n    }\n\n    function transformFail(btn) {\n        alert(\"transform fail\");\n        estimateLadda.stop();\n    }\n\n    estimateLadda.start(); // start spinner\n    makeCorsRequest(urlcall, btn, transformSuccess, transformFail, solajsonout);\n}\n\nfunction scaffoldingPush(v) {\n    // adding a variable to the variable list after a transformation\n    d3.select(\"#tab1\").data(v).append(\"p\").attr(\"id\", function () {\n        return v[0].replace(/\\W/g, \"_\");\n    }).text(v[0]).style('background-color', hexToRgba(selVarColor)).attr(\"data-container\", \"body\").attr(\"data-toggle\", \"popover\").attr(\"data-trigger\", \"hover\").attr(\"data-placement\", \"right\").attr(\"data-html\", \"true\").attr(\"onmouseover\", \"$(this).popover('toggle');\").attr(\"onmouseout\", \"$(this).popover('toggle');\").attr(\"data-original-title\", \"Summary Statistics\").on(\"click\", function varClick() {\n        // we've added a new variable, so we need to add the listener\n        d3.select(this).style('background-color', function (d) {\n            zparams.zvars = [];\n            var text = d3.select(this).text();\n            if (d3.rgb(d3.select(this).style('background-color')).toString() == varColor.toString()) {\n                // we are adding a var\n                nodes.push(findNode(text));\n                if (nodes.length == 0) nodes[0].reflexive = true;\n                return hexToRgba(selVarColor);\n            } else {\n                // dropping a variable\n                nodes.splice(findNode(text).index, 1);\n                spliceLinksForNode(findNode(text));\n                splice(text, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n                nodeReset(allNodes[findNodeIndex(text)]);\n                borderState();\n                return varColor;\n            }\n        });\n        fakeClick();\n        panelPlots();\n    });\n    populatePopover(); // pipes in the summary stats\n\n    // drop down menu for tranformation toolbar\n    d3.select(\"#transSel\").data(v).append(\"option\").text(function (d) {\n        return d;\n    });\n}\n\n// below from http://www.html5rocks.com/en/tutorials/cors/ for cross-origin resource sharing\n// Create the XHR object.\nfunction createCORSRequest(method, url, callback) {\n    var xhr = new XMLHttpRequest();\n    if (\"withCredentials\" in xhr) {\n        // XHR for Chrome/Firefox/Opera/Safari.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        // XDomainRequest for IE.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // CORS not supported.\n        xhr = null;\n    }\n    // xhr.setRequestHeader('Content-Type', 'text/plain');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    return xhr;\n}\n\n// Make the actual CORS request.\nfunction makeCorsRequest(url, btn, callback, warningcallback, jsonstring) {\n    var xhr = createCORSRequest('POST', url);\n    if (!xhr) {\n        alert('CORS not supported');\n        return;\n    }\n    // Response handlers for asynchronous load\n    // onload or onreadystatechange?\n\n    xhr.onload = function () {\n        var text = xhr.responseText;\n        console.log(\"text \", text);\n\n        try {\n            var json = JSON.parse(text); // should wrap in try / catch\n            var names = Object.keys(json);\n        } catch (err) {\n            estimateLadda.stop();\n            selectLadda.stop();\n            console.log(err);\n            alert('Error: Could not parse incoming JSON.');\n        }\n\n        if (names[0] == \"warning\") {\n            warningcallback(btn);\n            alert(\"Warning: \" + json.warning);\n        } else callback(btn, json);\n    };\n    xhr.onerror = function () {\n        // note: xhr.readystate should be 4, and status should be 200.  a status of 0 occurs when the url becomes too large\n        if (xhr.status == 0) alert('There was an error making the request. xmlhttprequest status is 0.');else if (xhr.readyState != 4) alert('There was an error making the request. xmlhttprequest readystate is not 4.');else alert('Woops, there was an error making the request.');\n        console.log(xhr);\n        estimateLadda.stop();\n        selectLadda.stop();\n    };\n    xhr.send(jsonstring);\n}\n\nfunction legend(c) {\n    borderState();\n    _mithril2.default.redraw();\n}\n\n// programmatically deselecting every selected variable...\nfunction erase() {\n    leftpanelMedium();\n    rightpanelMedium();\n    tabLeft('tab1');\n    jQuery.fn.d3Click = function () {\n        this.children().each(function (i, e) {\n            var mycol = d3.rgb(this.style.backgroundColor);\n            if (mycol.toString() === varColor.toString()) return;\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $(\"#tab1\").d3Click();\n}\n\n// http://www.tutorials2learn.com/tutorials/scripts/javascript/xml-parser-javascript.html\nfunction loadXMLDoc(XMLname) {\n    var xmlDoc;\n    if (window.XMLHttpRequest) {\n        xmlDoc = new window.XMLHttpRequest();\n        xmlDoc.open(\"GET\", XMLname, false);\n        xmlDoc.send(\"\");\n        return xmlDoc.responseXML;\n    }\n    // IE 5 and IE 6\n    else if (ActiveXObject(\"Microsoft.XMLDOM\")) {\n            xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = false;\n            xmlDoc.load(XMLname);\n            return xmlDoc;\n        }\n    alert(\"Error loading document!\");\n    return null;\n}\n\nfunction tabLeft(tab) {\n    byId('tab1').style.display = 'none';\n    byId('tab2').style.display = 'none';\n    byId('tab3').style.display = 'none';\n    byId(tab).style.display = 'block';\n    if (tab != 'tab3') {\n        exports.subset = subset = tab == 'tab2';\n        exports.summaryHold = summaryHold = false;\n    }\n    exports.lefttab = lefttab = tab;\n}\n\nfunction tabRight(tabid) {\n    if (tabid == \"btnModels\") {\n        d3.select(\"#rightpanel\").attr(\"class\", \"sidepanel container clearfix\");\n    } else if (tabid == \"btnSetx\") {\n        if (righttab == \"btnSetx\" || d3.select(\"#rightpanel\").attr(\"class\") == \"sidepanel container clearfix\") toggleR();\n    } else if (tabid == \"btnResults\") {\n        if (estimated == false) {\n            d3.select(\"#rightpanel\").attr(\"class\", \"sidepanel container clearfix\");\n        } else if (righttab == \"btnResults\" || d3.select(\"#rightpanel\").attr(\"class\") == \"sidepanel container clearfix\") toggleR();\n    }\n\n    exports.righttab = righttab = tabid;\n\n    function toggleR() {\n        d3.select(\"#rightpanel\").attr(\"class\", function () {\n            if (this.getAttribute(\"class\") == \"sidepanel container clearfix expandpanel\") return \"sidepanel container clearfix\";\n            return \"sidepanel container clearfix expandpanel\";\n        });\n    }\n}\n\nvar summary = exports.summary = { data: [] };\n\nfunction varSummary(d) {\n    var t1 = 'Mean:, Median:, Most Freq:, Occurrences:, Median Freq:, Occurrences:, Least Freq:, Occurrences:, Std Dev:, Minimum:, Maximum:, Invalid:, Valid:, Uniques:, Herfindahl'.split(', ');\n    var rint = d3.format('r');\n    var str = function str(x, p) {\n        return (+x).toPrecision(p || 4).toString();\n    };\n    var t2 = priv && d.meanCI ? [str(d.mean, 2) + ' (' + str(d.meanCI.lowerBound, 2) + ' - ' + str(d.meanCI.upperBound, 2) + ')', str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)] : [str(d.mean), str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)];\n\n    summary.data = [];\n    for (var _i5 = 0; _i5 < t1.length; _i5++) {\n        if (t2[_i5].indexOf('NaN') > -1 || t2[_i5] == 'NA' || t2[_i5] == '') continue;\n        summary.data.push([t1[_i5], t2[_i5]]);\n    };\n\n    summary.name = d.name;\n    summary.labl = d.labl;\n\n    d3.select('#tab3').selectAll('svg').remove();\n\n    if (!d.plottype) return;\n    if (d.plottype == 'continuous') (0, _plots.density)(d, 'varSummary', priv);else if (d.plottype == \"bar\") (0, _plots.bars)(d, 'varSummary', priv);else d3.select(\"#tab3\" // no graph to draw, but still need to remove previous graph\n    ).selectAll(\"svg\").remove();\n}\n\nfunction populatePopover() {\n    d3.select(\"#tab1\").selectAll(\"p\").attr(\"data-content\", function (d) {\n        return popoverContent(allNodes[findNodeIndex(d)]);\n    });\n}\n\nfunction popoverContent(d) {\n    var rint = d3.format(\"r\");\n    var text = \"\";\n    if (d.labl != \"\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Label</label><div class='col-sm-6'><p class='form-control-static'><i>\" + d.labl + \"</i></p></div></div>\";\n    if (d.mean != \"NA\") {\n        text += \"<div class='form-group'><label class='col-sm-4 control-label'>Mean</label><div class='col-sm-6'><p class='form-control-static'>\";\n        text += priv && d.meanCI ? (+d.mean).toPrecision(2).toString() + \" (\" + (+d.meanCI.lowerBound).toPrecision(2).toString() + \" - \" + (+d.meanCI.upperBound).toPrecision(2).toString() + \")\" : (+d.mean).toPrecision(4).toString();\n        text += \"</p></div></div>\";\n    }\n    if (d.median != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Median</label><div class='col-sm-6'><p class='form-control-static'>\" + (+d.median).toPrecision(4).toString() + \"</p></div></div>\";\n    if (d.mode != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Most Freq</label><div class='col-sm-6'><p class='form-control-static'>\" + d.mode + \"</p></div></div>\";\n    if (d.freqmode != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Occurrences</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.freqmode) + \"</p></div></div>\";\n    if (d.mid != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Median Freq</label><div class='col-sm-6'><p class='form-control-static'>\" + d.mid + \"</p></div></div>\";\n    if (d.freqmid != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Occurrences</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.freqmid) + \"</p></div></div>\";\n    if (d.fewest != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Least Freq</label><div class='col-sm-6'><p class='form-control-static'>\" + d.fewest + \"</p></div></div>\";\n    if (d.freqfewest != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Occurrences</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.freqfewest) + \"</p></div></div>\";\n    if (d.sd != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Stand Dev</label><div class='col-sm-6'><p class='form-control-static'>\" + (+d.sd).toPrecision(4).toString() + \"</p></div></div>\";\n    if (d.max != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Maximum</label><div class='col-sm-6'><p class='form-control-static'>\" + (+d.max).toPrecision(4).toString() + \"</p></div></div>\";\n    if (d.min != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Minimum</label><div class='col-sm-6'><p class='form-control-static'>\" + (+d.min).toPrecision(4).toString() + \"</p></div></div>\";\n    if (d.invalid != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Invalid</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.invalid) + \"</p></div></div>\";\n    if (d.valid != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Valid</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.valid) + \"</p></div></div>\";\n    if (d.uniques != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Uniques</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.uniques) + \"</p></div></div>\";\n    if (d.herfindahl != \"NA\") text += \"<div class='form-group'><label class='col-sm-4 control-label'>Herfindahl</label><div class='col-sm-6'><p class='form-control-static'>\" + (+d.herfindahl).toPrecision(4).toString() + \"</p></div></div>\";\n    return text;\n}\n\nfunction popupX(d) {\n    var tsf = d3.format(\".4r\");\n    var rint = d3.format(\"r\");\n    //Create the tooltip label\n    d3.select(\"#tooltip\").style(\"left\", tempX + \"px\").style(\"top\", tempY + \"px\").select(\"#tooltiptext\").html(\"<div class='form-group'><label class='col-sm-4 control-label'>Mean</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.mean) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Median</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.median) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Mode</label><div class='col-sm-6'><p class='form-control-static'>\" + d.mode + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Stand Dev</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.sd) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Maximum</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.max) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Minimum</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.min) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Valid</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.valid) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Invalid</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.invalid) + \"</p></div></div>\");\n}\n\nfunction panelPlots() {\n    // build arrays from nodes in main\n    var vars = [];\n    var ids = [];\n    nodes.forEach(function (n) {\n        vars.push(n.name.replace(/\\(|\\)/g, ''));\n        ids.push(n.id);\n    });\n\n    //remove all plots, could be smarter here\n    d3.select('#setx').selectAll('svg').remove();\n    d3.select('#tab2').selectAll('svg').remove();\n    for (var i = 0; i < vars.length; i++) {\n        var node = allNodes[ids[i]];\n        node.setxplot = false;\n        node.subsetplot = false;\n        if (node.plottype === \"continuous\" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.density)(node, div = \"setx\", priv);\n            node.subsetplot = true;\n            (0, _plots.density)(node, div = \"subset\", priv);\n        } else if (node.plottype === \"bar\" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.bars)(node, div = \"setx\", priv);\n            node.subsetplot = true;\n            (0, _plots.barsSubset)(node);\n        }\n    }\n\n    d3.select(\"#setx\").selectAll(\"svg\").each(function () {\n        d3.select(this);\n        var regstr = /(.+)_setx_(\\d+)/;\n        var myname = regstr.exec(this.id);\n        var nodeid = myname[2];\n        myname = myname[1];\n        var j = vars.indexOf(myname);\n        if (j == -1) {\n            allNodes[nodeid].setxplot = false;\n            var temp = \"#\".concat(myname, \"_setx_\", nodeid);\n            d3.select(temp).remove();\n            allNodes[nodeid].subsetplot = false;\n            temp = \"#\".concat(myname, \"_tab2_\", nodeid);\n            d3.select(temp).remove();\n        }\n    });\n}\n\n// easy functions to collapse panels to base\nfunction rightpanelMedium() {\n    d3.select(\"#rightpanel\").attr(\"class\", \"sidepanel container clearfix\");\n}\n\nfunction leftpanelMedium() {\n    d3.select(\"#leftpanel\").attr(\"class\", \"sidepanel container clearfix\");\n}\n\n// converts color codes\nfunction hexToRgba(hex) {\n    var int = parseInt(hex.replace('#', ''), 16);\n    return 'rgba(' + [int >> 16 & 255, int >> 8 & 255, int & 255, '0.5'].join(',') + ')';\n}\n\n// takes node and color and updates zparams\nfunction setColors(n, c) {\n    if (n.strokeWidth == '1') {\n        // adding time, cs, dv, nom to node with no stroke\n        n.strokeWidth = '4';\n        n.strokeColor = c;\n        n.nodeCol = taggedColor;\n        var push = function push(_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n                color = _ref3[0],\n                key = _ref3[1];\n\n            if (color != c) return;\n            zparams[key] = Array.isArray(zparams[key]) ? zparams[key] : [];\n            zparams[key].push(n.name);\n            if (key == 'znom') {\n                allNodes[findNodeIndex(n.name)].nature = \"nominal\";\n                transform(n.name, t = null, typeTransform = true);\n            }\n        };\n        [[dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']].forEach(push);\n        d3.select(\"#tab1\").select(\"p#\".concat(n.name)).style('background-color', hexToRgba(c));\n    } else if (n.strokeWidth == '4') {\n        if (c == n.strokeColor) {\n            // deselecting time, cs, dv, nom\n            n.strokeWidth = '1';\n            n.strokeColor = selVarColor;\n            n.nodeCol = colors(n.id);\n            d3.select(\"#tab1\").select(\"p#\".concat(n.name)).style('background-color', hexToRgba(selVarColor));\n            splice(c, n.name, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n            if (nomColor == c && zparams.znom.indexOf(n.name) > -1) {\n                allNodes[findNodeIndex(n.name)].nature = allNodes[findNodeIndex(n.name)].defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n        } else {\n            // deselecting time, cs, dv, nom AND changing it to time, cs, dv, nom\n            splice(n.strokeColor, n.name, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n            if (nomColor == n.strokeColor && zparams.znom.indexOf(n.name) > -1) {\n                allNodes[findNodeIndex(n.name)].nature = allNodes[findNodeIndex(n.name)].defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n            n.strokeColor = c;\n            d3.select(\"#tab1\").select(\"p#\".concat(n.name)).style('background-color', hexToRgba(c));\n            if (dvColor == c) zparams.zdv.push(n.name);else if (csColor == c) zparams.zcross.push(n.name);else if (timeColor == c) zparams.ztime.push(n.name);else if (nomColor == c) {\n                zparams.znom.push(n.name);\n                allNodes[findNodeIndex(n.name)].nature = \"nominal\";\n                transform(n.name, t = null, typeTransform = true);\n            }\n        }\n    }\n}\n\nfunction borderState() {\n    zparams.zdv.length > 0 ? $('#dvButton .rectColor svg circle').attr('stroke', dvColor) : $('#dvButton').css('border-color', '#ccc');\n    zparams.zcross.length > 0 ? $('#csButton .rectColor svg circle').attr('stroke', csColor) : $('#csButton').css('border-color', '#ccc');\n    zparams.ztime.length > 0 ? $('#timeButton .rectColor svg circle').attr('stroke', timeColor) : $('#timeButton').css('border-color', '#ccc');\n    zparams.znom.length > 0 ? $('#nomButton .rectColor svg circle').attr('stroke', nomColor) : $('#nomButton').css('border-color', '#ccc');\n}\n\n// small appearance resets, but perhaps this will become a hard reset back to all original allNode values?\nfunction nodeReset(n) {\n    n.strokeColor = selVarColor;\n    n.strokeWidth = \"1\";\n    n.nodeCol = n.baseCol;\n}\n\nfunction subsetSelect(btn) {\n    if (dataurl) zparams.zdataurl = dataurl;\n    if (production && zparams.zsessionid == \"\") {\n        alert(\"Warning: Data download is not complete. Try again soon.\");\n        return;\n    }\n    zparams.zvars = [];\n    zparams.zplot = [];\n    var subsetEmpty = true;\n    // is this the same as zPop()?\n    for (var j = 0; j < nodes.length; j++) {\n        // populate zvars and zsubset arrays\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n        if (zparams.zsubset[j].length > 0) {\n            if (zparams.zsubset[j][0] != \"\") zparams.zsubset[j][0] = Number(zparams.zsubset[j][0]);\n            if (zparams.zsubset[j][1] != \"\") zparams.zsubset[j][1] = Number(zparams.zsubset[j][1]);\n        }\n        zparams.zplot.push(allNodes[temp].plottype);\n        if (zparams.zsubset[j][1] != \"\") subsetEmpty = false; // only need to check one\n    }\n\n    if (subsetEmpty == true) {\n        alert(\"Warning: No new subset selected.\");\n        return;\n    }\n\n    var outtypes = [];\n    for (var j = 0; j < allNodes.length; j++) {\n        outtypes.push({\n            varnamesTypes: allNodes[j].name,\n            nature: allNodes[j].nature,\n            numchar: allNodes[j].numchar,\n            binary: allNodes[j].binary,\n            interval: allNodes[j].interval\n        });\n    }\n\n    var subsetstuff = {\n        zdataurl: zparams.zdataurl,\n        zvars: zparams.zvars,\n        zsubset: zparams.zsubset,\n        zsessionid: zparams.zsessionid,\n        zplot: zparams.zplot,\n        callHistory: callHistory,\n        typeStuff: outtypes\n    };\n\n    var jsonout = JSON.stringify(subsetstuff);\n    var urlcall = rappURL + \"subsetapp\";\n    var solajsonout = \"solaJSON=\" + jsonout;\n    console.log(\"urlcall out: \", urlcall);\n    console.log(\"POST out: \", solajsonout);\n\n    function subsetSelectSuccess(btn, json) {\n        selectLadda.stop(); // stop motion\n        $(\"#btnVariables\").trigger(\"click\"); // programmatic clicks\n        $(\"#btnModels\").trigger(\"click\");\n\n        var grayOuts = [];\n        var rCall = [];\n        rCall[0] = json.call;\n\n        // store contents of the pre-subset space\n        zPop();\n        var myNodes = jQuery.extend(true, [], allNodes);\n        var myParams = jQuery.extend(true, {}, zparams);\n        var myTrans = jQuery.extend(true, [], trans);\n        var myForce = jQuery.extend(true, [], forcetoggle);\n        var myPreprocess = jQuery.extend(true, {}, preprocess);\n        var myLog = jQuery.extend(true, [], logArray);\n        var myHistory = jQuery.extend(true, [], callHistory);\n\n        spaces[myspace] = {\n            \"allNodes\": myNodes,\n            \"zparams\": myParams,\n            \"trans\": myTrans,\n            \"force\": myForce,\n            \"preprocess\": myPreprocess,\n            \"logArray\": myLog,\n            \"callHistory\": myHistory\n        };\n\n        // remove pre-subset svg\n        var selectMe = \"#m\".concat(myspace);\n        d3.select(selectMe).attr('class', 'item');\n        selectMe = \"#whitespace\".concat(myspace);\n        d3.select(selectMe).remove();\n\n        myspace = spaces.length;\n        callHistory.push({\n            func: \"subset\",\n            zvars: jQuery.extend(true, [], zparams.zvars),\n            zsubset: jQuery.extend(true, [], zparams.zsubset),\n            zplot: jQuery.extend(true, [], zparams.zplot)\n        });\n\n        // this is to be used to gray out and remove listeners for variables that have been subsetted out of the data\n        function varOut(v) {\n            // if in nodes, remove gray out in left panel\n            // make unclickable in left panel\n            for (var i = 0; i < v.length; i++) {\n                var selectMe = v[i].replace(/\\W/g, \"_\");\n                byId(selectMe).style.color = hexToRgba(grayColor);\n                selectMe = \"p#\".concat(selectMe);\n                d3.select(selectMe).on(\"click\", null);\n            }\n        }\n\n        showLog('subset', rCall);\n        reWriteLog();\n\n        d3.select(\"#innercarousel\").append('div').attr('class', 'item active').attr('id', function () {\n            return \"m\".concat(myspace.toString());\n        }).append('svg').attr('id', 'whitespace');\n        svg = d3.select(\"#whitespace\");\n\n        d3.json(json.url, function (error, json) {\n            if (error) return console.warn(error);\n            var jsondata = json;\n            for (var key in jsondata) {\n                var myIndex = findNodeIndex(key);\n                allNodes[myIndex].plotx = undefined;\n                allNodes[myIndex].ploty = undefined;\n                allNodes[myIndex].plotvalues = undefined;\n                allNodes[myIndex].plottype = \"\";\n\n                jQuery.extend(true, allNodes[myIndex], jsondata[key]);\n                allNodes[myIndex].subsetplot = false;\n                allNodes[myIndex].subsetrange = [\"\", \"\"];\n                allNodes[myIndex].setxplot = false;\n                allNodes[myIndex].setxvals = [\"\", \"\"];\n\n                if (allNodes[myIndex].valid == 0) {\n                    grayOuts.push(allNodes[myIndex].name);\n                    allNodes[myIndex].grayout = true;\n                }\n            }\n\n            rePlot();\n            populatePopover();\n            layout(v = \"add\");\n        });\n\n        varOut(grayOuts);\n    }\n\n    selectLadda.start(); //start button motion\n    makeCorsRequest(urlcall, btn, subsetSelectSuccess, function (btn) {\n        return selectLadda.stop();\n    }, solajsonout);\n}\n\nfunction readPreprocess(url, p, v, callback) {\n    console.log(url);\n    d3.json(url, function (err, json) {\n        if (err) return console.warn(err);\n        console.log('inside readPreprocess function');\n        console.log(json);\n\n        priv = json.dataset.priv || priv;\n        // copy object\n        Object.keys(json.variables).forEach(function (k) {\n            return p[k] = json.variables[k];\n        });\n        if (typeof callback == 'function') callback();\n    });\n}\n\n// removes all the children svgs inside subset and setx divs\nfunction rePlot() {\n    d3.select('#tab2').selectAll('svg').remove();\n    d3.select('#setx').selectAll('svg').remove();\n    allNodes.forEach(function (n) {\n        return n.setxplot = n.subsetplot = false;\n    });\n}\n\nvar showLog = function showLog(val, rCall) {\n    logArray.push((val + ': ').concat(rCall[0]));\n    _mithril2.default.redraw();\n};\n\nfunction reWriteLog() {\n    d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").remove();\n    d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").data(logArray).enter().append(\"p\").text(function (d) {\n        return d;\n    });\n}\n\n// acts as if the user clicked in whitespace. useful when restart() is outside of scope\nfunction fakeClick() {\n    var myws = \"#whitespace\".concat(myspace);\n    // d3 and programmatic events don't mesh well, here's a SO workaround that looks good but uses jquery...\n    jQuery.fn.d3Click = function () {\n        this.each(function (i, e) {\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"mousedown\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $(myws).d3Click();\n    d3.select(myws).classed('active', false);\n}\n\n// searchvar\n$(\"#searchvar\").ready(function () {\n    $(\"#searchvar\").val('');\n});\n\nfunction tog(v) {\n    return v ? 'addClass' : 'removeClass';\n}\n\n$(document).on('input', '#searchvar', function () {\n    $(this)[tog(this.value)]('x');\n}).on('mousemove', '.x', function (e) {\n    $(this)[tog(this.offsetWidth - 18 < e.clientX - this.getBoundingClientRect().left)]('onX');\n}).on('click', '.onX', function () {\n    $(this).removeClass('x onX').val('').focus();\n    updatedata(valueKey, 0);\n});\n\nvar srchid = [],\n    vkey = [];\n\n$(\"#searchvar\").on(\"keyup\", function search(e) {\n    $(\"#tab1\").children().popover('hide');\n    var flag = 0,\n        k = 0,\n        vkey = [],\n        srchid = [];\n\n    if ($(this).val() == '') {\n        srchid = [];\n        flag = 0;\n\n        updatedata(valueKey, flag);\n        return;\n    }\n\n    for (var node in allNodes) {\n        if (node.name.indexOf($(this).val()) != -1) srchid[++k] = i;\n    }for (var _node in allNodes) {\n        if (_node.labl.indexOf($(this).val()) != -1 && $.inArray(i, srchid) == -1) srchid[++k] = i;\n    }if (k == 0) vkey = valueKey;else {\n        var _ref4 = [1, 0, srchid.map(function (x) {\n            return valueKey[x];\n        })];\n        flag = _ref4[0];\n        k = _ref4[1];\n        vkey = _ref4[2];\n\n        for (var x in valueKey) {\n            if ($.inArray(x, vkey) == -1) vkey[++i] = x;\n        }\n    }\n    updatedata(vkey, flag);\n});\n\nfunction addlistener(nodes) {\n    d3.select(\"#tab1\").selectAll(\"p\").on(\"mouseover\", function (d) {\n        $(\"body div.popover\").addClass(\"variables\");\n        $(\"body div.popover div.popover-content\").addClass(\"form-horizontal\");\n    }).on(\"click\", function varClick() {\n        if (allNodes[findNodeIndex(this.id)].grayout) return null;\n\n        d3.select(this).style('background-color', function (d) {\n            var myText = d3.select(this).text();\n            var myColor = d3.select(this).style('background-color');\n            var mySC = allNodes[findNodeIndex(myText)].strokeColor;\n            var myNode = allNodes[findNodeIndex(this.id)];\n\n            zparams.zvars = []; //empty the zvars array\n            if (d3.rgb(myColor).toString() === varColor.toString()) {\n                // we are adding a var\n                if (nodes.length == 0) {\n                    nodes.push(findNode(myText));\n                    nodes[0].reflexive = true;\n                } else {\n                    nodes.push(findNode(myText));\n                }\n                if (myNode.time === \"yes\") {\n                    tagColors(myNode, timeColor);\n                    return hexToRgba(timeColor);\n                } else if (myNode.nature === \"nominal\") {\n                    tagColors(myNode, nomColor);\n                    return hexToRgba(nomColor);\n                } else return hexToRgba(selVarColor);\n            } else {\n                // dropping a variable\n                nodes.splice(findNode(myText)[\"index\"], 1);\n                spliceLinksForNode(findNode(myText));\n                if (mySC == dvColor) {\n                    var dvIndex = zparams.zdv.indexOf(myText);\n                    if (dvIndex > -1) {\n                        zparams.zdv.splice(dvIndex, 1);\n                    }\n                } else if (mySC == csColor) {\n                    var csIndex = zparams.zcross.indexOf(myText);\n                    if (csIndex > -1) {\n                        zparams.zcross.splice(csIndex, 1);\n                    }\n                } else if (mySC == timeColor) {\n                    var timeIndex = zparams.ztime.indexOf(myText);\n                    if (timeIndex > -1) {\n                        zparams.ztime.splice(timeIndex, 1);\n                    }\n                } else if (mySC == nomColor) {\n                    var nomIndex = zparams.znom.indexOf(myText);\n                    if (nomIndex > -1) {\n                        zparams.znom.splice(dvIndex, 1);\n                    }\n                }\n                borderState();\n                legend();\n                return varColor;\n            }\n        });\n        panelPlots();\n        restart();\n    });\n}\n\nfunction updatedata(val, flag) {\n    var clr = '#000000';\n    var bordercol = clr;\n    var borderstyle = 'solid';\n    var nodenames = nodes.map(function (x) {\n        return x.name;\n    });\n\n    d3.select(\"#tab1\").selectAll(\"p\").data(valueKey).remove();\n    d3.select(\"#tab1\").selectAll(\"p\").data(val).enter().append(\"p\").attr(\"id\", function (d) {\n        return d.replace(/\\W/g, \"_\");\n    } // replace non-alphanumerics for selection purposes, perhaps ensure this id is unique by adding '_' to the front?\n    ).text(function (d) {\n        return d;\n    }).style('background-color', function (d) {\n        return $.inArray(findNode(d).name, nodenames) == -1 ? varColor : hexToRgba(selVarColor);\n    }).style('border-style', function (d) {\n        return $.inArray(findNodeIndex(d), srchid) != -1 && flag == 1 ? borderstyle : null;\n    }).style('border-color', function (d) {\n        return $.inArray(findNodeIndex(d), srchid) != -1 && flag == 1 ? bordercol : null;\n    }).attr(\"data-container\", \"body\").attr(\"data-toggle\", \"popover\").attr(\"data-trigger\", \"hover\").attr(\"data-placement\", \"right\").attr(\"data-html\", \"true\").attr(\"onmouseover\", \"$(this).popover('toggle');\").attr(\"onmouseout\", \"$(this).popover('toggle');\").attr(\"data-original-title\", \"Summary Statistics\");\n    fakeClick();\n    $(\"#tab1\").children().popover('hide');\n    populatePopover();\n    addlistener(nodes);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvYXBwLmpzP2JkOWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCB7YmFycywgYmFyc05vZGUsIGJhcnNTdWJzZXQsIGRlbnNpdHksIGRlbnNpdHlOb2RlfSBmcm9tICcuL3Bsb3RzLmpzJztcblxuLy8gaG9zdG5hbWUgZGVmYXVsdCAtIHRoZSBhcHAgd2lsbCB1c2UgaXQgdG8gb2J0YWluIHRoZSB2YXJpYWJsZSBtZXRhZGF0YVxuLy8gKGRkaSkgYW5kIHByZS1wcm9jZXNzZWQgZGF0YSBpbmZvIGlmIHRoZSBmaWxlIGlkIGlzIHN1cHBsaWVkIGFzIGFuXG4vLyBhcmd1bWVudCAoZm9yIGV4LiwgZ3VpLmh0bWw/ZGZJZD0xNyksIGJ1dCBob3N0bmFtZSBpc24ndC5cbi8vIEVkaXQgaXQgdG8gc3VpdCB5b3VyIGluc3RhbGxhdGlvbi5cbi8vIChOT1RFIHRoYXQgaWYgdGhlIGZpbGUgaWQgaXNuJ3Qgc3VwcGxpZWQsIHRoZSBhcHAgd2lsbCBkZWZhdWx0IHRvIHRoZVxuLy8gbG9jYWwgZmlsZXMgc3BlY2lmaWVkIGJlbG93ISlcbi8vIE5FVzogaXQgaXMgYWxzbyBwb3NzaWJsZSBub3cgdG8gc3VwcGx5IGNvbXBsZXRlIHVybHMgZm9yIHRoZSBkZGkgYW5kXG4vLyB0aGUgdGFiLWRlbGltaXRlZCBkYXRhIGZpbGU7IHRoZSBwYXJhbWV0ZXJzIGFyZSBkZGl1cmwgYW5kIGRhdGF1cmwuXG4vLyBUaGVzZSBuZXcgcGFyYW1ldGVycyBhcmUgb3B0aW9uYWwuIElmIHRoZXkgYXJlIG5vdCBzdXBwbGllZCwgdGhlIGFwcFxuLy8gd2lsbCBnbyB0aGUgb2xkIHJvdXRlIC0gd2lsbCB0cnkgdG8gY29vayBzdGFuZGFyZCBkYXRhdmVyc2UgdXJsc1xuLy8gZm9yIGJvdGggdGhlIGRhdGEgYW5kIG1ldGFkYXRhLCBpZiB0aGUgZmlsZSBpZCBpcyBzdXBwbGllZDsgb3IgdGhlXG4vLyBsb2NhbCBmaWxlcyBpZiBub3RoaW5nIGlzIHN1cHBsaWVkLlxuXG52YXIgcHJvZHVjdGlvbiA9IGZhbHNlO1xudmFyIHJhcHBVUkwgPSAocHJvZHVjdGlvbiA/ICdodHRwczovL2JldGEuZGF0YXZlcnNlLm9yZycgOiAnaHR0cDovLzAuMC4wLjA6ODAwMCcpICsgJy9jdXN0b20vJztcblxuLy8gaW5pdGlhbCBjb2xvciBzY2FsZSB1c2VkIHRvIGVzdGFibGlzaCB0aGUgaW5pdGlhbCBjb2xvcnMgb2Ygbm9kZXNcbi8vIGFsbE5vZGVzLnB1c2goKSBiZWxvdyBlc3RhYmxpc2hlcyBhIGZpZWxkIGZvciB0aGUgbWFzdGVyIG5vZGUgYXJyYXkgYWxsTm9kZXMgY2FsbGVkIFwibm9kZUNvbFwiIGFuZCBhc3NpZ25zIGEgY29sb3IgZnJvbSB0aGlzIHNjYWxlIHRvIHRoYXQgZmllbGRcbi8vIGV2ZXJ5dGhpbmcgdGhlcmUgYWZ0ZXIgc2hvdWxkIHJlZmVyIHRvIHRoZSBub2RlQ29sIGFuZCBub3QgdGhlIGNvbG9yIHNjYWxlLCB0aGlzIGVuYWJsZXMgdXMgdG8gdXBkYXRlIGNvbG9ycyBhbmQgcGFzcyB0aGUgdmFyaWFibGUgdHlwZSB0byBSIGJhc2VkIG9uIGl0cyBjb2xvcmluZ1xudmFyIGNvbG9ycyA9IGQzLnNjYWxlLmNhdGVnb3J5MjAoKTtcbnZhciBjc0NvbG9yID0gJyM0MTk2NDEnO1xudmFyIGR2Q29sb3IgPSAnIzI4YTRjOSc7XG52YXIgZ3JheUNvbG9yID0gJyNjMGMwYzAnO1xudmFyIG5vbUNvbG9yID0gJyNmZjY2MDAnO1xudmFyIHNlbFZhckNvbG9yID0gJyNmYTgwNzInOyAvL2QzLnJnYihcInNhbG1vblwiKTtcbnZhciB0YWdnZWRDb2xvciA9ICcjZjVmNWY1JzsgLy9kMy5yZ2IoXCJ3aGl0ZXNtb2tlXCIpO1xudmFyIHRpbWVDb2xvciA9ICcjMmQ2Y2EyJztcbnZhciB2YXJDb2xvciA9ICcjZjBmOGZmJzsgLy9kMy5yZ2IoXCJhbGljZWJsdWVcIik7XG5cbmV4cG9ydCBsZXQgbGVmdHRhYiA9ICd0YWIxJzsgLy8gY3VycmVudCB0YWIgaW4gbGVmdCBwYW5lbFxuZXhwb3J0IGxldCBzdWJzZXQgPSBmYWxzZTtcbmV4cG9ydCBsZXQgc3VtbWFyeUhvbGQgPSBmYWxzZTtcbmV4cG9ydCBsZXQgcmlnaHR0YWIgPSAnYnRuTW9kZWxzJzsgLy8gY3VycmVudCB0YWIgaW4gcmlnaHQgcGFuZWxcblxuLy8gdHJhbnNmb3JtYXRpb24gdG9vbGJhciBvcHRpb25zXG5sZXQgdCwgdHlwZVRyYW5zZm9ybTtcbmxldCB0cmFuc2Zvcm1MaXN0ID0gJ2xvZyhkKSBleHAoZCkgZF4yIHNxcnQoZCkgaW50ZXJhY3QoZCxlKScuc3BsaXQoJyAnKTtcbmxldCB0cmFuc2Zvcm1WYXIgPSAnJztcblxuLy8gUmFkaXVzIG9mIGNpcmNsZVxudmFyIGFsbFIgPSA0MDtcblxuLy8gc3BhY2UgaW5kZXhcbnZhciBteXNwYWNlID0gMDtcblxudmFyIGZvcmNldG9nZ2xlID0gW1widHJ1ZVwiXTtcbnZhciBwcml2ID0gdHJ1ZTtcblxuZXhwb3J0IGxldCBsb2dBcnJheSA9IFtdO1xuZXhwb3J0IGxldCB6cGFyYW1zID0ge1xuICAgIHpkYXRhOiBbXSxcbiAgICB6ZWRnZXM6IFtdLFxuICAgIHp0aW1lOiBbXSxcbiAgICB6bm9tOiBbXSxcbiAgICB6Y3Jvc3M6IFtdLFxuICAgIHptb2RlbDogXCJcIixcbiAgICB6dmFyczogW10sXG4gICAgemR2OiBbXSxcbiAgICB6ZGF0YXVybDogXCJcIixcbiAgICB6c3Vic2V0OiBbXSxcbiAgICB6c2V0eDogW10sXG4gICAgem1vZGVsY291bnQ6IDAsXG4gICAgenBsb3Q6IFtdLFxuICAgIHpzZXNzaW9uaWQ6IFwiXCIsXG4gICAgemRhdGFjaXRlOiBcIlwiXG59O1xuXG52YXIgbW9kZWxDb3VudCA9IDA7XG52YXIgdmFsdWVLZXkgPSBbXTtcbnZhciBhbGxOb2RlcyA9IFtdO1xudmFyIGFsbFJlc3VsdHMgPSBbXTtcbnZhciBub2RlcyA9IFtdO1xudmFyIGxpbmtzID0gW107XG52YXIgbW9kcyA9IHt9O1xudmFyIGVzdGltYXRlZCA9IGZhbHNlO1xudmFyIHJpZ2h0Q2xpY2tMYXN0ID0gZmFsc2U7XG52YXIgc2VsSW50ZXJhY3QgPSBmYWxzZTtcbnZhciBjYWxsSGlzdG9yeSA9IFtdOyAvLyB0cmFuc2Zvcm0gYW5kIHN1YnNldCBjYWxsc1xuXG52YXIgc3ZnLCB3aWR0aCwgaGVpZ2h0LCBkaXYsIGVzdGltYXRlTGFkZGEsIHNlbGVjdExhZGRhO1xudmFyIGFyYzMsIGFyYzQ7XG5cbmxldCBieUlkID0gaWQgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG52YXIgZGF0YXVybDtcbmV4cG9ydCBmdW5jdGlvbiBtYWluKGZpbGVpZCwgaG9zdG5hbWUsIGRkaXVybCwgZGF0YXVybCkge1xuICAgIGRhdGF1cmwgPSBkYXRhdXJsO1xuICAgIGlmIChwcm9kdWN0aW9uICYmIGZpbGVpZCA9PSBcIlwiKSB7XG4gICAgICAgIGFsZXJ0KFwiRXJyb3I6IE5vIGZpbGVpZCBoYXMgYmVlbiBwcm92aWRlZC5cIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yOiBObyBmaWxlaWQgaGFzIGJlZW4gcHJvdmlkZWQuXCIpO1xuICAgIH1cblxuICAgIGxldCBkYXRhdmVyc2V1cmwgPSAnJztcbiAgICBpZiAoaG9zdG5hbWUpIGRhdGF2ZXJzZXVybCA9IFwiaHR0cHM6Ly9cIiArIGhvc3RuYW1lO1xuICAgIGVsc2UgaWYgKHByb2R1Y3Rpb24pIGRhdGF2ZXJzZXVybCA9IFwiJVBST0RVQ1RJT05fREFUQVZFUlNFX1VSTCVcIjtcbiAgICBlbHNlIGRhdGF2ZXJzZXVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwXCI7XG5cbiAgICBpZiAoZmlsZWlkICYmICFkYXRhdXJsKSB7XG4gICAgICAgIC8vIGZpbGUgaWQgc3VwcGxpZWQ7IGFzc3VtZSB3ZSBhcmUgZGVhbGluZyB3aXRoIGRhdGF2ZXJzZSBhbmQgY29vayBhIHN0YW5kYXJkIGRhdGF2ZXJzZSBkYXRhIGFjY2VzcyB1cmxcbiAgICAgICAgLy8gd2l0aCB0aGUgZmlsZWlkIHN1cHBsaWVkIGFuZCB0aGUgaG9zdG5hbWUgd2UgaGF2ZSBzdXBwbGllZCBvciBjb25maWd1cmVkXG4gICAgICAgIGRhdGF1cmwgPSBkYXRhdmVyc2V1cmwgKyBcIi9hcGkvYWNjZXNzL2RhdGFmaWxlL1wiICsgZmlsZWlkO1xuICAgICAgICBkYXRhdXJsID0gZGF0YXVybCArIFwiP2tleT1cIiArIGFwaWtleTtcbiAgICB9XG5cbiAgICBzdmcgPSBkMy5zZWxlY3QoXCIjd2hpdGVzcGFjZVwiKTtcblxuICAgIHZhciB0ZW1wV2lkdGggPSBkMy5zZWxlY3QoXCIjbWFpbi5sZWZ0XCIpLnN0eWxlKFwid2lkdGhcIik7XG4gICAgd2lkdGggPSB0ZW1wV2lkdGguc3Vic3RyaW5nKDAsIHRlbXBXaWR0aC5sZW5ndGggLSAyKTtcbiAgICBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSAxMjA7IC8vIEhhcmQgY29kaW5nIGZvciBoZWFkZXIgYW5kIGZvb3RlciBhbmQgYm90dG9tIG1hcmdpbi5cblxuICAgIGVzdGltYXRlTGFkZGEgPSBMYWRkYS5jcmVhdGUoYnlJZChcImJ0bkVzdGltYXRlXCIpKTtcbiAgICBzZWxlY3RMYWRkYSA9IExhZGRhLmNyZWF0ZShieUlkKFwiYnRuU2VsZWN0XCIpKTtcblxuICAgIHZhciBjb2xvclRpbWUgPSBmYWxzZTtcbiAgICB2YXIgY29sb3JDUyA9IGZhbHNlO1xuXG4gICAgdmFyIGRlcFZhciA9IGZhbHNlO1xuICAgIHZhciBzdWJzZXRkaXYgPSBmYWxzZTtcbiAgICB2YXIgc2V0eGRpdiA9IGZhbHNlO1xuXG4gICAgLy9XaWR0aCBhbmQgaGVpZ2h0IGZvciBoaXN0Z3JhbXNcbiAgICB2YXIgYmFyd2lkdGggPSAxLjMgKiBhbGxSO1xuICAgIHZhciBiYXJoZWlnaHQgPSAwLjUgKiBhbGxSO1xuICAgIHZhciBiYXJQYWRkaW5nID0gMC4zNTtcbiAgICB2YXIgYmFybnVtYmVyID0gNztcblxuICAgIGxldCBhcmMgPSAoc3RhcnQsIGVuZCkgPT4gZDMuc3ZnLmFyYygpXG4gICAgICAgIC5pbm5lclJhZGl1cyhhbGxSICsgNSlcbiAgICAgICAgLm91dGVyUmFkaXVzKGFsbFIgKyAyMClcbiAgICAgICAgLnN0YXJ0QW5nbGUoc3RhcnQpXG4gICAgICAgIC5lbmRBbmdsZShlbmQpO1xuICAgIGxldCBbYXJjMCwgYXJjMSwgYXJjMl0gPSBbYXJjKDAsIDMuMiksIGFyYygwLCAxKSwgYXJjKDEuMSwgMi4yKV07XG4gICAgYXJjMyA9IGFyYygyLjMsIDMuMyk7XG4gICAgYXJjNCA9IGFyYyg0LjMsIDUuMyk7XG5cbiAgICAvLyBGcm9tIC5jc3ZcbiAgICB2YXIgZGF0YXNldDIgPSBbXTtcbiAgICB2YXIgbGFibEFycmF5ID0gW107XG4gICAgdmFyIGhvbGQgPSBbXTtcbiAgICB2YXIgc3Vic2V0Tm9kZXMgPSBbXTtcblxuICAgIHZhciBzcGFjZXMgPSBbXTtcbiAgICB2YXIgdHJhbnMgPSBbXTsgLy8gdmFyIGxpc3QgZm9yIGVhY2ggc3BhY2UgY29udGFpbiB2YXJpYWJsZXMgaW4gb3JpZ2luYWwgZGF0YSBwbHVzIHRyYW5zIGluIHRoYXQgc3BhY2VcblxuICAgIC8vIGNvbGxhcHNhYmxlIHVzZXIgbG9nXG4gICAgJCgnI2NvbGxhcHNlTG9nJykub24oJ3Nob3duLmJzLmNvbGxhcHNlJywgKCkgPT4ge1xuICAgICAgICBkMy5zZWxlY3QoXCIjY29sbGFwc2VMb2cgZGl2LnBhbmVsLWJvZHlcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAgICAgLmRhdGEobG9nQXJyYXkpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgICAgIC50ZXh0KGQgPT4gZCk7XG4gICAgfSk7XG4gICAgJCgnI2NvbGxhcHNlTG9nJykub24oJ2hpZGRlbi5icy5jb2xsYXBzZScsICgpID0+IHtcbiAgICAgICAgZDMuc2VsZWN0KFwiI2NvbGxhcHNlTG9nIGRpdi5wYW5lbC1ib2R5XCIpLnNlbGVjdEFsbChcInBcIilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICB9KTtcblxuICAgIC8vIGRlZmF1bHQgdG8gQ2FsaWZvcm5pYSBQVU1TIHN1YnNldFxuICAgIGxldCBkYXRhID0gJ2RhdGEvJyArIChmYWxzZSA/ICdQVU1TNXNtYWxsJyA6ICdmZWFyb25MYWl0aW4nKTtcbiAgICBsZXQgbWV0YWRhdGF1cmwgPSBkZGl1cmwgfHwgKGZpbGVpZCA/IGAke2RhdGF2ZXJzZXVybH0vYXBpL21ldGEvZGF0YWZpbGUvJHtmaWxlaWR9YCA6IGRhdGEgKyAnLnhtbCcpO1xuICAgIC8vIHJlYWQgcHJlLXByb2Nlc3NlZCBtZXRhZGF0YSBhbmQgZGF0YVxuICAgIGxldCBwVVJMID0gZGF0YXVybCA/IGAke2RhdGF1cmx9JmZvcm1hdD1wcmVwYCA6IGRhdGEgKyAnLmpzb24nO1xuICAgIHZhciBwcmVwcm9jZXNzID0ge307XG4gICAgXG4gICAgLy8gbG9hZHMgYWxsIGV4dGVybmFsIGRhdGE6IG1ldGFkYXRhIChEVk4ncyBkZGkpLCBwcmVwcm9jZXNzZWQgKGZvciBwbG90dGluZyBkaXN0cmlidXRpb25zKSwgYW5kIHplbGlnbW9kZWxzIChwcm9kdWNlZCBieSBaZWxpZykgYW5kIGluaXRpYXRlcyB0aGUgZGF0YSBkb3dubG9hZCB0byB0aGUgc2VydmVyXG4gICAgdmFyIHVybCwgcCwgdiwgY2FsbGJhY2s7XG4gICAgcmVhZFByZXByb2Nlc3ModXJsID0gcFVSTCwgcCA9IHByZXByb2Nlc3MsIHYgPSBudWxsLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBkMy54bWwobWV0YWRhdGF1cmwsIFwiYXBwbGljYXRpb24veG1sXCIsIHhtbCA9PiB7XG4gICAgICAgICAgICB2YXIgdmFycyA9IHhtbC5kb2N1bWVudEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ2YXJcIik7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IHhtbC5kb2N1bWVudEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJmaWxlTmFtZVwiKTtcbiAgICAgICAgICAgIHpwYXJhbXMuemRhdGEgPSB0ZW1wWzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgY2l0ZSA9IHhtbC5kb2N1bWVudEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJiaWJsQ2l0XCIpO1xuICAgICAgICAgICAgenBhcmFtcy56ZGF0YWNpdGUgPSBjaXRlWzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgLy8gY2xlYW4gY2l0YXRpb24gc28gUE9TVCBpcyB2YWxpZCBqc29uXG4gICAgICAgICAgICB6cGFyYW1zLnpkYXRhY2l0ZSA9IHpwYXJhbXMuemRhdGFjaXRlLnJlcGxhY2UoL1xcJi9nLCBcImFuZFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXDsvZywgXCIsXCIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJS9nLCBcIi1cIik7XG5cbiAgICAgICAgICAgIC8vIGRhdGFzZXQgbmFtZSB0cmltbWVkIHRvIDEyIGNoYXJzXG4gICAgICAgICAgICB2YXIgZGF0YW5hbWUgPSB6cGFyYW1zLnpkYXRhLnJlcGxhY2UoL1xcLiguKikvLCAnJyk7IC8vIGRyb3AgZmlsZSBleHRlbnNpb25cbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiNkYXRhTmFtZVwiKVxuICAgICAgICAgICAgICAgIC5odG1sKGRhdGFuYW1lKTtcbiAgICAgICAgICAgICQoJyNjaXRlIGRpdi5wYW5lbC1ib2R5JykudGV4dCh6cGFyYW1zLnpkYXRhY2l0ZSk7XG5cbiAgICAgICAgICAgIC8vIFB1dCBkYXRhc2V0IG5hbWUsIGZyb20gbWV0YS1kYXRhLCBpbnRvIHBhZ2UgdGl0bGVcbiAgICAgICAgICAgIGQzLnNlbGVjdChcInRpdGxlXCIpLmh0bWwoXCJUd29SYXZlbnMgXCIgKyBkYXRhbmFtZSk7XG4gICAgICAgICAgICAvLyB0ZW1wb3JhcnkgdmFsdWVzIGZvciBob2xkIHRoYXQgY29ycmVzcG9uZCB0byBoaXN0b2dyYW0gYmluc1xuICAgICAgICAgICAgaG9sZCA9IFsuNiwgLjIsIC45LCAuOCwgLjEsIC4zLCAuNF07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZUtleVtpXSA9IHZhcnNbaV0uYXR0cmlidXRlcy5uYW1lLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICBsYWJsQXJyYXlbaV0gPSB2YXJzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGFibFwiKS5sZW5ndGggPT0gMCA/XG4gICAgICAgICAgICAgICAgICAgIFwibm8gbGFiZWxcIiA6XG4gICAgICAgICAgICAgICAgICAgIHZhcnNbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsYWJsXCIpWzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhc2V0Y291bnQgPSBkMy5sYXlvdXQuaGlzdG9ncmFtKClcbiAgICAgICAgICAgICAgICAgICAgLmJpbnMoYmFybnVtYmVyKS5mcmVxdWVuY3koZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIChbMCwgMCwgMCwgMCwgMF0pO1xuICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5zIGFsbCB0aGUgcHJlcHJvY2Vzc2VkIGRhdGEgd2UgaGF2ZSBmb3IgdGhlIHZhcmlhYmxlLCBhcyB3ZWxsIGFzIFVJIGRhdGEgcGVydGluZW50IHRvIHRoYXQgdmFyaWFibGUsIHN1Y2ggYXMgc2V0eCB2YWx1ZXMgKGlmIHRoZSB1c2VyIGhhcyBzZWxlY3RlZCB0aGVtKSBhbmQgcGViYmxlIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGksXG4gICAgICAgICAgICAgICAgICAgIHJlZmxleGl2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlS2V5W2ldLFxuICAgICAgICAgICAgICAgICAgICBsYWJsOiBsYWJsQXJyYXlbaV0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFs1LCAxNSwgMjAsIDAsIDUsIDE1LCAyMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBob2xkLFxuICAgICAgICAgICAgICAgICAgICBub2RlQ29sOiBjb2xvcnMoaSksXG4gICAgICAgICAgICAgICAgICAgIGJhc2VDb2w6IGNvbG9ycyhpKSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IHNlbFZhckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogXCIxXCIsXG4gICAgICAgICAgICAgICAgICAgIHN1YnNldHBsb3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzdWJzZXRyYW5nZTogW1wiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgICAgICBzZXR4cGxvdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNldHh2YWxzOiBbXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgIGdyYXlvdXQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHRydWUsIG9iaiwgcHJlcHJvY2Vzc1t2YWx1ZUtleVtpXV0pO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzLnB1c2gob2JqKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIHJlYWQgdGhlIHplbGlnIG1vZGVscyBhbmQgcG9wdWxhdGUgbW9kZWwgbGlzdCBpbiByaWdodCBwYW5lbFxuICAgICAgICAgICAgZDMuanNvbihcImRhdGEvemVsaWc1bW9kZWxzLmpzb25cIiwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInplbGlnIG1vZGVscyBqc29uOiBcIiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGRhdGEuemVsaWc1bW9kZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnplbGlnNW1vZGVscy5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kc1tkYXRhLnplbGlnNW1vZGVsc1trZXldLm5hbWVbMF1dID0gZGF0YS56ZWxpZzVtb2RlbHNba2V5XS5kZXNjcmlwdGlvblswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZDMuanNvbihcImRhdGEvemVsaWc1Y2hvaWNlbW9kZWxzLmpzb25cIiwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInplbGlnIGNob2ljZSBtb2RlbHMganNvbjogXCIsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gZGF0YS56ZWxpZzVjaG9pY2Vtb2RlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnplbGlnNWNob2ljZW1vZGVscy5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHNbZGF0YS56ZWxpZzVjaG9pY2Vtb2RlbHNba2V5XS5uYW1lWzBdXSA9IGRhdGEuemVsaWc1Y2hvaWNlbW9kZWxzW2tleV0uZGVzY3JpcHRpb25bMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2NhZmZvbGRpbmcoY2FsbGJhY2sgPSBsYXlvdXQpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhRG93bmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxubGV0ICRmaWxsID0gKG9iaiwgb3AsIGQxLCBkMikgPT4gZDMuc2VsZWN0KG9iaikudHJhbnNpdGlvbigpXG4gICAgLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIG9wKVxuICAgIC5kZWxheShkMSlcbiAgICAuZHVyYXRpb24oZDIpO1xubGV0IGZpbGwgPSAoZCwgaWQsIG9wLCBkMSwgZDIpID0+ICRmaWxsKCcjJyArIGlkICsgZC5pZCwgb3AsIGQxLCBkMik7XG5sZXQgZmlsbFRoaXMgPSAoc2VsZiwgb3AsIGQxLCBkMikgPT4gJGZpbGwoc2VsZiwgb3AsIGQxLCBkMik7XG5cbi8vIHNjYWZmb2xkaW5nIGlzIGNhbGxlZCBhZnRlciBhbGwgZXh0ZXJuYWwgZGF0YSBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIGJlZW4gcmVhZCB0byBjb21wbGV0aW9uLiB0aGlzIHBvcHVsYXRlcyB0aGUgbGVmdCBwYW5lbCB3aXRoIHZhcmlhYmxlIG5hbWVzLCB0aGUgcmlnaHQgcGFuZWwgd2l0aCBtb2RlbCBuYW1lcywgdGhlIHRyYW5zZm9ybWF0aW9uIHRvb2wsIGFuIHRoZSBhc3NvY2lhdGVkIG1vdXNlb3ZlcnMuIGl0cyBjYWxsYmFjayBpcyBsYXlvdXQoKSwgd2hpY2ggaW5pdGlhbGl6ZXMgdGhlIG1vZGVsaW5nIHNwYWNlXG5mdW5jdGlvbiBzY2FmZm9sZGluZyhjYWxsYmFjaykge1xuICAgIC8vIGVzdGFibGlzaGluZyB0aGUgdHJhbnNmb3JtYXRpb24gZWxlbWVudFxuICAgIGQzLnNlbGVjdChcIiN0cmFuc2Zvcm1hdGlvbnNcIilcbiAgICAgICAgLmFwcGVuZChcImlucHV0XCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ0SW5wdXRcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImZvcm0tY29udHJvbFwiKVxuICAgICAgICAuYXR0cihcInR5cGVcIiwgXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwidmFsdWVcIiwgXCJWYXJpYWJsZSB0cmFuc2Zvcm1hdGlvblwiKTtcblxuICAgIC8vIHZhcmlhYmxlIGRyb3Bkb3duXG4gICAgZDMuc2VsZWN0KFwiI3RyYW5zZm9ybWF0aW9uc1wiKVxuICAgICAgICAuYXBwZW5kKFwidWxcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRyYW5zU2VsXCIpXG4gICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgdmFyQ29sb3IpXG4gICAgICAgIC5zZWxlY3RBbGwoJ2xpJylcbiAgICAgICAgLmRhdGEoW1wiYVwiLCBcImJcIl0pIC8vc2V0IHRvIHZhcmlhYmxlcyBpbiBtb2RlbCBzcGFjZSBhcyB0aGV5J3JlIGFkZGVkXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJsaVwiKVxuICAgICAgICAudGV4dChkID0+IGQpO1xuXG4gICAgLy8gZnVuY3Rpb24gZHJvcGRvd25cbiAgICBkMy5zZWxlY3QoXCIjdHJhbnNmb3JtYXRpb25zXCIpXG4gICAgICAgIC5hcHBlbmQoXCJ1bFwiKVxuICAgICAgICAuYXR0cihcImlkXCIsIFwidHJhbnNMaXN0XCIpXG4gICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgdmFyQ29sb3IpXG4gICAgICAgIC5zZWxlY3RBbGwoJ2xpJylcbiAgICAgICAgLmRhdGEodHJhbnNmb3JtTGlzdClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcImxpXCIpXG4gICAgICAgIC50ZXh0KGQgPT4gZCk7XG5cbiAgICAkKCcjdElucHV0JykuY2xpY2soKCkgPT4ge1xuICAgICAgICB2YXIgdCA9IGJ5SWQoJ3RyYW5zU2VsJykuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgaWYgKHQgIT09IFwibm9uZVwiKSB7IC8vIGlmIHZhcmlhYmxlIGxpc3QgaXMgZGlzcGxheWVkIHdoZW4gaW5wdXQgaXMgY2xpY2tlZC4uLlxuICAgICAgICAgICAgJCgnI3RyYW5zU2VsJykuZmFkZU91dCgxMDApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0MSA9IGJ5SWQoJ3RyYW5zTGlzdCcpLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIGlmICh0MSAhPT0gXCJub25lXCIpIHsgLy8gaWYgZnVuY3Rpb24gbGlzdCBpcyBkaXNwbGF5ZWQgd2hlbiBpbnB1dCBpcyBjbGlja2VkLi4uXG4gICAgICAgICAgICAkKCcjdHJhbnNMaXN0JykuZmFkZU91dCgxMDApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSB0ZXh0XG4gICAgICAgICQodGhpcykuc2VsZWN0KCk7XG4gICAgICAgIHZhciBwb3MgPSAkKCcjdElucHV0Jykub2Zmc2V0KCk7XG4gICAgICAgIHBvcy50b3AgKz0gJCgnI3RJbnB1dCcpLndpZHRoKCk7XG4gICAgICAgICQoJyN0cmFuc1NlbCcpLmZhZGVJbigxMDApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICB2YXIgbjtcbiAgICAkKCcjdElucHV0Jykua2V5dXAoZXZ0ID0+IHtcbiAgICAgICAgdmFyIHQgPSBieUlkKCd0cmFuc1NlbCcpLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIHZhciB0MSA9IGJ5SWQoJ3RyYW5zTGlzdCcpLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIGlmICh0ICE9IFwibm9uZVwiKSAkKCcjdHJhbnNTZWwnKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgIGVsc2UgaWYgKHQxICE9IFwibm9uZVwiKSAkKCcjdHJhbnNMaXN0JykuZmFkZU91dCgxMDApO1xuXG4gICAgICAgIGlmIChldnQua2V5Q29kZSA9PSAxMykgeyAvLyBrZXl1cCBvbiBFbnRlclxuICAgICAgICAgICAgbiA9ICQoJyN0SW5wdXQnKS52YWwoKTtcbiAgICAgICAgICAgIHZhciB0ID0gdHJhbnNQYXJzZShuPW4pO1xuICAgICAgICAgICAgaWYgKCF0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRyYW5zZm9ybShuID0gdC5zbGljZSgwLCB0Lmxlbmd0aCAtIDEpLCB0ID0gdFt0Lmxlbmd0aCAtIDFdLCB0eXBlVHJhbnNmb3JtID0gZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdDtcbiAgICAkKCcjdHJhbnNMaXN0IGxpJykuY2xpY2soZXZ0ID0+IHtcbiAgICAgICAgLy8gaWYgaW50ZXJhY3QgaXMgc2VsZWN0ZWQsIHNob3cgdmFyaWFibGUgbGlzdCBhZ2FpblxuICAgICAgICBpZiAoJCh0aGlzKS50ZXh0KCkgPT0gXCJpbnRlcmFjdChkLGUpXCIpIHtcbiAgICAgICAgICAgICQoJyN0SW5wdXQnKS52YWwodHZhci5jb25jYXQoJyonKSk7XG4gICAgICAgICAgICBzZWxJbnRlcmFjdCA9IHRydWU7XG4gICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZhbmRlT3V0KDEwMCk7XG4gICAgICAgICAgICAkKCcjdHJhbnNTZWwnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0dmFyID0gJCgnI3RJbnB1dCcpLnZhbCgpO1xuICAgICAgICB2YXIgdGZ1bmMgPSAkKHRoaXMpLnRleHQoKS5yZXBsYWNlKFwiZFwiLCBcIl90cmFuc3ZhcjBcIik7XG4gICAgICAgIHZhciB0Y2FsbCA9ICQodGhpcykudGV4dCgpLnJlcGxhY2UoXCJkXCIsIHR2YXIpO1xuICAgICAgICAkKCcjdElucHV0JykudmFsKHRjYWxsKTtcbiAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdHJhbnNmb3JtKG4gPSB0dmFyLCB0ID0gdGZ1bmMsIHR5cGVUcmFuc2Zvcm0gPSBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICAvLyBwb3B1bGF0aW5nIHRoZSB2YXJpYWJsZSBsaXN0IGluIHRoZSBsZWZ0IHBhbmVsXG4gICAgZDMuc2VsZWN0KFwiI3RhYjFcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAuZGF0YSh2YWx1ZUtleSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLy8gcmVwbGFjZSBub24tYWxwaGFudW1lcmljcyBmb3Igc2VsZWN0aW9uIHB1cnBvc2VzXG4gICAgICAgIC8vIHBlcmhhcHMgZW5zdXJlIHRoaXMgaWQgaXMgdW5pcXVlIGJ5IGFkZGluZyAnXycgdG8gdGhlIGZyb250P1xuICAgICAgICAuYXR0cihcImlkXCIsIGQgPT4gZC5yZXBsYWNlKC9cXFcvZywgXCJfXCIpKVxuICAgICAgICAudGV4dChkID0+IGQpXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGQgPT4gZmluZE5vZGVJbmRleChkKSA+IDIgPyB2YXJDb2xvciA6IGhleFRvUmdiYShzZWxWYXJDb2xvcikpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1jb250YWluZXJcIiwgXCJib2R5XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJwb3BvdmVyXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10cmlnZ2VyXCIsIFwiaG92ZXJcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLXBsYWNlbWVudFwiLCBcInJpZ2h0XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1odG1sXCIsIFwidHJ1ZVwiKVxuICAgICAgICAuYXR0cihcIm9ubW91c2VvdmVyXCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJvbm1vdXNlb3V0XCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsIFwiU3VtbWFyeSBTdGF0aXN0aWNzXCIpO1xuXG4gICAgZDMuc2VsZWN0KFwiI21vZGVsc1wiKVxuICAgICAgICAuc3R5bGUoJ2hlaWdodCcsIDIwMDApXG4gICAgICAgIC5zdHlsZSgnb3ZlcmZpbGwnLCAnc2Nyb2xsJyk7XG5cbiAgICBkMy5zZWxlY3QoXCIjbW9kZWxzXCIpLnNlbGVjdEFsbChcInBcIilcbiAgICAgICAgLmRhdGEoT2JqZWN0LmtleXMobW9kcykpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJfbW9kZWxfXCIuY29uY2F0KVxuICAgICAgICAudGV4dChkID0+IGQpXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGQgPT4gdmFyQ29sb3IpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1jb250YWluZXJcIiwgXCJib2R5XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJwb3BvdmVyXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10cmlnZ2VyXCIsIFwiaG92ZXJcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLXBsYWNlbWVudFwiLCBcInRvcFwiKVxuICAgICAgICAuYXR0cihcImRhdGEtaHRtbFwiLCBcInRydWVcIilcbiAgICAgICAgLmF0dHIoXCJvbm1vdXNlb3ZlclwiLCBcIiQodGhpcykucG9wb3ZlcigndG9nZ2xlJyk7XCIpXG4gICAgICAgIC5hdHRyKFwib25tb3VzZW91dFwiLCBcIiQodGhpcykucG9wb3ZlcigndG9nZ2xlJyk7XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiLCBcIk1vZGVsIERlc2NyaXB0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1jb250ZW50XCIsIGQgPT4gbW9kc1tkXSk7XG5cbiAgICAvLyBjYWxsIGxheW91dCgpIGJlY2F1c2UgYXQgdGhpcyBwb2ludCBhbGwgc2NhZmZvbGRpbmcgaXMgdXAgYW5kIHJlYWR5XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrKCk7XG59XG5cbmxldCBzcGxpY2UgPSAoY29sb3IsIHRleHQsIC4uLmFyZ3MpID0+IHtcbiAgICBhcmdzLmZvckVhY2goeCA9PiB7XG4gICAgICAgIGlmIChjb2xvciAhPSB4WzBdKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgaWR4ID0genBhcmFtc1t4WzFdXS5pbmRleE9mKHRleHQpO1xuICAgICAgICBpZHggPiAtMSAmJiB6cGFyYW1zW3hbMV1dLnNwbGljZShpZHgsIDEpO1xuICAgIH0pO1xufTtcblxuZnVuY3Rpb24gbGF5b3V0KHYpIHtcbiAgICB2YXIgbXlWYWx1ZXMgPSBbXTtcbiAgICBub2RlcyA9IFtdO1xuICAgIGxpbmtzID0gW107XG5cbiAgICBpZiAodiA9PSBcImFkZFwiIHx8IHYgPT0gXCJtb3ZlXCIpIHtcbiAgICAgICAgZDMuc2VsZWN0KFwiI3RhYjFcIikuc2VsZWN0QWxsKFwicFwiKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIHZhckNvbG9yKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB6cGFyYW1zLnp2YXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgaWkgPSBmaW5kTm9kZUluZGV4KHpwYXJhbXMuenZhcnNbal0pO1xuICAgICAgICAgICAgaWYgKGFsbE5vZGVzW2lpXS5ncmF5b3V0KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbm9kZXMucHVzaChhbGxOb2Rlc1tpaV0pO1xuICAgICAgICAgICAgdmFyIHNlbGVjdE1lID0genBhcmFtcy56dmFyc1tqXS5yZXBsYWNlKC9cXFcvZywgXCJfXCIpO1xuICAgICAgICAgICAgc2VsZWN0TWUgPSBcIiNcIi5jb25jYXQoc2VsZWN0TWUpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KHNlbGVjdE1lKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsICgpID0+IGhleFRvUmdiYShub2Rlc1tqXS5zdHJva2VDb2xvcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB6cGFyYW1zLnplZGdlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdmFyIG15c3JjID0gbm9kZUluZGV4KHpwYXJhbXMuemVkZ2VzW2pdWzBdKTtcbiAgICAgICAgICAgIHZhciBteXRndCA9IG5vZGVJbmRleCh6cGFyYW1zLnplZGdlc1tqXVsxXSk7XG4gICAgICAgICAgICBsaW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IG5vZGVzW215c3JjXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzW215dGd0XSxcbiAgICAgICAgICAgICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICByaWdodDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYWxsTm9kZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgbm9kZXMgPSBbYWxsTm9kZXNbMF0sIGFsbE5vZGVzWzFdLCBhbGxOb2Rlc1syXV07XG4gICAgICAgICAgICBsaW5rcyA9IFt7XG4gICAgICAgICAgICAgICAgc291cmNlOiBub2Rlc1sxXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzWzBdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cnVlXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBub2Rlc1swXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzWzJdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cnVlXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGxOb2Rlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIG5vZGVzID0gW2FsbE5vZGVzWzBdLCBhbGxOb2Rlc1sxXV07XG4gICAgICAgICAgICBsaW5rcyA9IFt7XG4gICAgICAgICAgICAgICAgc291cmNlOiBub2Rlc1sxXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzWzBdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cnVlXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGxOb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIG5vZGVzID0gW2FsbE5vZGVzWzBdXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiVGhlcmUgYXJlIHplcm8gdmFyaWFibGVzIGluIHRoZSBtZXRhZGF0YS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYW5lbFBsb3RzKCk7IC8vIGFmdGVyIG5vZGVzIGlzIHBvcHVsYXRlZCwgYWRkIHN1YnNldCBhbmQgc2V0eCBwYW5lbHNcbiAgICBwb3B1bGF0ZVBvcG92ZXIoKTsgLy8gcGlwZXMgaW4gdGhlIHN1bW1hcnkgc3RhdHMgc2hvd24gb24gbW91c2VvdmVyc1xuXG4gICAgdmFyIGZvcmNlID0gZDMubGF5b3V0LmZvcmNlKClcbiAgICAgICAgLm5vZGVzKG5vZGVzKVxuICAgICAgICAubGlua3MobGlua3MpXG4gICAgICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcbiAgICAgICAgLmxpbmtEaXN0YW5jZSgxNTApXG4gICAgICAgIC5jaGFyZ2UoLTgwMClcbiAgICAgICAgLm9uKCd0aWNrJywgdGljayk7XG5cbiAgICAvLyBkZWZpbmUgYXJyb3cgbWFya2VycyBmb3IgZ3JhcGggbGlua3NcbiAgICBzdmcuYXBwZW5kKCdzdmc6ZGVmcycpLmFwcGVuZCgnc3ZnOm1hcmtlcicpXG4gICAgICAgIC5hdHRyKCdpZCcsICdlbmQtYXJyb3cnKVxuICAgICAgICAuYXR0cigndmlld0JveCcsICcwIC01IDEwIDEwJylcbiAgICAgICAgLmF0dHIoJ3JlZlgnLCA2KVxuICAgICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAzKVxuICAgICAgICAuYXR0cignbWFya2VySGVpZ2h0JywgMylcbiAgICAgICAgLmF0dHIoJ29yaWVudCcsICdhdXRvJylcbiAgICAgICAgLmFwcGVuZCgnc3ZnOnBhdGgnKVxuICAgICAgICAuYXR0cignZCcsICdNMCwtNUwxMCwwTDAsNScpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsICcjMDAwJyk7XG5cbiAgICBzdmcuYXBwZW5kKCdzdmc6ZGVmcycpLmFwcGVuZCgnc3ZnOm1hcmtlcicpXG4gICAgICAgIC5hdHRyKCdpZCcsICdzdGFydC1hcnJvdycpXG4gICAgICAgIC5hdHRyKCd2aWV3Qm94JywgJzAgLTUgMTAgMTAnKVxuICAgICAgICAuYXR0cigncmVmWCcsIDQpXG4gICAgICAgIC5hdHRyKCdtYXJrZXJXaWR0aCcsIDMpXG4gICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAzKVxuICAgICAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKVxuICAgICAgICAuYXBwZW5kKCdzdmc6cGF0aCcpXG4gICAgICAgIC5hdHRyKCdkJywgJ00xMCwtNUwwLDBMMTAsNScpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsICcjMDAwJyk7XG5cbiAgICAvLyBsaW5lIGRpc3BsYXllZCB3aGVuIGRyYWdnaW5nIG5ldyBub2Rlc1xuICAgIHZhciBkcmFnX2xpbmUgPSBzdmcuYXBwZW5kKCdzdmc6cGF0aCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5rIGRyYWdsaW5lIGhpZGRlbicpXG4gICAgICAgIC5hdHRyKCdkJywgJ00wLDBMMCwwJyk7XG5cbiAgICAvLyBoYW5kbGVzIHRvIGxpbmsgYW5kIG5vZGUgZWxlbWVudCBncm91cHNcbiAgICB2YXIgcGF0aCA9IHN2Zy5hcHBlbmQoJ3N2ZzpnJykuc2VsZWN0QWxsKCdwYXRoJyksXG4gICAgICAgIGNpcmNsZSA9IHN2Zy5hcHBlbmQoJ3N2ZzpnJykuc2VsZWN0QWxsKCdnJyk7XG5cbiAgICAvLyBtb3VzZSBldmVudCB2YXJzXG4gICAgdmFyIHNlbGVjdGVkX25vZGUgPSBudWxsLFxuICAgICAgICBzZWxlY3RlZF9saW5rID0gbnVsbCxcbiAgICAgICAgbW91c2Vkb3duX2xpbmsgPSBudWxsLFxuICAgICAgICBtb3VzZWRvd25fbm9kZSA9IG51bGwsXG4gICAgICAgIG1vdXNldXBfbm9kZSA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiByZXNldE1vdXNlVmFycygpIHtcbiAgICAgICAgbW91c2Vkb3duX25vZGUgPSBudWxsO1xuICAgICAgICBtb3VzZXVwX25vZGUgPSBudWxsO1xuICAgICAgICBtb3VzZWRvd25fbGluayA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGZvcmNlIGxheW91dCAoY2FsbGVkIGF1dG9tYXRpY2FsbHkgZWFjaCBpdGVyYXRpb24pXG4gICAgZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgLy8gZHJhdyBkaXJlY3RlZCBlZGdlcyB3aXRoIHByb3BlciBwYWRkaW5nIGZyb20gbm9kZSBjZW50ZXJzXG4gICAgICAgIHBhdGguYXR0cignZCcsIGQgPT4ge1xuICAgICAgICAgICAgdmFyIGRlbHRhWCA9IGQudGFyZ2V0LnggLSBkLnNvdXJjZS54LFxuICAgICAgICAgICAgICAgIGRlbHRhWSA9IGQudGFyZ2V0LnkgLSBkLnNvdXJjZS55LFxuICAgICAgICAgICAgICAgIGRpc3QgPSBNYXRoLnNxcnQoZGVsdGFYICogZGVsdGFYICsgZGVsdGFZICogZGVsdGFZKSxcbiAgICAgICAgICAgICAgICBub3JtWCA9IGRlbHRhWCAvIGRpc3QsXG4gICAgICAgICAgICAgICAgbm9ybVkgPSBkZWx0YVkgLyBkaXN0LFxuICAgICAgICAgICAgICAgIHNvdXJjZVBhZGRpbmcgPSBkLmxlZnQgPyBhbGxSICsgNSA6IGFsbFIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0UGFkZGluZyA9IGQucmlnaHQgPyBhbGxSICsgNSA6IGFsbFIsXG4gICAgICAgICAgICAgICAgc291cmNlWCA9IGQuc291cmNlLnggKyAoc291cmNlUGFkZGluZyAqIG5vcm1YKSxcbiAgICAgICAgICAgICAgICBzb3VyY2VZID0gZC5zb3VyY2UueSArIChzb3VyY2VQYWRkaW5nICogbm9ybVkpLFxuICAgICAgICAgICAgICAgIHRhcmdldFggPSBkLnRhcmdldC54IC0gKHRhcmdldFBhZGRpbmcgKiBub3JtWCksXG4gICAgICAgICAgICAgICAgdGFyZ2V0WSA9IGQudGFyZ2V0LnkgLSAodGFyZ2V0UGFkZGluZyAqIG5vcm1ZKTtcbiAgICAgICAgICAgIHJldHVybiAnTScgKyBzb3VyY2VYICsgJywnICsgc291cmNlWSArICdMJyArIHRhcmdldFggKyAnLCcgKyB0YXJnZXRZO1xuICAgICAgICB9KTtcbiAgICAgICAgY2lyY2xlLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gJ3RyYW5zbGF0ZSgnICsgZC54ICsgJywnICsgZC55ICsgJyknKTtcbiAgICB9XG5cbiAgICAvLyBhZGQgbGlzdGVuZXJzIHRvIGxlZnRwYW5lbC5sZWZ0LiBldmVyeSB0aW1lIGEgdmFyaWFibGUgaXMgY2xpY2tlZCwgbm9kZXMgdXBkYXRlcyBhbmQgYmFja2dyb3VuZCBjb2xvciBjaGFuZ2VzLiAgbW91c2VvdmVyIHNob3dzIHN1bW1hcnkgc3RhdHMgb3IgbW9kZWwgZGVzY3JpcHRpb24uXG4gICAgZDMuc2VsZWN0KFwiI3RhYjFcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZCA9PiB7XG4gICAgICAgICAgICAkKFwiYm9keSBkaXYucG9wb3ZlclwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInZhcmlhYmxlc1wiKTtcbiAgICAgICAgICAgICQoXCJib2R5IGRpdi5wb3BvdmVyIGRpdi5wb3BvdmVyLWNvbnRlbnRcIilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJmb3JtLWhvcml6b250YWxcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIHZhckNsaWNrKCkge1xuICAgICAgICAgICAgaWYgKGFsbE5vZGVzW2ZpbmROb2RlSW5kZXgodGhpcy5pZCldLmdyYXlvdXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHpwYXJhbXMuenZhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSBkMy5zZWxlY3QodGhpcykudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZDMucmdiKGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicpKS50b1N0cmluZygpID09IHZhckNvbG9yLnRvU3RyaW5nKCkpIHsgLy8gd2UgYXJlIGFkZGluZyBhIHZhclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChmaW5kTm9kZSh0ZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDApIG5vZGVzWzBdLnJlZmxleGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGV4VG9SZ2JhKHNlbFZhckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyb3BwaW5nIGEgdmFyaWFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShmaW5kTm9kZSh0ZXh0KS5pbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpY2VMaW5rc0Zvck5vZGUoZmluZE5vZGUodGV4dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBhbGxOb2Rlc1tmaW5kTm9kZUluZGV4KHRleHQpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGljZShub2RlLnN0cm9rZUNvbG9yLCB0ZXh0LCBbZHZDb2xvciwgJ3pkdiddLCBbY3NDb2xvciwgJ3pjcm9zcyddLCBbdGltZUNvbG9yLCAnenRpbWUnXSwgW25vbUNvbG9yLCAnem5vbSddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVSZXNldChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhckNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYW5lbFBsb3RzKCk7XG4gICAgICAgICAgICByZXN0YXJ0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgZDMuc2VsZWN0KFwiI21vZGVsc1wiKS5zZWxlY3RBbGwoXCJwXCIpIC8vIG1vZGVscyB0YWJcbiAgICAgICAgLy8gIGQzLnNlbGVjdChcIiNEaXNwbGF5X2NvbnRlbnRcIilcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbXlDb2xvciA9IGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI21vZGVsc1wiKS5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgdmFyQ29sb3IpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkMy5yZ2IobXlDb2xvcikudG9TdHJpbmcoKSA9PT0gdmFyQ29sb3IudG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgenBhcmFtcy56bW9kZWwgPSBkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGV4VG9SZ2JhKHNlbFZhckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHpwYXJhbXMuem1vZGVsID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFyQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc3RhcnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgZ3JhcGggKGNhbGxlZCB3aGVuIG5lZWRlZClcbiAgICBmdW5jdGlvbiByZXN0YXJ0KCkge1xuICAgICAgICAvLyBub2Rlcy5pZCBpcyBwZWdnZWQgdG8gYWxsTm9kZXMsIGkuZS4gdGhlIG9yZGVyIGluIHdoaWNoIHZhcmlhYmxlcyBhcmUgcmVhZCBpblxuICAgICAgICAvLyBub2Rlcy5pbmRleCBpcyBmbG9hdGluZyBhbmQgZGVwZW5kcyBvbiB1cGRhdGVzIHRvIG5vZGVzLiAgYSB2YXJpYWJsZXMgaW5kZXggY2hhbmdlcyB3aGVuIG5ldyB2YXJpYWJsZXMgYXJlIGFkZGVkLlxuICAgICAgICBjaXJjbGUuY2FsbChmb3JjZS5kcmFnKTtcbiAgICAgICAgaWYgKGZvcmNldG9nZ2xlWzBdID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICBmb3JjZS5ncmF2aXR5KDAuMSk7XG4gICAgICAgICAgICBmb3JjZS5jaGFyZ2UoLTgwMCk7XG4gICAgICAgICAgICBmb3JjZS5saW5rU3RyZW5ndGgoMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JjZS5ncmF2aXR5KDApO1xuICAgICAgICAgICAgZm9yY2UuY2hhcmdlKDApO1xuICAgICAgICAgICAgZm9yY2UubGlua1N0cmVuZ3RoKDApO1xuICAgICAgICB9XG4gICAgICAgIGZvcmNlLnJlc3VtZSgpO1xuXG4gICAgICAgIC8vIHBhdGggKGxpbmspIGdyb3VwXG4gICAgICAgIHBhdGggPSBwYXRoLmRhdGEobGlua3MpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBleGlzdGluZyBsaW5rc1xuICAgICAgICAvLyBWSkQ6IGRhc2hlZCBsaW5rcyBiZXR3ZWVuIHBlYmJsZXMgYXJlIFwic2VsZWN0ZWRcIi4gdGhpcyBpcyBkaXNhYmxlZCBmb3Igbm93XG4gICAgICAgIHBhdGguY2xhc3NlZCgnc2VsZWN0ZWQnLCB4ID0+IG51bGwpXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmtlci1zdGFydCcsIHggPT4geC5sZWZ0ID8gJ3VybCgjc3RhcnQtYXJyb3cpJyA6ICcnKVxuICAgICAgICAgICAgLnN0eWxlKCdtYXJrZXItZW5kJywgeCA9PiB4LnJpZ2h0ID8gJ3VybCgjZW5kLWFycm93KScgOiAnJyk7XG5cbiAgICAgICAgLy8gYWRkIG5ldyBsaW5rc1xuICAgICAgICBwYXRoLmVudGVyKCkuYXBwZW5kKCdzdmc6cGF0aCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluaycpXG4gICAgICAgICAgICAuY2xhc3NlZCgnc2VsZWN0ZWQnLCB4ID0+IG51bGwpXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmtlci1zdGFydCcsIHggPT4geC5sZWZ0ID8gJ3VybCgjc3RhcnQtYXJyb3cpJyA6ICcnKVxuICAgICAgICAgICAgLnN0eWxlKCdtYXJrZXItZW5kJywgeCA9PiB4LnJpZ2h0ID8gJ3VybCgjZW5kLWFycm93KScgOiAnJylcbiAgICAgICAgICAgIC5vbignbW91c2Vkb3duJywgZnVuY3Rpb24oZCkgeyAvLyBkbyB3ZSBldmVyIG5lZWQgdG8gc2VsZWN0IGEgbGluaz8gbWFrZSBpdCBkZWxldGUuLlxuICAgICAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnN0cmluZ2lmeShkKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpbmtzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmogPT09IEpTT04uc3RyaW5naWZ5KGxpbmtzW2pdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtzLnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW1vdmUgb2xkIGxpbmtzXG4gICAgICAgIHBhdGguZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIGNpcmNsZSAobm9kZSkgZ3JvdXBcbiAgICAgICAgY2lyY2xlID0gY2lyY2xlLmRhdGEobm9kZXMsIHggPT4geC5pZCk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGV4aXN0aW5nIG5vZGVzIChyZWZsZXhpdmUgJiBzZWxlY3RlZCB2aXN1YWwgc3RhdGVzKVxuICAgICAgICAvLyBkMy5yZ2IgaXMgdGhlIGZ1bmN0aW9uIGFkanVzdGluZyB0aGUgY29sb3IgaGVyZVxuICAgICAgICBjaXJjbGUuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgICAgICAgICAgLmNsYXNzZWQoJ3JlZmxleGl2ZScsIHggPT4geC5yZWZsZXhpdmUpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCB4ID0+IGQzLnJnYih4Lm5vZGVDb2wpKVxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCB4ID0+IGQzLnJnYih4LnN0cm9rZUNvbG9yKSlcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgeCA9PiB4LnN0cm9rZVdpZHRoKTtcblxuICAgICAgICAvLyBhZGQgbmV3IG5vZGVzXG4gICAgICAgIGxldCBnID0gY2lyY2xlLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZzpnJylcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIHggPT4geC5uYW1lICsgJ2JpZ2dyb3VwJyk7XG5cbiAgICAgICAgLy8gYWRkIHBsb3RcbiAgICAgICAgZy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgIGlmIChkLnBsb3R0eXBlID09ICdjb250aW51b3VzJykgZGVuc2l0eU5vZGUoZCwgdGhpcyk7XG4gICAgICAgICAgICBlbHNlIGlmIChkLnBsb3R0eXBlID09ICdiYXInKSBiYXJzTm9kZShkLCB0aGlzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGFwcGVuZCA9IChzdHIsIGF0dHIpID0+IHggPT4gc3RyICsgeFthdHRyIHx8ICdpZCddO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBhcHBlbmQoJ2R2QXJjJykpXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgYXJjMylcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZHZDb2xvcilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBmaWxsVGhpcyh0aGlzLCAuMywgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICBmaWxsKGQsICdkdlRleHQnLCAuOSwgMCwgMTAwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGZpbGxUaGlzKHRoaXMsIDAsIDEwMCwgNTAwKTtcbiAgICAgICAgICAgICAgICBmaWxsKGQsICdkdlRleHQnLCAwLCAxMDAsIDUwMCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIGQgPT4ge1xuICAgICAgICAgICAgICAgIHNldENvbG9ycyhkLCBkdkNvbG9yKTtcbiAgICAgICAgICAgICAgICBsZWdlbmQoZHZDb2xvcik7XG4gICAgICAgICAgICAgICAgcmVzdGFydCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGFwcGVuZCgnZHZUZXh0JykpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgNilcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgMTEuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAuYXBwZW5kKFwidGV4dFBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLCBhcHBlbmQoJyNkdkFyYycpKVxuICAgICAgICAgICAgLnRleHQoXCJEZXAgVmFyXCIpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBhcHBlbmQoJ25vbUFyYycpKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGFyYzQpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIG5vbUNvbG9yKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMClcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGlmIChkLmRlZmF1bHROdW1jaGFyID09IFwiY2hhcmFjdGVyXCIpIHJldHVybjtcbiAgICAgICAgICAgICAgICBmaWxsVGhpcyh0aGlzLCAuMywgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICBmaWxsKGQsIFwibm9tVGV4dFwiLCAuOSwgMCwgMTAwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGlmIChkLmRlZmF1bHROdW1jaGFyID09IFwiY2hhcmFjdGVyXCIpIHJldHVybjtcbiAgICAgICAgICAgICAgICBmaWxsVGhpcyh0aGlzLCAwLCAxMDAsIDUwMCk7XG4gICAgICAgICAgICAgICAgZmlsbChkLCBcIm5vbVRleHRcIiwgMCwgMTAwLCA1MDApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQuZGVmYXVsdE51bWNoYXIgPT0gXCJjaGFyYWN0ZXJcIikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldENvbG9ycyhkLCBub21Db2xvcik7XG4gICAgICAgICAgICAgICAgbGVnZW5kKG5vbUNvbG9yKTtcbiAgICAgICAgICAgICAgICByZXN0YXJ0KCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgYXBwZW5kKFwibm9tVGV4dFwiKSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCA2KVxuICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCAxMS41KVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0UGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4bGluazpocmVmXCIsIGFwcGVuZChcIiNub21BcmNcIikpXG4gICAgICAgICAgICAudGV4dChcIk5vbWluYWxcIik7XG5cbiAgICAgICAgZy5hcHBlbmQoJ3N2ZzpjaXJjbGUnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ25vZGUnKVxuICAgICAgICAgICAgLmF0dHIoJ3InLCBhbGxSKVxuICAgICAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdpbmhlcml0JylcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gZC5ub2RlQ29sKVxuICAgICAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgXCIwLjVcIilcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkMy5yZ2IoZC5zdHJva2VDb2xvcikudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIC5jbGFzc2VkKCdyZWZsZXhpdmUnLCBkID0+IGQucmVmbGV4aXZlKVxuICAgICAgICAgICAgLm9uKCdkYmxjbGljaycsIGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgLy8gc3RvcCBjbGljayBmcm9tIGJ1YmJsaW5nXG4gICAgICAgICAgICAgICAgc3VtbWFyeUhvbGQgPSB0cnVlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignY29udGV4dG1lbnUnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgY2xpY2sgb24gbm9kZVxuICAgICAgICAgICAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICByaWdodENsaWNrTGFzdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbW91c2Vkb3duX25vZGUgPSBkO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkX25vZGUgPSBtb3VzZWRvd25fbm9kZSA9PT0gc2VsZWN0ZWRfbm9kZSA/IG51bGwgOiBtb3VzZWRvd25fbm9kZTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZF9saW5rID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIHJlcG9zaXRpb24gZHJhZyBsaW5lXG4gICAgICAgICAgICAgICAgZHJhZ19saW5lXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnbWFya2VyLWVuZCcsICd1cmwoI2VuZC1hcnJvdyknKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlkZGVuJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgJ00nICsgbW91c2Vkb3duX25vZGUueCArICcsJyArIG1vdXNlZG93bl9ub2RlLnkgKyAnTCcgKyBtb3VzZWRvd25fbm9kZS54ICsgJywnICsgbW91c2Vkb3duX25vZGUueSk7XG5cbiAgICAgICAgICAgICAgICBzdmcub24oJ21vdXNlbW92ZScsIG1vdXNlbW92ZSk7XG4gICAgICAgICAgICAgICAgcmVzdGFydCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2V1cCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgIGlmIChyaWdodENsaWNrTGFzdCkge1xuICAgICAgICAgICAgICAgICAgICByaWdodENsaWNrTGFzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghbW91c2Vkb3duX25vZGUpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIG5lZWRlZCBieSBGRlxuICAgICAgICAgICAgICAgIGRyYWdfbGluZVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdtYXJrZXItZW5kJywgJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGRyYWctdG8tc2VsZlxuICAgICAgICAgICAgICAgIG1vdXNldXBfbm9kZSA9IGQ7XG4gICAgICAgICAgICAgICAgaWYgKG1vdXNldXBfbm9kZSA9PT0gbW91c2Vkb3duX25vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRNb3VzZVZhcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHVuZW5sYXJnZSB0YXJnZXQgbm9kZVxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCd0cmFuc2Zvcm0nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgbGluayB0byBncmFwaCAodXBkYXRlIGlmIGV4aXN0cylcbiAgICAgICAgICAgICAgICAvLyBOQjogbGlua3MgYXJlIHN0cmljdGx5IHNvdXJjZSA8IHRhcmdldDsgYXJyb3dzIHNlcGFyYXRlbHkgc3BlY2lmaWVkIGJ5IGJvb2xlYW5zXG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZSwgdGFyZ2V0LCBkaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgaWYgKG1vdXNlZG93bl9ub2RlLmlkIDwgbW91c2V1cF9ub2RlLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IG1vdXNlZG93bl9ub2RlO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBtb3VzZXVwX25vZGU7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlID0gbW91c2V1cF9ub2RlO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBtb3VzZWRvd25fbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsaW5rID0gbGlua3MuZmlsdGVyKHggPT4geC5zb3VyY2UgPT0gc291cmNlICYmIHgudGFyZ2V0ID09IHRhcmdldClbMF07XG4gICAgICAgICAgICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgbGlua1tkaXJlY3Rpb25dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsaW5rID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGxpbmtbZGlyZWN0aW9uXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtzLnB1c2gobGluayk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IG5ldyBsaW5rXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRfbGluayA9IGxpbms7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRfbm9kZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3ZnLm9uKCdtb3VzZW1vdmUnLCBudWxsKTtcblxuICAgICAgICAgICAgICAgIHJlc2V0TW91c2VWYXJzKCk7XG4gICAgICAgICAgICAgICAgcmVzdGFydCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2hvdyBub2RlIG5hbWVzXG4gICAgICAgIGcuYXBwZW5kKCdzdmc6dGV4dCcpXG4gICAgICAgICAgICAuYXR0cigneCcsIDApXG4gICAgICAgICAgICAuYXR0cigneScsIDE1KVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2lkJylcbiAgICAgICAgICAgIC50ZXh0KGQgPT4gZC5uYW1lKTtcblxuICAgICAgICAvLyBzaG93IHN1bW1hcnkgc3RhdHMgb24gbW91c2VvdmVyXG4gICAgICAgIC8vIFNWRyBkb2Vzbid0IHN1cHBvcnQgdGV4dCB3cmFwcGluZywgdXNlIGh0bWwgaW5zdGVhZFxuICAgICAgICBnLnNlbGVjdEFsbChcImNpcmNsZS5ub2RlXCIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZCA9PiB7XG4gICAgICAgICAgICAgICAgdGFiTGVmdCgndGFiMycpO1xuICAgICAgICAgICAgICAgIHZhclN1bW1hcnkoZCk7XG4gICAgICAgICAgICAgICAgYnlJZCgndHJhbnNmb3JtYXRpb25zJykuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5OmJsb2NrJyk7XG4gICAgICAgICAgICAgICAgYnlJZChcInRyYW5zU2VsXCIpLnNlbGVjdGVkSW5kZXggPSBkLmlkO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybVZhciA9IHZhbHVlS2V5W2QuaWRdO1xuXG4gICAgICAgICAgICAgICAgZmlsbChkLCBcImR2QXJjXCIsIC4xLCAwLCAxMDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJkdlRleHRcIiwgLjUsIDAsIDEwMCk7XG4gICAgICAgICAgICAgICAgaWYgKGQuZGVmYXVsdE51bWNoYXIgPT0gXCJudW1lcmljXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbChkLCBcIm5vbUFyY1wiLCAuMSwgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsbChkLCBcIm5vbVRleHRcIiwgLjUsIDAsIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJjc0FyY1wiLCAuMSwgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICBmaWxsKGQsIFwiY3NUZXh0XCIsIC41LCAwLCAxMDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJ0aW1lQXJjXCIsIC4xLCAwLCAxMDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJ0aW1lVGV4dFwiLCAuNSwgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1bW1hcnlIb2xkKSB0YWJMZWZ0KHN1YnNldCA/ICd0YWIyJyA6ICd0YWIxJyk7XG4gICAgICAgICAgICAgICAgJ2NzQXJjIGNzVGV4dCB0aW1lQXJjIHRpbWVUZXh0IGR2QXJjIGR2VGV4dCBub21BcmMgbm9tVGV4dCcuc3BsaXQoJyAnKS5tYXAoeCA9PiBmaWxsKGQsIHgsIDAsIDEwMCwgNTAwKSk7XG4gICAgICAgICAgICAgICAgbS5yZWRyYXcoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRoZSB0cmFuc2Zvcm1hdGlvbiB2YXJpYWJsZSBsaXN0IGlzIHNpbGVudGx5IHVwZGF0ZWQgYXMgcGViYmxlcyBhcmUgYWRkZWQvcmVtb3ZlZFxuICAgICAgICBkMy5zZWxlY3QoXCIjdHJhbnNTZWxcIilcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2xpJylcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgICBkMy5zZWxlY3QoXCIjdHJhbnNTZWxcIilcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2xpJylcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzLm1hcCh4ID0+IHgubmFtZSkpIC8vIHNldCB0byB2YXJpYWJsZXMgaW4gbW9kZWwgc3BhY2UgYXMgdGhleSdyZSBhZGRlZFxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJsaVwiKVxuICAgICAgICAgICAgLnRleHQoZCA9PiBkKTtcblxuICAgICAgICAkKCcjdHJhbnNTZWwgbGknKS5jbGljayhmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIC8vIGlmICdpbnRlcmFjdGlvbicgaXMgdGhlIHNlbGVjdGVkIGZ1bmN0aW9uLCBkb24ndCBzaG93IHRoZSBmdW5jdGlvbiBsaXN0IGFnYWluXG4gICAgICAgICAgICBpZiAoc2VsSW50ZXJhY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9ICQoJyN0SW5wdXQnKS52YWwoKS5jb25jYXQoJCh0aGlzKS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICQoJyN0SW5wdXQnKS52YWwobik7XG4gICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdHJhbnNQYXJzZShuID0gbik7XG4gICAgICAgICAgICAgICAgaWYgKCF0KSByZXR1cm47XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtKG4gPSB0LnNsaWNlKDAsIHQubGVuZ3RoIC0gMSksIHQgPSB0W3QubGVuZ3RoIC0gMV0sIHR5cGVUcmFuc2Zvcm0gPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcjdElucHV0JykudmFsKCQodGhpcykudGV4dCgpKTtcbiAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuZmFkZU91dCgxMDApO1xuICAgICAgICAgICAgJCgnI3RyYW5zTGlzdCcpLmZhZGVJbigxMDApO1xuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW1vdmUgb2xkIG5vZGVzXG4gICAgICAgIGNpcmNsZS5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIGZvcmNlLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vkb3duKGQpIHtcbiAgICAgICAgLy8gcHJldmVudCBJLWJhciBvbiBkcmFnXG4gICAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIGJlY2F1c2UgOmFjdGl2ZSBvbmx5IHdvcmtzIGluIFdlYktpdD9cbiAgICAgICAgc3ZnLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICBpZiAoZDMuZXZlbnQuY3RybEtleSB8fCBtb3VzZWRvd25fbm9kZSB8fCBtb3VzZWRvd25fbGluaykgcmV0dXJuO1xuICAgICAgICByZXN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlKGQpIHtcbiAgICAgICAgaWYgKCFtb3VzZWRvd25fbm9kZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gdXBkYXRlIGRyYWcgbGluZVxuICAgICAgICBkcmFnX2xpbmUuYXR0cignZCcsICdNJyArIG1vdXNlZG93bl9ub2RlLnggKyAnLCcgKyBtb3VzZWRvd25fbm9kZS55ICsgJ0wnICsgZDMubW91c2UodGhpcylbMF0gKyAnLCcgKyBkMy5tb3VzZSh0aGlzKVsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2V1cChkKSB7XG4gICAgICAgIGlmIChtb3VzZWRvd25fbm9kZSkge1xuICAgICAgICAgICAgZHJhZ19saW5lXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZGRlbicsIHRydWUpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdtYXJrZXItZW5kJywgJycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGJlY2F1c2UgOmFjdGl2ZSBvbmx5IHdvcmtzIGluIFdlYktpdD9cbiAgICAgICAgc3ZnLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgLy8gY2xlYXIgbW91c2UgZXZlbnQgdmFyc1xuICAgICAgICByZXNldE1vdXNlVmFycygpO1xuICAgIH1cblxuICAgIC8vIGFwcCBzdGFydHMgaGVyZVxuICAgIHN2Zy5hdHRyKCdpZCcsICgpID0+IFwid2hpdGVzcGFjZVwiLmNvbmNhdChteXNwYWNlKSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICAgICAgLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpIHttb3VzZWRvd24odGhpcyk7fSlcbiAgICAgICAgLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24oKSB7bW91c2V1cCh0aGlzKTt9KTtcblxuICAgIGQzLnNlbGVjdCh3aW5kb3cpXG4gICAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBhbGwgY2xpY2tzIHdpbGwgYnViYmxlIGhlcmUgdW5sZXNzIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgICAkKCcjdHJhbnNMaXN0JykuZmFkZU91dCgxMDApO1xuICAgICAgICAgICAgJCgnI3RyYW5zU2VsJykuZmFkZU91dCgxMDApO1xuICAgICAgICB9KTtcblxuICAgIHJlc3RhcnQoKTsgLy8gaW5pdGlhbGl6ZXMgZm9yY2UubGF5b3V0KClcbiAgICBmYWtlQ2xpY2soKTtcbn1cblxuLy8gcmV0dXJucyBpZFxubGV0IGZpbmQgPSAoJG5vZGVzLCBuYW1lKSA9PiB7XG4gICAgZm9yIChsZXQgaSBpbiAkbm9kZXMpXG4gICAgICAgIGlmICgkbm9kZXNbaV0ubmFtZSA9PSBuYW1lKSByZXR1cm4gJG5vZGVzW2ldLmlkO1xufTtcblxuLy8gcmV0dXJucyBpZFxubGV0IGZpbmROb2RlSW5kZXggPSBuYW1lID0+IHtcbiAgICBmb3IgKGxldCBpIGluIGFsbE5vZGVzKVxuICAgICAgICBpZiAoYWxsTm9kZXNbaV0ubmFtZSA9PSBuYW1lKSByZXR1cm4gYWxsTm9kZXNbaV0uaWQ7XG59O1xuXG5sZXQgbm9kZUluZGV4ID0gbm9kZU5hbWUgPT4ge1xuICAgIGZvciAobGV0IGkgaW4gbm9kZXMpXG4gICAgICAgIGlmIChub2Rlc1tpXS5uYW1lID09IG5vZGVOYW1lKSByZXR1cm4gaTtcbn07XG5cbmxldCBmaW5kTm9kZSA9IG5vZGVOYW1lID0+IHtcbiAgICBmb3IgKGxldCBpIGluIGFsbE5vZGVzKVxuICAgICAgICBpZiAoYWxsTm9kZXNbaV0ubmFtZSA9PSBub2RlTmFtZSkgcmV0dXJuIGFsbE5vZGVzW2ldO1xufTtcblxuLy8gZnVuY3Rpb24gY2FsbGVkIGJ5IGZvcmNlIGJ1dHRvblxuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlU3dpdGNoKCkge1xuICAgIGZvcmNldG9nZ2xlID0gW2ZvcmNldG9nZ2xlWzBdID09ICd0cnVlJyA/ICdmYWxzZScgOiAndHJ1ZSddO1xuICAgIGlmIChmb3JjZXRvZ2dsZVswXSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgIGJ5SWQoJ2J0bkZvcmNlJykuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJidG4gYWN0aXZlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ5SWQoJ2J0bkZvcmNlJykuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJidG4gYnRuLWRlZmF1bHRcIik7XG4gICAgICAgIGZha2VDbGljaygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3BsaWNlTGlua3NGb3JOb2RlKG5vZGUpIHtcbiAgICBsaW5rcy5maWx0ZXIobCA9PiBsLnNvdXJjZSA9PSBub2RlIHx8IGwudGFyZ2V0ID09IG5vZGUpXG4gICAgICAgIC5tYXAoeCA9PiBsaW5rcy5zcGxpY2UobGlua3MuaW5kZXhPZih4KSwgMSkpO1xufVxuXG5mdW5jdGlvbiB6UG9wKCkge1xuICAgIGlmIChkYXRhdXJsKSB6cGFyYW1zLnpkYXRhdXJsID0gZGF0YXVybDtcbiAgICB6cGFyYW1zLnptb2RlbGNvdW50ID0gbW9kZWxDb3VudDtcbiAgICB6cGFyYW1zLnplZGdlcyA9IFtdO1xuICAgIHpwYXJhbXMuenZhcnMgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGVzLmxlbmd0aDsgaisrKSB7IC8vcG9wdWxhdGUgenZhcnMgYXJyYXlcbiAgICAgICAgenBhcmFtcy56dmFycy5wdXNoKG5vZGVzW2pdLm5hbWUpO1xuICAgICAgICBsZXQgdGVtcCA9IG5vZGVzW2pdLmlkO1xuICAgICAgICB6cGFyYW1zLnpzZXR4W2pdID0gYWxsTm9kZXNbdGVtcF0uc2V0eHZhbHM7XG4gICAgICAgIHpwYXJhbXMuenN1YnNldFtqXSA9IGFsbE5vZGVzW3RlbXBdLnN1YnNldHJhbmdlO1xuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmtzLmxlbmd0aDsgaisrKSB7IC8vcG9wdWxhdGUgemVkZ2VzIGFycmF5XG4gICAgICAgIC8vY29ycmVjdCB0aGUgc291cmNlIHRhcmdldCBvcmRlcmluZyBmb3IgWmVsaWdcbiAgICAgICAgbGV0IHNyY3RndCA9IGxpbmtzW2pdLmxlZnQgPT0gZmFsc2UgP1xuICAgICAgICAgICAgW2xpbmtzW2pdLnNvdXJjZS5uYW1lLCBsaW5rc1tqXS50YXJnZXQubmFtZV0gOlxuICAgICAgICAgICAgW2xpbmtzW2pdLnRhcmdldC5uYW1lLCBsaW5rc1tqXS5zb3VyY2UubmFtZV07XG4gICAgICAgIHpwYXJhbXMuemVkZ2VzLnB1c2goc3JjdGd0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc3RpbWF0ZShidG4pIHtcbiAgICBpZiAocHJvZHVjdGlvbiAmJiB6cGFyYW1zLnpzZXNzaW9uaWQgPT0gJycpIHtcbiAgICAgICAgYWxlcnQoXCJXYXJuaW5nOiBEYXRhIGRvd25sb2FkIGlzIG5vdCBjb21wbGV0ZS4gVHJ5IGFnYWluIHNvb24uXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgelBvcCgpO1xuICAgIC8vIHdyaXRlIGxpbmtzIHRvIGZpbGUgJiBydW4gUiBDTURcbiAgICAvLyBwYWNrYWdlIHRoZSBvdXRwdXQgYXMgSlNPTlxuICAgIC8vIGFkZCBjYWxsIGhpc3RvcnkgYW5kIHBhY2thZ2UgdGhlIHpwYXJhbXMgb2JqZWN0IGFzIEpTT05cbiAgICB6cGFyYW1zLmNhbGxIaXN0b3J5ID0gY2FsbEhpc3Rvcnk7XG4gICAgdmFyIGpzb25vdXQgPSBKU09OLnN0cmluZ2lmeSh6cGFyYW1zKTtcblxuICAgIHZhciB1cmxjYWxsID0gcmFwcFVSTCArIFwiemVsaWdhcHBcIjsgLy9iYXNlLmNvbmNhdChqc29ub3V0KTtcbiAgICB2YXIgc29sYWpzb25vdXQgPSBcInNvbGFKU09OPVwiICsganNvbm91dDtcbiAgICBjb25zb2xlLmxvZyhcInVybGNhbGwgb3V0OiBcIiwgdXJsY2FsbCk7XG4gICAgY29uc29sZS5sb2coXCJQT1NUIG91dDogXCIsIHNvbGFqc29ub3V0KTtcblxuICAgIHpwYXJhbXMuYWxsVmFycyA9IHZhbHVlS2V5LnNsaWNlKDEwLCAyNSk7IC8vIGJlY2F1c2UgdGhlIFVSTCBpcyB0b28gbG9uZy4uLlxuICAgIGpzb25vdXQgPSBKU09OLnN0cmluZ2lmeSh6cGFyYW1zKTtcbiAgICB2YXIgc2VsZWN0b3J1cmxjYWxsID0gcmFwcFVSTCArIFwic2VsZWN0b3JhcHBcIjtcblxuICAgIGZ1bmN0aW9uIGVzdGltYXRlU3VjY2VzcyhidG4sIGpzb24pIHtcbiAgICAgICAgZXN0aW1hdGVMYWRkYS5zdG9wKCk7IC8vIHN0b3Agc3Bpbm5lclxuICAgICAgICBhbGxSZXN1bHRzLnB1c2goanNvbik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwianNvbiBpbjogXCIsIGpzb24pO1xuXG4gICAgICAgIGlmICghZXN0aW1hdGVkKSBieUlkKFwicmVzdWx0c1wiKS5yZW1vdmVDaGlsZChieUlkKFwicmVzdWx0c0hvbGRlclwiKSk7XG5cbiAgICAgICAgZXN0aW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgZDMuc2VsZWN0KFwiI3Jlc3VsdHNcIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcblxuICAgICAgICBkMy5zZWxlY3QoXCIjcmVzdWx0c1ZpZXdcIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcblxuICAgICAgICBkMy5zZWxlY3QoXCIjbW9kZWxWaWV3XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG5cbiAgICAgICAgLy8gcHJvZ3JhbW1hdGljIGNsaWNrIG9uIFJlc3VsdHMgYnV0dG9uXG4gICAgICAgICQoXCIjYnRuUmVzdWx0c1wiKS50cmlnZ2VyKFwiY2xpY2tcIik7XG5cbiAgICAgICAgbGV0IG1vZGVsID0gXCJNb2RlbFwiLmNvbmNhdChtb2RlbENvdW50ID0gbW9kZWxDb3VudCArIDEpO1xuXG4gICAgICAgIGZ1bmN0aW9uIG1vZENvbCgpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiNtb2RlbFZpZXdcIilcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGhleFRvUmdiYSh2YXJDb2xvcikpO1xuICAgICAgICB9XG4gICAgICAgIG1vZENvbCgpO1xuXG4gICAgICAgIGQzLnNlbGVjdChcIiNtb2RlbFZpZXdcIilcbiAgICAgICAgICAgIC5pbnNlcnQoXCJwXCIsIFwiOmZpcnN0LWNoaWxkXCIpIC8vIHRvcCBzdGFjayBmb3IgcmVzdWx0c1xuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBtb2RlbClcbiAgICAgICAgICAgIC50ZXh0KG1vZGVsKVxuICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgaGV4VG9SZ2JhKHNlbFZhckNvbG9yKSlcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IucmVwbGFjZSgvXFxzKi9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGhleFRvUmdiYShzZWxWYXJDb2xvcikucmVwbGFjZSgvXFxzKi9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoYS5zdWJzdHIoMCwgMTcpID09IGIuc3Vic3RyKDAsIDE3KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBlc2NhcGUgZnVuY3Rpb24gaWYgZGlzcGxheWVkIG1vZGVsIGlzIGNsaWNrZWRcbiAgICAgICAgICAgICAgICBtb2RDb2woKTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgaGV4VG9SZ2JhKHNlbFZhckNvbG9yKSk7XG4gICAgICAgICAgICAgICAgdml6KHRoaXMuaWQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHJDYWxsID0gW107XG4gICAgICAgIHJDYWxsWzBdID0ganNvbi5jYWxsO1xuICAgICAgICBzaG93TG9nKFwiZXN0aW1hdGVcIiwgckNhbGwpO1xuXG4gICAgICAgIHZpeihtb2RlbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXN0aW1hdGVGYWlsKGJ0bikge1xuICAgICAgICBlc3RpbWF0ZUxhZGRhLnN0b3AoKTsgLy8gc3RvcCBzcGlubmVyXG4gICAgICAgIGVzdGltYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0b3JTdWNjZXNzKGJ0biwganNvbikge1xuICAgICAgICBkMy5zZWxlY3QoXCIjdGlja2VyXCIpXG4gICAgICAgICAgICAudGV4dChcIlN1Z2dlc3RlZCB2YXJpYWJsZXMgYW5kIHBlcmNlbnQgaW1wcm92ZW1lbnQgb24gUk1TRTogXCIgKyBqc29uLnZhcnMpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInNlbGVjdG9yU3VjY2VzczogXCIsIGpzb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGVjdG9yRmFpbChidG4pIHtcbiAgICAgICAgYWxlcnQoXCJTZWxlY3RvciBGYWlsXCIpO1xuICAgIH1cblxuICAgIGVzdGltYXRlTGFkZGEuc3RhcnQoKTsgLy8gc3RhcnQgc3Bpbm5lclxuICAgIG1ha2VDb3JzUmVxdWVzdCh1cmxjYWxsLCBidG4sIGVzdGltYXRlU3VjY2VzcywgZXN0aW1hdGVGYWlsLCBzb2xhanNvbm91dCk7XG59XG5cbmZ1bmN0aW9uIGRhdGFEb3dubG9hZCgpIHtcbiAgICB6UG9wKCk7XG4gICAgLy8gd3JpdGUgbGlua3MgdG8gZmlsZSAmIHJ1biBSIENNRFxuXG4gICAgLy9wYWNrYWdlIHRoZSBvdXRwdXQgYXMgSlNPTlxuICAgIC8vIGFkZCBjYWxsIGhpc3RvcnkgYW5kIHBhY2thZ2UgdGhlIHpwYXJhbXMgb2JqZWN0IGFzIEpTT05cbiAgICB2YXIganNvbm91dCA9IEpTT04uc3RyaW5naWZ5KHpwYXJhbXMpO1xuICAgIHZhciBidG4gPSBcIm5vYnV0dG9uXCI7XG5cbiAgICB2YXIgdXJsY2FsbCA9IHJhcHBVUkwgKyBcImRhdGFhcHBcIjtcbiAgICB2YXIgc29sYWpzb25vdXQgPSBcInNvbGFKU09OPVwiICsganNvbm91dDtcbiAgICBjb25zb2xlLmxvZyhcInVybGNhbGwgb3V0OiBcIiwgdXJsY2FsbCk7XG4gICAgY29uc29sZS5sb2coXCJQT1NUIG91dDogXCIsIHNvbGFqc29ub3V0KTtcblxuICAgIGxldCBkb3dubG9hZFN1Y2Nlc3MgPSAoYnRuLCBqc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhRG93bmxvYWQganNvbiBpbjogJywganNvbik7XG4gICAgICAgIHpwYXJhbXMuenNlc3Npb25pZCA9IGpzb24uc2Vzc2lvbmlkWzBdO1xuICAgICAgICAvLyBzZXQgbGluayBVUkxcbiAgICAgICAgYnlJZChcImxvZ0lEXCIpLmhyZWYgPSBgJHtwcm9kdWN0aW9uID8gcmFwcFVSTCArICdsb2dfZGlyL2xvZ18nIDogJ3Jvb2svbG9nXycgfSR7enBhcmFtcy56c2Vzc2lvbmlkfS50eHRgO1xuICAgIH07XG4gICAgbGV0IGRvd25sb2FkRmFpbCA9IF8gPT4gY29uc29sZS5sb2coJ0RhdGEgaGF2ZSBub3QgYmVlbiBkb3dubG9hZGVkJyk7XG4gICAgbWFrZUNvcnNSZXF1ZXN0KHVybGNhbGwsIGJ0biwgZG93bmxvYWRTdWNjZXNzLCBkb3dubG9hZEZhaWwsIHNvbGFqc29ub3V0KTtcbn1cblxuZnVuY3Rpb24gdml6KG15bSkge1xuICAgIHZhciBteW0gPSArbXltLnN1YnN0cig1LCA1KSAtIDE7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVLaWRzKHBhcmVudCkge1xuICAgICAgICB3aGlsZSAocGFyZW50LmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQocGFyZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHJlbW92ZUtpZHMoYnlJZChcInJlc3VsdHNWaWV3XCIpKTtcblxuICAgIGxldCBqc29uID0gYWxsUmVzdWx0c1tteW1dO1xuXG4gICAgLy8gcGlwZSBpbiBmaWd1cmVzIHRvIHJpZ2h0IHBhbmVsXG4gICAgdmFyIGZpbGVsaXN0ID0gbmV3IEFycmF5O1xuICAgIGZvciAodmFyIGkgaW4ganNvbi5pbWFnZXMpIHtcbiAgICAgICAgdmFyIHpmaWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICB6ZmlnLnNldEF0dHJpYnV0ZShcInNyY1wiLCBqc29uLmltYWdlc1tpXSk7XG4gICAgICAgIHpmaWcuc2V0QXR0cmlidXRlKCd3aWR0aCcsIDIwMCk7XG4gICAgICAgIHpmaWcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAyMDApO1xuICAgICAgICBieUlkKFwicmVzdWx0c1ZpZXdcIikuYXBwZW5kQ2hpbGQoemZpZyk7XG4gICAgfVxuXG4gICAgLy8gd3JpdGUgdGhlIHJlc3VsdHMgdGFibGVcbiAgICB2YXIgcmVzdWx0c0FycmF5ID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGpzb24uc3VtSW5mbykge1xuICAgICAgICBpZiAoa2V5ID09ICdjb2xuYW1lcycpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgcmVzdWx0c0FycmF5LnB1c2goanNvbi5zdW1JbmZvW2tleV0pO1xuICAgIH1cblxuICAgIHZhciB0YWJsZSA9IGQzLnNlbGVjdChcIiNyZXN1bHRzVmlld1wiKVxuICAgICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgICAuYXBwZW5kKFwidGFibGVcIik7XG5cbiAgICB2YXIgdGhlYWQgPSB0YWJsZS5hcHBlbmQoXCJ0aGVhZFwiKTtcbiAgICB0aGVhZC5hcHBlbmQoXCJ0clwiKVxuICAgICAgICAuc2VsZWN0QWxsKFwidGhcIilcbiAgICAgICAgLmRhdGEoanNvbi5zdW1JbmZvLmNvbG5hbWVzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwidGhcIilcbiAgICAgICAgLnRleHQoZCA9PiBkKTtcblxuICAgIHZhciB0Ym9keSA9IHRhYmxlLmFwcGVuZChcInRib2R5XCIpO1xuICAgIHRib2R5LnNlbGVjdEFsbChcInRyXCIpXG4gICAgICAgIC5kYXRhKHJlc3VsdHNBcnJheSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidHJcIilcbiAgICAgICAgLnNlbGVjdEFsbChcInRkXCIpXG4gICAgICAgIC5kYXRhKGQgPT4gZClcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGRcIilcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgdmFyIG15TnVtID0gTnVtYmVyKGQpO1xuICAgICAgICAgICAgaWYgKGlzTmFOKG15TnVtKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHJldHVybiBteU51bS50b1ByZWNpc2lvbigzKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcImFsaWNlYmx1ZVwiKTtcbiAgICAgICAgfSkgLy8gZm9yIG5vIGRpc2Nlcm5hYmxlIHJlYXNvblxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgXCIjRjlGOUY5XCIpO1xuICAgICAgICB9KTsgLy8oYnV0IG1heWJlIHdlJ2xsIHRoaW5rIG9mIG9uZSlcblxuICAgIGQzLnNlbGVjdChcIiNyZXN1bHRzVmlld1wiKVxuICAgICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgICAuaHRtbCgoKSA9PiBcIjxiPkZvcm11bGE6IDwvYj5cIi5jb25jYXQoanNvbi5jYWxsWzBdKSk7XG5cbiAgICBtLnJlZHJhdygpO1xufVxuXG4vLyBwYXJzZXMgdGhlIHRyYW5zZm9ybWF0aW9uIGlucHV0LiB2YXJpYWJsZSBuYW1lcyBhcmUgb2Z0ZW4gbmVzdGVkIGluc2lkZSBvbmUgYW5vdGhlciwgZS5nLiwgZXRod2FyLCB3YXIsIHdhcnMsIGFuZCBzbyB0aGlzIGlzIGhhbmRsZWRcbmZ1bmN0aW9uIHRyYW5zUGFyc2Uobikge1xuICAgIHZhciBvdXQyID0gW107XG4gICAgdmFyIHQyID0gbjtcbiAgICB2YXIgazIgPSAwO1xuICAgIHZhciBzdWJNZTIgPSBcIl90cmFuc3ZhclwiLmNvbmNhdChrMik7XG4gICAgdmFyIGluZGV4ZWQgPSBbXTtcblxuICAgIC8vIG91dDIgaXMgYWxsIG1hdGNoZWQgdmFyaWFibGVzLCBpbmRleGVkIGlzIGFuIGFycmF5LCBlYWNoIGVsZW1lbnQgaXMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIG1hdGNoZWQgdmFyaWFibGVzIHN0YXJ0aW5nIGluZGV4IGFuZCBmaW5pc2hpbmcgaW5kZXguICBlLmcuLCBuPVwid2FycysyXCIsIG91dDI9W3dhciwgd2Fyc10sIGluZGV4ZWQ9W3swLDJ9LHswLDN9XVxuICAgIGZvciAodmFyIGkgaW4gdmFsdWVLZXkpIHtcbiAgICAgICAgdmFyIG0yID0gbi5tYXRjaCh2YWx1ZUtleVtpXSk7XG4gICAgICAgIGlmIChtMiAhPSBudWxsKVxuICAgICAgICAgICAgb3V0Mi5wdXNoKG0yWzBdKTtcblxuICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKHZhbHVlS2V5W2ldLCBcImdcIik7XG4gICAgICAgIHZhciBzID0gbi5zZWFyY2gocmUpO1xuICAgICAgICBpZiAocyAhPSAtMSlcbiAgICAgICAgICAgIGluZGV4ZWQucHVzaCh7ZnJvbTogcywgdG86IHMgKyB2YWx1ZUtleVtpXS5sZW5ndGh9KTtcbiAgICB9XG5cbiAgICAvLyBuZXN0ZWQgbG9vcCBub3QgZ29vZCwgYnV0IGluZGV4ZWQgaXMgbm90IGxpa2VseSB0byBiZSB2ZXJ5IGxhcmdlLlxuICAgIC8vIGlmIGEgdmFyaWFibGUgaXMgbmVzdGVkLCBpdCBpcyByZW1vdmVkIGZyb20gb3V0MlxuICAgIC8vIG5vdGljZSwgbG9vcCBpcyBiYWNrd2FyZHMgc28gdGhhdCBpbmRleCBjaGFuZ2VzIGRvbid0IGFmZmVjdCB0aGUgc3BsaWNlXG4gICAgY29uc29sZS5sb2coXCJpbmRleGVkIFwiLCBpbmRleGVkKTtcbiAgICBmb3IgKHZhciBpID0gaW5kZXhlZC5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgICBmb3IgKHZhciBqID0gaW5kZXhlZC5sZW5ndGggLSAxOyBqID4gLTE7IGotLSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGopXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoKGluZGV4ZWRbaV0uZnJvbSA+PSBpbmRleGVkW2pdLmZyb20pICYgKGluZGV4ZWRbaV0udG8gPD0gaW5kZXhlZFtqXS50bykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpLCBcIiBpcyBuZXN0ZWQgaW4gXCIsIGopO1xuICAgICAgICAgICAgICAgIG91dDIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBvdXQyKSB7XG4gICAgICAgIHQyID0gdDIucmVwbGFjZShvdXQyW2ldLCBzdWJNZTIpOyAvL3NvbWV0aGluZyB0aGF0J2xsIG5ldmVyIGJlIGEgdmFyaWFibGUgbmFtZVxuICAgICAgICBrMiA9IGsyICsgMTtcbiAgICAgICAgc3ViTWUyID0gXCJfdHJhbnN2YXJcIi5jb25jYXQoazIpO1xuICAgIH1cblxuICAgIGlmIChvdXQyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb3V0Mi5wdXNoKHQyKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJuZXcgb3V0IFwiLCBvdXQyKTtcbiAgICAgICAgcmV0dXJuIChvdXQyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhbGVydChcIk5vIHZhcmlhYmxlIG5hbWUgZm91bmQuIFBlcmhhcHMgY2hlY2sgeW91ciBzcGVsbGluZz9cIik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKG4sIHQsIHR5cGVUcmFuc2Zvcm0pIHtcbiAgICBpZiAocHJvZHVjdGlvbiAmJiB6cGFyYW1zLnpzZXNzaW9uaWQgPT0gXCJcIikge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IERhdGEgZG93bmxvYWQgaXMgbm90IGNvbXBsZXRlLiBUcnkgYWdhaW4gc29vbi5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXR5cGVUcmFuc2Zvcm0pXG4gICAgICAgIHQgPSB0LnJlcGxhY2UoXCIrXCIsIFwiX3BsdXNfXCIpOyAvLyBjYW4ndCBzZW5kIHRoZSBwbHVzIG9wZXJhdG9yXG5cbiAgICBjb25zb2xlLmxvZyhuKTtcbiAgICBjb25zb2xlLmxvZyh0KTtcblxuICAgIHZhciBidG4gPSBieUlkKCdidG5Fc3RpbWF0ZScpO1xuXG4gICAgdmFyIG15biA9IGFsbE5vZGVzW2ZpbmROb2RlSW5kZXgoblswXSldO1xuICAgIGlmICh0eXBlb2YgbXluID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIG15biA9IGFsbE5vZGVzW2ZpbmROb2RlSW5kZXgobildO1xuICAgIH1cblxuICAgIHZhciBvdXR0eXBlcyA9IHtcbiAgICAgICAgdmFybmFtZXNUeXBlczogbixcbiAgICAgICAgaW50ZXJ2YWw6IG15bi5pbnRlcnZhbCxcbiAgICAgICAgbnVtY2hhcjogbXluLm51bWNoYXIsXG4gICAgICAgIG5hdHVyZTogbXluLm5hdHVyZSxcbiAgICAgICAgYmluYXJ5OiBteW4uYmluYXJ5XG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKG15bik7XG4gICAgLy8gaWYgdHlwZVRyYW5zZm9ybSBidXQgd2UgYWxyZWFkeSBoYXZlIHRoZSBtZXRhZGF0YVxuICAgIGlmICh0eXBlVHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChteW4ubmF0dXJlID09IFwibm9taW5hbFwiICYgdHlwZW9mIG15bi5wbG90dmFsdWVzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBteW4ucGxvdHR5cGUgPSBcImJhclwiO1xuICAgICAgICAgICAgYmFyc05vZGUobXluKTtcbiAgICAgICAgICAgIHBvcHVsYXRlUG9wb3ZlcigpO1xuICAgICAgICAgICAgcGFuZWxQbG90cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKG15bi5uYXR1cmUgIT0gXCJub21pbmFsXCIgJiB0eXBlb2YgbXluLnBsb3R4ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBteW4ucGxvdHR5cGUgPSBcImNvbnRpbnVvdXNcIjtcbiAgICAgICAgICAgIGRlbnNpdHlOb2RlKG15bik7XG4gICAgICAgICAgICBwb3B1bGF0ZVBvcG92ZXIoKTtcbiAgICAgICAgICAgIHBhbmVsUGxvdHMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vcGFja2FnZSB0aGUgb3V0cHV0IGFzIEpTT05cbiAgICB2YXIgdHJhbnNmb3Jtc3R1ZmYgPSB7XG4gICAgICAgIHpkYXRhdXJsOiBkYXRhdXJsLFxuICAgICAgICB6dmFyczogbixcbiAgICAgICAgenNlc3Npb25pZDogenBhcmFtcy56c2Vzc2lvbmlkLFxuICAgICAgICB0cmFuc2Zvcm06IHQsXG4gICAgICAgIGNhbGxIaXN0b3J5OiBjYWxsSGlzdG9yeSxcbiAgICAgICAgdHlwZVRyYW5zZm9ybTogdHlwZVRyYW5zZm9ybSxcbiAgICAgICAgdHlwZVN0dWZmOiBvdXR0eXBlc1xuICAgIH07XG4gICAgdmFyIGpzb25vdXQgPSBKU09OLnN0cmluZ2lmeSh0cmFuc2Zvcm1zdHVmZik7XG4gICAgdmFyIHVybGNhbGwgPSByYXBwVVJMICsgXCJ0cmFuc2Zvcm1hcHBcIjtcbiAgICB2YXIgc29sYWpzb25vdXQgPSBcInNvbGFKU09OPVwiICsganNvbm91dDtcbiAgICBjb25zb2xlLmxvZyhcInVybGNhbGwgb3V0OiBcIiwgdXJsY2FsbCk7XG4gICAgY29uc29sZS5sb2coXCJQT1NUIG91dDogXCIsIHNvbGFqc29ub3V0KTtcblxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVN1Y2Nlc3MoYnRuLCBqc29uKSB7XG4gICAgICAgIGVzdGltYXRlTGFkZGEuc3RvcCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImpzb24gaW46IFwiLCBqc29uKTtcbiAgICAgICAgaWYgKGpzb24udHlwZVRyYW5zZm9ybVswXSkge1xuICAgICAgICAgICAgZDMuanNvbihqc29uLnVybCwgKGVycm9yLCBqc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgICAgICAgICB2YXIganNvbmRhdGEgPSBqc29uO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBqc29uZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXlJbmRleCA9IGZpbmROb2RlSW5kZXgoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZCh0cnVlLCBhbGxOb2Rlc1tteUluZGV4XSwganNvbmRhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxOb2Rlc1tteUluZGV4XS5wbG90dHlwZSA9PT0gXCJjb250aW51b3VzXCIpIGRlbnNpdHlOb2RlKGFsbE5vZGVzW215SW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWxsTm9kZXNbbXlJbmRleF0ucGxvdHR5cGUgPT09IFwiYmFyXCIpIGJhcnNOb2RlKGFsbE5vZGVzW215SW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmFrZUNsaWNrKCk7XG4gICAgICAgICAgICAgICAgcG9wdWxhdGVQb3BvdmVyKCk7XG4gICAgICAgICAgICAgICAgcGFuZWxQbG90cygpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFsbE5vZGVzW215SW5kZXhdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbEhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICAgICAgZnVuYzogXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgICAgICAgICB6dmFyczogbixcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgc3Vic2V0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciByQ2FsbCA9IFtdO1xuICAgICAgICAgICAgckNhbGxbMF0gPSBqc29uLmNhbGw7XG4gICAgICAgICAgICB2YXIgbmV3VmFyID0gckNhbGxbMF1bMF07XG4gICAgICAgICAgICB0cmFucy5wdXNoKG5ld1Zhcik7XG5cbiAgICAgICAgICAgIGQzLmpzb24oanNvbi51cmwsIGZ1bmN0aW9uKGVycm9yLCBqc29uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgICAgICAgICB2YXIganNvbmRhdGEgPSBqc29uO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGpzb25kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBteUluZGV4ID0gZmluZE5vZGVJbmRleChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG15SW5kZXggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW52YWxpZCB0cmFuc2Zvcm1hdGlvbjogdGhpcyB2YXJpYWJsZSBuYW1lIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdHJhbnNmb3JtZWQgdmFyaWFibGUgdG8gdGhlIGN1cnJlbnQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBhbGxOb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmoxID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZsZXhpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFibDogXCJ0cmFuc2Zvcm1sYWJlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogWzUsIDE1LCAyMCwgMCwgNSwgMTUsIDIwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBbLjYsIC4yLCAuOSwgLjgsIC4xLCAuMywgLjRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUNvbDogY29sb3JzKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUNvbDogY29sb3JzKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IHNlbFZhckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2V0cGxvdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzZXRyYW5nZTogW1wiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0eHBsb3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0eHZhbHM6IFtcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXlvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEludGVydmFsOiBqc29uZGF0YVtrZXldLmludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE51bWNoYXI6IGpzb25kYXRhW2tleV0ubnVtY2hhcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHROYXR1cmU6IGpzb25kYXRhW2tleV0ubmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEJpbmFyeToganNvbmRhdGFba2V5XS5iaW5hcnlcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHRydWUsIG9iajEsIGpzb25kYXRhW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICBhbGxOb2Rlcy5wdXNoKG9iajEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNjYWZmb2xkaW5nUHVzaChyQ2FsbFswXSk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlS2V5LnB1c2gobmV3VmFyKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChhbGxOb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGZha2VDbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBwYW5lbFBsb3RzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbE5vZGVzW2ldLnBsb3R0eXBlID09PSBcImNvbnRpbnVvdXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2l0eU5vZGUoYWxsTm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFsbE5vZGVzW2ldLnBsb3R0eXBlID09PSBcImJhclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJzTm9kZShhbGxOb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2hvd0xvZygndHJhbnNmb3JtJywgckNhbGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtRmFpbChidG4pIHtcbiAgICAgICAgYWxlcnQoXCJ0cmFuc2Zvcm0gZmFpbFwiKTtcbiAgICAgICAgZXN0aW1hdGVMYWRkYS5zdG9wKCk7XG4gICAgfVxuXG4gICAgZXN0aW1hdGVMYWRkYS5zdGFydCgpOyAvLyBzdGFydCBzcGlubmVyXG4gICAgbWFrZUNvcnNSZXF1ZXN0KHVybGNhbGwsIGJ0biwgdHJhbnNmb3JtU3VjY2VzcywgdHJhbnNmb3JtRmFpbCwgc29sYWpzb25vdXQpO1xufVxuXG5mdW5jdGlvbiBzY2FmZm9sZGluZ1B1c2godikgeyAvLyBhZGRpbmcgYSB2YXJpYWJsZSB0byB0aGUgdmFyaWFibGUgbGlzdCBhZnRlciBhIHRyYW5zZm9ybWF0aW9uXG4gICAgZDMuc2VsZWN0KFwiI3RhYjFcIilcbiAgICAgICAgLmRhdGEodilcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCAoKSA9PiB2WzBdLnJlcGxhY2UoL1xcVy9nLCBcIl9cIikpXG4gICAgICAgIC50ZXh0KHZbMF0pXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGhleFRvUmdiYShzZWxWYXJDb2xvcikpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1jb250YWluZXJcIiwgXCJib2R5XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJwb3BvdmVyXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10cmlnZ2VyXCIsIFwiaG92ZXJcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLXBsYWNlbWVudFwiLCBcInJpZ2h0XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1odG1sXCIsIFwidHJ1ZVwiKVxuICAgICAgICAuYXR0cihcIm9ubW91c2VvdmVyXCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJvbm1vdXNlb3V0XCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsIFwiU3VtbWFyeSBTdGF0aXN0aWNzXCIpXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIHZhckNsaWNrKCkgeyAvLyB3ZSd2ZSBhZGRlZCBhIG5ldyB2YXJpYWJsZSwgc28gd2UgbmVlZCB0byBhZGQgdGhlIGxpc3RlbmVyXG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHpwYXJhbXMuenZhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSBkMy5zZWxlY3QodGhpcykudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZDMucmdiKGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicpKS50b1N0cmluZygpID09IHZhckNvbG9yLnRvU3RyaW5nKCkpIHsgLy8gd2UgYXJlIGFkZGluZyBhIHZhclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChmaW5kTm9kZSh0ZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09IDApIG5vZGVzWzBdLnJlZmxleGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGV4VG9SZ2JhKHNlbFZhckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyb3BwaW5nIGEgdmFyaWFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShmaW5kTm9kZSh0ZXh0KS5pbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpY2VMaW5rc0Zvck5vZGUoZmluZE5vZGUodGV4dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaWNlKHRleHQsIFtkdkNvbG9yLCAnemR2J10sIFtjc0NvbG9yLCAnemNyb3NzJ10sIFt0aW1lQ29sb3IsICd6dGltZSddLCBbbm9tQ29sb3IsICd6bm9tJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVJlc2V0KGFsbE5vZGVzW2ZpbmROb2RlSW5kZXgodGV4dCldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFyQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZha2VDbGljaygpO1xuICAgICAgICAgICAgcGFuZWxQbG90cygpO1xuICAgICAgICB9KTtcbiAgICBwb3B1bGF0ZVBvcG92ZXIoKTsgLy8gcGlwZXMgaW4gdGhlIHN1bW1hcnkgc3RhdHNcblxuICAgIC8vIGRyb3AgZG93biBtZW51IGZvciB0cmFuZm9ybWF0aW9uIHRvb2xiYXJcbiAgICBkMy5zZWxlY3QoXCIjdHJhbnNTZWxcIilcbiAgICAgICAgLmRhdGEodilcbiAgICAgICAgLmFwcGVuZChcIm9wdGlvblwiKVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSk7XG59XG5cbi8vIGJlbG93IGZyb20gaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvY29ycy8gZm9yIGNyb3NzLW9yaWdpbiByZXNvdXJjZSBzaGFyaW5nXG4vLyBDcmVhdGUgdGhlIFhIUiBvYmplY3QuXG5mdW5jdGlvbiBjcmVhdGVDT1JTUmVxdWVzdChtZXRob2QsIHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgaWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgIC8vIFhIUiBmb3IgQ2hyb21lL0ZpcmVmb3gvT3BlcmEvU2FmYXJpLlxuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBYRG9tYWluUmVxdWVzdCBmb3IgSUUuXG4gICAgICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ09SUyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICB4aHIgPSBudWxsO1xuICAgIH1cbiAgICAvLyB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIHJldHVybiB4aHI7XG59XG5cbi8vIE1ha2UgdGhlIGFjdHVhbCBDT1JTIHJlcXVlc3QuXG5mdW5jdGlvbiBtYWtlQ29yc1JlcXVlc3QodXJsLCBidG4sIGNhbGxiYWNrLCB3YXJuaW5nY2FsbGJhY2ssIGpzb25zdHJpbmcpIHtcbiAgICB2YXIgeGhyID0gY3JlYXRlQ09SU1JlcXVlc3QoJ1BPU1QnLCB1cmwpO1xuICAgIGlmICgheGhyKSB7XG4gICAgICAgIGFsZXJ0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXNwb25zZSBoYW5kbGVycyBmb3IgYXN5bmNocm9ub3VzIGxvYWRcbiAgICAvLyBvbmxvYWQgb3Igb25yZWFkeXN0YXRlY2hhbmdlP1xuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGV4dCBcIiwgdGV4dCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZSh0ZXh0KTsgLy8gc2hvdWxkIHdyYXAgaW4gdHJ5IC8gY2F0Y2hcbiAgICAgICAgICAgIHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKGpzb24pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGVzdGltYXRlTGFkZGEuc3RvcCgpO1xuICAgICAgICAgICAgc2VsZWN0TGFkZGEuc3RvcCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIGFsZXJ0KCdFcnJvcjogQ291bGQgbm90IHBhcnNlIGluY29taW5nIEpTT04uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmFtZXNbMF0gPT0gXCJ3YXJuaW5nXCIpIHtcbiAgICAgICAgICAgIHdhcm5pbmdjYWxsYmFjayhidG4pO1xuICAgICAgICAgICAgYWxlcnQoXCJXYXJuaW5nOiBcIiArIGpzb24ud2FybmluZyk7XG4gICAgICAgIH0gZWxzZSBjYWxsYmFjayhidG4sIGpzb24pO1xuICAgIH07XG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gbm90ZTogeGhyLnJlYWR5c3RhdGUgc2hvdWxkIGJlIDQsIGFuZCBzdGF0dXMgc2hvdWxkIGJlIDIwMC4gIGEgc3RhdHVzIG9mIDAgb2NjdXJzIHdoZW4gdGhlIHVybCBiZWNvbWVzIHRvbyBsYXJnZVxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAwKSBhbGVydCgnVGhlcmUgd2FzIGFuIGVycm9yIG1ha2luZyB0aGUgcmVxdWVzdC4geG1saHR0cHJlcXVlc3Qgc3RhdHVzIGlzIDAuJyk7XG4gICAgICAgIGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlICE9IDQpIGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgbWFraW5nIHRoZSByZXF1ZXN0LiB4bWxodHRwcmVxdWVzdCByZWFkeXN0YXRlIGlzIG5vdCA0LicpO1xuICAgICAgICBlbHNlIGFsZXJ0KCdXb29wcywgdGhlcmUgd2FzIGFuIGVycm9yIG1ha2luZyB0aGUgcmVxdWVzdC4nKTtcbiAgICAgICAgY29uc29sZS5sb2coeGhyKTtcbiAgICAgICAgZXN0aW1hdGVMYWRkYS5zdG9wKCk7XG4gICAgICAgIHNlbGVjdExhZGRhLnN0b3AoKTtcbiAgICB9O1xuICAgIHhoci5zZW5kKGpzb25zdHJpbmcpO1xufVxuXG5mdW5jdGlvbiBsZWdlbmQoYykge1xuICAgIGJvcmRlclN0YXRlKCk7XG4gICAgbS5yZWRyYXcoKTtcbn1cblxuLy8gcHJvZ3JhbW1hdGljYWxseSBkZXNlbGVjdGluZyBldmVyeSBzZWxlY3RlZCB2YXJpYWJsZS4uLlxuZXhwb3J0IGZ1bmN0aW9uIGVyYXNlKCkge1xuICAgIGxlZnRwYW5lbE1lZGl1bSgpO1xuICAgIHJpZ2h0cGFuZWxNZWRpdW0oKTtcbiAgICB0YWJMZWZ0KCd0YWIxJyk7XG4gICAgalF1ZXJ5LmZuLmQzQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oaSwgZSkge1xuICAgICAgICAgICAgdmFyIG15Y29sID0gZDMucmdiKHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgICAgIGlmIChteWNvbC50b1N0cmluZygpID09PSB2YXJDb2xvci50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO1xuICAgICAgICAgICAgZXZ0LmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgICAgICAgICBlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAkKFwiI3RhYjFcIikuZDNDbGljaygpO1xufVxuXG4vLyBodHRwOi8vd3d3LnR1dG9yaWFsczJsZWFybi5jb20vdHV0b3JpYWxzL3NjcmlwdHMvamF2YXNjcmlwdC94bWwtcGFyc2VyLWphdmFzY3JpcHQuaHRtbFxuZnVuY3Rpb24gbG9hZFhNTERvYyhYTUxuYW1lKSB7XG4gICAgdmFyIHhtbERvYztcbiAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgIHhtbERvYyA9IG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeG1sRG9jLm9wZW4oXCJHRVRcIiwgWE1MbmFtZSwgZmFsc2UpO1xuICAgICAgICB4bWxEb2Muc2VuZChcIlwiKTtcbiAgICAgICAgcmV0dXJuIHhtbERvYy5yZXNwb25zZVhNTDtcbiAgICB9XG4gICAgLy8gSUUgNSBhbmQgSUUgNlxuICAgIGVsc2UgaWYgKEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpKSB7XG4gICAgICAgIHhtbERvYyA9IG5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTERPTVwiKTtcbiAgICAgICAgeG1sRG9jLmFzeW5jID0gZmFsc2U7XG4gICAgICAgIHhtbERvYy5sb2FkKFhNTG5hbWUpO1xuICAgICAgICByZXR1cm4geG1sRG9jO1xuICAgIH1cbiAgICBhbGVydChcIkVycm9yIGxvYWRpbmcgZG9jdW1lbnQhXCIpO1xuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFiTGVmdCh0YWIpIHtcbiAgICBieUlkKCd0YWIxJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBieUlkKCd0YWIyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBieUlkKCd0YWIzJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBieUlkKHRhYikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgaWYgKHRhYiAhPSAndGFiMycpIHtcbiAgICAgICAgc3Vic2V0ID0gdGFiID09ICd0YWIyJztcbiAgICAgICAgc3VtbWFyeUhvbGQgPSBmYWxzZTtcbiAgICB9XG4gICAgbGVmdHRhYiA9IHRhYjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhYlJpZ2h0KHRhYmlkKSB7XG4gICAgaWYgKHRhYmlkID09IFwiYnRuTW9kZWxzXCIpIHtcbiAgICAgICAgZDMuc2VsZWN0KFwiI3JpZ2h0cGFuZWxcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzaWRlcGFuZWwgY29udGFpbmVyIGNsZWFyZml4XCIpO1xuICAgIH0gZWxzZSBpZiAodGFiaWQgPT0gXCJidG5TZXR4XCIpIHtcbiAgICAgICAgaWYgKHJpZ2h0dGFiID09IFwiYnRuU2V0eFwiIHx8IGQzLnNlbGVjdChcIiNyaWdodHBhbmVsXCIpLmF0dHIoXCJjbGFzc1wiKSA9PSBcInNpZGVwYW5lbCBjb250YWluZXIgY2xlYXJmaXhcIilcbiAgICAgICAgICAgIHRvZ2dsZVIoKTtcbiAgICB9IGVsc2UgaWYgKHRhYmlkID09IFwiYnRuUmVzdWx0c1wiKSB7XG4gICAgICAgIGlmIChlc3RpbWF0ZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiNyaWdodHBhbmVsXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNpZGVwYW5lbCBjb250YWluZXIgY2xlYXJmaXhcIik7XG4gICAgICAgIH0gZWxzZSBpZiAocmlnaHR0YWIgPT0gXCJidG5SZXN1bHRzXCIgfHwgZDMuc2VsZWN0KFwiI3JpZ2h0cGFuZWxcIikuYXR0cihcImNsYXNzXCIpID09IFwic2lkZXBhbmVsIGNvbnRhaW5lciBjbGVhcmZpeFwiKVxuICAgICAgICAgICAgdG9nZ2xlUigpO1xuICAgIH1cblxuICAgIHJpZ2h0dGFiID0gdGFiaWQ7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVSKCkge1xuICAgICAgICBkMy5zZWxlY3QoXCIjcmlnaHRwYW5lbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSA9PSBcInNpZGVwYW5lbCBjb250YWluZXIgY2xlYXJmaXggZXhwYW5kcGFuZWxcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic2lkZXBhbmVsIGNvbnRhaW5lciBjbGVhcmZpeFwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBcInNpZGVwYW5lbCBjb250YWluZXIgY2xlYXJmaXggZXhwYW5kcGFuZWxcIjtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGxldCBzdW1tYXJ5ID0ge2RhdGE6IFtdfTtcblxuZnVuY3Rpb24gdmFyU3VtbWFyeShkKSB7XG4gICAgbGV0IHQxID0gJ01lYW46LCBNZWRpYW46LCBNb3N0IEZyZXE6LCBPY2N1cnJlbmNlczosIE1lZGlhbiBGcmVxOiwgT2NjdXJyZW5jZXM6LCBMZWFzdCBGcmVxOiwgT2NjdXJyZW5jZXM6LCBTdGQgRGV2OiwgTWluaW11bTosIE1heGltdW06LCBJbnZhbGlkOiwgVmFsaWQ6LCBVbmlxdWVzOiwgSGVyZmluZGFobCcuc3BsaXQoJywgJyk7XG4gICAgbGV0IHJpbnQgPSBkMy5mb3JtYXQoJ3InKTtcbiAgICBsZXQgc3RyID0gKHgsIHApID0+ICgreCkudG9QcmVjaXNpb24ocCB8fCA0KS50b1N0cmluZygpO1xuICAgIGxldCB0MiA9IHByaXYgJiYgZC5tZWFuQ0kgP1xuICAgICAgICBbc3RyKGQubWVhbiwgMikgKyAnICgnICsgc3RyKGQubWVhbkNJLmxvd2VyQm91bmQsIDIpICsgJyAtICcgKyBzdHIoZC5tZWFuQ0kudXBwZXJCb3VuZCwgMikgKyAnKScsIHN0cihkLm1lZGlhbiksIGQubW9kZSwgcmludChkLmZyZXFtb2RlKSwgZC5taWQsIHJpbnQoZC5mcmVxbWlkKSwgZC5mZXdlc3QsIHJpbnQoZC5mcmVxZmV3ZXN0KSwgc3RyKGQuc2QpLCBzdHIoZC5taW4pLCBzdHIoZC5tYXgpLCByaW50KGQuaW52YWxpZCksIHJpbnQoZC52YWxpZCksIHJpbnQoZC51bmlxdWVzKSwgc3RyKGQuaGVyZmluZGFobCldIDpcbiAgICAgICAgW3N0cihkLm1lYW4pLCBzdHIoZC5tZWRpYW4pLCBkLm1vZGUsIHJpbnQoZC5mcmVxbW9kZSksIGQubWlkLCByaW50KGQuZnJlcW1pZCksIGQuZmV3ZXN0LCByaW50KGQuZnJlcWZld2VzdCksIHN0cihkLnNkKSwgc3RyKGQubWluKSwgc3RyKGQubWF4KSwgcmludChkLmludmFsaWQpLCByaW50KGQudmFsaWQpLCByaW50KGQudW5pcXVlcyksIHN0cihkLmhlcmZpbmRhaGwpXTtcblxuICAgIHN1bW1hcnkuZGF0YSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdDEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHQyW2ldLmluZGV4T2YoJ05hTicpID4gLTEgfHwgdDJbaV0gPT0gJ05BJyB8fCB0MltpXSA9PSAnJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBzdW1tYXJ5LmRhdGEucHVzaChbdDFbaV0sIHQyW2ldXSk7XG4gICAgfTtcblxuICAgIHN1bW1hcnkubmFtZSA9IGQubmFtZTtcbiAgICBzdW1tYXJ5LmxhYmwgPSBkLmxhYmw7XG5cbiAgICBkMy5zZWxlY3QoJyN0YWIzJylcbiAgICAgICAgLnNlbGVjdEFsbCgnc3ZnJylcbiAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgaWYgKCFkLnBsb3R0eXBlKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGQucGxvdHR5cGUgPT0gJ2NvbnRpbnVvdXMnKSBkZW5zaXR5KGQsICd2YXJTdW1tYXJ5JywgcHJpdik7XG4gICAgZWxzZSBpZiAoZC5wbG90dHlwZSA9PSBcImJhclwiKSBiYXJzKGQsICd2YXJTdW1tYXJ5JywgcHJpdik7XG4gICAgZWxzZSBkMy5zZWxlY3QoXCIjdGFiM1wiKSAvLyBubyBncmFwaCB0byBkcmF3LCBidXQgc3RpbGwgbmVlZCB0byByZW1vdmUgcHJldmlvdXMgZ3JhcGhcbiAgICAgICAgLnNlbGVjdEFsbChcInN2Z1wiKVxuICAgICAgICAucmVtb3ZlKCk7XG59XG5cbmZ1bmN0aW9uIHBvcHVsYXRlUG9wb3ZlcigpIHtcbiAgICBkMy5zZWxlY3QoXCIjdGFiMVwiKS5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1jb250ZW50XCIsIGQgPT4gcG9wb3ZlckNvbnRlbnQoYWxsTm9kZXNbZmluZE5vZGVJbmRleChkKV0pKTtcbn1cblxuZnVuY3Rpb24gcG9wb3ZlckNvbnRlbnQoZCkge1xuICAgIHZhciByaW50ID0gZDMuZm9ybWF0KFwiclwiKTtcbiAgICB2YXIgdGV4dCA9IFwiXCI7XG4gICAgaWYgKGQubGFibCAhPSBcIlwiKVxuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5MYWJlbDwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz48aT5cIiArIGQubGFibCArIFwiPC9pPjwvcD48L2Rpdj48L2Rpdj5cIjtcbiAgICBpZiAoZC5tZWFuICE9IFwiTkFcIikge1xuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NZWFuPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiO1xuICAgICAgICB0ZXh0ICs9IHByaXYgJiYgZC5tZWFuQ0kgP1xuICAgICAgICAgICAgKCtkLm1lYW4pLnRvUHJlY2lzaW9uKDIpLnRvU3RyaW5nKCkgKyBcIiAoXCIgKyAoK2QubWVhbkNJLmxvd2VyQm91bmQpLnRvUHJlY2lzaW9uKDIpLnRvU3RyaW5nKCkgKyBcIiAtIFwiICsgKCtkLm1lYW5DSS51cHBlckJvdW5kKS50b1ByZWNpc2lvbigyKS50b1N0cmluZygpICsgXCIpXCIgOlxuICAgICAgICAgICAgKCtkLm1lYW4pLnRvUHJlY2lzaW9uKDQpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRleHQgKz0gXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgfVxuICAgIGlmIChkLm1lZGlhbiAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk1lZGlhbjwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArICgrZC5tZWRpYW4pLnRvUHJlY2lzaW9uKDQpLnRvU3RyaW5nKCkgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIjtcbiAgICBpZiAoZC5tb2RlICE9IFwiTkFcIilcbiAgICAgICAgdGV4dCArPSBcIjxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPjxsYWJlbCBjbGFzcz0nY29sLXNtLTQgY29udHJvbC1sYWJlbCc+TW9zdCBGcmVxPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgZC5tb2RlICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuZnJlcW1vZGUgIT0gXCJOQVwiKVxuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5PY2N1cnJlbmNlczwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArIHJpbnQoZC5mcmVxbW9kZSkgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIjtcbiAgICBpZiAoZC5taWQgIT0gXCJOQVwiKVxuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NZWRpYW4gRnJlcTwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArIGQubWlkICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuZnJlcW1pZCAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk9jY3VycmVuY2VzPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgcmludChkLmZyZXFtaWQpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuZmV3ZXN0ICE9IFwiTkFcIilcbiAgICAgICAgdGV4dCArPSBcIjxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPjxsYWJlbCBjbGFzcz0nY29sLXNtLTQgY29udHJvbC1sYWJlbCc+TGVhc3QgRnJlcTwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArIGQuZmV3ZXN0ICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuZnJlcWZld2VzdCAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk9jY3VycmVuY2VzPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgcmludChkLmZyZXFmZXdlc3QpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuc2QgIT0gXCJOQVwiKVxuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5TdGFuZCBEZXY8L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyAoK2Quc2QpLnRvUHJlY2lzaW9uKDQpLnRvU3RyaW5nKCkgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIjtcbiAgICBpZiAoZC5tYXggIT0gXCJOQVwiKVxuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NYXhpbXVtPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgKCtkLm1heCkudG9QcmVjaXNpb24oNCkudG9TdHJpbmcoKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiO1xuICAgIGlmIChkLm1pbiAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk1pbmltdW08L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyAoK2QubWluKS50b1ByZWNpc2lvbig0KS50b1N0cmluZygpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuaW52YWxpZCAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPkludmFsaWQ8L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyByaW50KGQuaW52YWxpZCkgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIjtcbiAgICBpZiAoZC52YWxpZCAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPlZhbGlkPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgcmludChkLnZhbGlkKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiO1xuICAgIGlmIChkLnVuaXF1ZXMgIT0gXCJOQVwiKVxuICAgICAgICB0ZXh0ICs9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5VbmlxdWVzPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgcmludChkLnVuaXF1ZXMpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKGQuaGVyZmluZGFobCAhPSBcIk5BXCIpXG4gICAgICAgIHRleHQgKz0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPkhlcmZpbmRhaGw8L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyAoK2QuaGVyZmluZGFobCkudG9QcmVjaXNpb24oNCkudG9TdHJpbmcoKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiO1xuICAgIHJldHVybiB0ZXh0O1xufVxuXG5mdW5jdGlvbiBwb3B1cFgoZCkge1xuICAgIHZhciB0c2YgPSBkMy5mb3JtYXQoXCIuNHJcIik7XG4gICAgdmFyIHJpbnQgPSBkMy5mb3JtYXQoXCJyXCIpO1xuICAgIC8vQ3JlYXRlIHRoZSB0b29sdGlwIGxhYmVsXG4gICAgZDMuc2VsZWN0KFwiI3Rvb2x0aXBcIilcbiAgICAgICAgLnN0eWxlKFwibGVmdFwiLCB0ZW1wWCArIFwicHhcIilcbiAgICAgICAgLnN0eWxlKFwidG9wXCIsIHRlbXBZICsgXCJweFwiKVxuICAgICAgICAuc2VsZWN0KFwiI3Rvb2x0aXB0ZXh0XCIpXG4gICAgICAgIC5odG1sKFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NZWFuPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgdHNmKGQubWVhbikgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIiArXG4gICAgICAgICAgICBcIjxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPjxsYWJlbCBjbGFzcz0nY29sLXNtLTQgY29udHJvbC1sYWJlbCc+TWVkaWFuPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgdHNmKGQubWVkaWFuKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5Nb2RlPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgZC5tb2RlICsgXCI8L3A+PC9kaXY+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPlN0YW5kIERldjwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArIHRzZihkLnNkKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NYXhpbXVtPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgdHNmKGQubWF4KSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NaW5pbXVtPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgdHNmKGQubWluKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5WYWxpZDwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArIHJpbnQoZC52YWxpZCkgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIiArXG4gICAgICAgICAgICBcIjxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPjxsYWJlbCBjbGFzcz0nY29sLXNtLTQgY29udHJvbC1sYWJlbCc+SW52YWxpZDwvbGFiZWw+PGRpdiBjbGFzcz0nY29sLXNtLTYnPjxwIGNsYXNzPSdmb3JtLWNvbnRyb2wtc3RhdGljJz5cIiArIHJpbnQoZC5pbnZhbGlkKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiXG4gICAgICAgICk7XG59XG5cbmZ1bmN0aW9uIHBhbmVsUGxvdHMoKSB7XG4gICAgLy8gYnVpbGQgYXJyYXlzIGZyb20gbm9kZXMgaW4gbWFpblxuICAgIGxldCB2YXJzID0gW107XG4gICAgbGV0IGlkcyA9IFtdO1xuICAgIG5vZGVzLmZvckVhY2gobiA9PiB7XG4gICAgICAgIHZhcnMucHVzaChuLm5hbWUucmVwbGFjZSgvXFwofFxcKS9nLCAnJykpO1xuICAgICAgICBpZHMucHVzaChuLmlkKTtcbiAgICB9KTtcblxuICAgIC8vcmVtb3ZlIGFsbCBwbG90cywgY291bGQgYmUgc21hcnRlciBoZXJlXG4gICAgZDMuc2VsZWN0KCcjc2V0eCcpLnNlbGVjdEFsbCgnc3ZnJykucmVtb3ZlKCk7XG4gICAgZDMuc2VsZWN0KCcjdGFiMicpLnNlbGVjdEFsbCgnc3ZnJykucmVtb3ZlKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gYWxsTm9kZXNbaWRzW2ldXTtcbiAgICAgICAgbm9kZS5zZXR4cGxvdCA9IGZhbHNlO1xuICAgICAgICBub2RlLnN1YnNldHBsb3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKG5vZGUucGxvdHR5cGUgPT09IFwiY29udGludW91c1wiICYgbm9kZS5zZXR4cGxvdCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgbm9kZS5zZXR4cGxvdCA9IHRydWU7XG4gICAgICAgICAgICBkZW5zaXR5KG5vZGUsIGRpdiA9IFwic2V0eFwiLCBwcml2KTtcbiAgICAgICAgICAgIG5vZGUuc3Vic2V0cGxvdCA9IHRydWU7XG4gICAgICAgICAgICBkZW5zaXR5KG5vZGUsIGRpdiA9IFwic3Vic2V0XCIsIHByaXYpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUucGxvdHR5cGUgPT09IFwiYmFyXCIgJiBub2RlLnNldHhwbG90ID09IGZhbHNlKSB7XG4gICAgICAgICAgICBub2RlLnNldHhwbG90ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJhcnMobm9kZSwgZGl2ID0gXCJzZXR4XCIsIHByaXYpO1xuICAgICAgICAgICAgbm9kZS5zdWJzZXRwbG90ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJhcnNTdWJzZXQobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkMy5zZWxlY3QoXCIjc2V0eFwiKS5zZWxlY3RBbGwoXCJzdmdcIilcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHJlZ3N0ciA9IC8oLispX3NldHhfKFxcZCspLztcbiAgICAgICAgICAgIHZhciBteW5hbWUgPSByZWdzdHIuZXhlYyh0aGlzLmlkKTtcbiAgICAgICAgICAgIHZhciBub2RlaWQgPSBteW5hbWVbMl07XG4gICAgICAgICAgICBteW5hbWUgPSBteW5hbWVbMV07XG4gICAgICAgICAgICB2YXIgaiA9IHZhcnMuaW5kZXhPZihteW5hbWUpO1xuICAgICAgICAgICAgaWYgKGogPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tub2RlaWRdLnNldHhwbG90ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBcIiNcIi5jb25jYXQobXluYW1lLCBcIl9zZXR4X1wiLCBub2RlaWQpO1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0ZW1wKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgYWxsTm9kZXNbbm9kZWlkXS5zdWJzZXRwbG90ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGVtcCA9IFwiI1wiLmNvbmNhdChteW5hbWUsIFwiX3RhYjJfXCIsIG5vZGVpZCk7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRlbXApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5cbi8vIGVhc3kgZnVuY3Rpb25zIHRvIGNvbGxhcHNlIHBhbmVscyB0byBiYXNlXG5mdW5jdGlvbiByaWdodHBhbmVsTWVkaXVtKCkge1xuICAgIGQzLnNlbGVjdChcIiNyaWdodHBhbmVsXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzaWRlcGFuZWwgY29udGFpbmVyIGNsZWFyZml4XCIpO1xufVxuXG5mdW5jdGlvbiBsZWZ0cGFuZWxNZWRpdW0oKSB7XG4gICAgZDMuc2VsZWN0KFwiI2xlZnRwYW5lbFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2lkZXBhbmVsIGNvbnRhaW5lciBjbGVhcmZpeFwiKTtcbn1cblxuLy8gY29udmVydHMgY29sb3IgY29kZXNcbmZ1bmN0aW9uIGhleFRvUmdiYShoZXgpIHtcbiAgICB2YXIgaW50ID0gcGFyc2VJbnQoaGV4LnJlcGxhY2UoJyMnLCAnJyksIDE2KTtcbiAgICByZXR1cm4gYHJnYmEoJHtbKGludCA+PiAxNikgJiAyNTUsIChpbnQgPj4gOCkgJiAyNTUsIGludCAmIDI1NSwgJzAuNSddLmpvaW4oJywnKX0pYDtcbn1cblxuLy8gdGFrZXMgbm9kZSBhbmQgY29sb3IgYW5kIHVwZGF0ZXMgenBhcmFtc1xuZnVuY3Rpb24gc2V0Q29sb3JzKG4sIGMpIHtcbiAgICBpZiAobi5zdHJva2VXaWR0aCA9PSAnMScpIHtcbiAgICAgICAgLy8gYWRkaW5nIHRpbWUsIGNzLCBkdiwgbm9tIHRvIG5vZGUgd2l0aCBubyBzdHJva2VcbiAgICAgICAgbi5zdHJva2VXaWR0aCA9ICc0JztcbiAgICAgICAgbi5zdHJva2VDb2xvciA9IGM7XG4gICAgICAgIG4ubm9kZUNvbCA9IHRhZ2dlZENvbG9yO1xuICAgICAgICBsZXQgcHVzaCA9IChbY29sb3IsIGtleV0pID0+IHtcbiAgICAgICAgICAgIGlmIChjb2xvciAhPSBjKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHpwYXJhbXNba2V5XSA9IEFycmF5LmlzQXJyYXkoenBhcmFtc1trZXldKSA/IHpwYXJhbXNba2V5XSA6IFtdO1xuICAgICAgICAgICAgenBhcmFtc1trZXldLnB1c2gobi5uYW1lKTtcbiAgICAgICAgICAgIGlmIChrZXkgPT0gJ3pub20nKSB7XG4gICAgICAgICAgICAgICAgYWxsTm9kZXNbZmluZE5vZGVJbmRleChuLm5hbWUpXS5uYXR1cmUgPSBcIm5vbWluYWxcIjtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0obi5uYW1lLCB0ID0gbnVsbCwgdHlwZVRyYW5zZm9ybSA9IHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBbW2R2Q29sb3IsICd6ZHYnXSwgW2NzQ29sb3IsICd6Y3Jvc3MnXSwgW3RpbWVDb2xvciwgJ3p0aW1lJ10sIFtub21Db2xvciwgJ3pub20nXV0uZm9yRWFjaChwdXNoKTtcbiAgICAgICAgZDMuc2VsZWN0KFwiI3RhYjFcIikuc2VsZWN0KFwicCNcIi5jb25jYXQobi5uYW1lKSlcbiAgICAgICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGhleFRvUmdiYShjKSk7XG4gICAgfSBlbHNlIGlmIChuLnN0cm9rZVdpZHRoID09ICc0Jykge1xuICAgICAgICBpZiAoYyA9PSBuLnN0cm9rZUNvbG9yKSB7IC8vIGRlc2VsZWN0aW5nIHRpbWUsIGNzLCBkdiwgbm9tXG4gICAgICAgICAgICBuLnN0cm9rZVdpZHRoID0gJzEnO1xuICAgICAgICAgICAgbi5zdHJva2VDb2xvciA9IHNlbFZhckNvbG9yO1xuICAgICAgICAgICAgbi5ub2RlQ29sID0gY29sb3JzKG4uaWQpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI3RhYjFcIikuc2VsZWN0KFwicCNcIi5jb25jYXQobi5uYW1lKSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCBoZXhUb1JnYmEoc2VsVmFyQ29sb3IpKTtcbiAgICAgICAgICAgIHNwbGljZShjLCBuLm5hbWUsIFtkdkNvbG9yLCAnemR2J10sIFtjc0NvbG9yLCAnemNyb3NzJ10sIFt0aW1lQ29sb3IsICd6dGltZSddLCBbbm9tQ29sb3IsICd6bm9tJ10pO1xuICAgICAgICAgICAgaWYgKG5vbUNvbG9yID09IGMgJiYgenBhcmFtcy56bm9tLmluZGV4T2Yobi5uYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgYWxsTm9kZXNbZmluZE5vZGVJbmRleChuLm5hbWUpXS5uYXR1cmUgPSBhbGxOb2Rlc1tmaW5kTm9kZUluZGV4KG4ubmFtZSldLmRlZmF1bHROYXR1cmU7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtKG4ubmFtZSwgdCA9IG51bGwsIHR5cGVUcmFuc2Zvcm0gPSB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gZGVzZWxlY3RpbmcgdGltZSwgY3MsIGR2LCBub20gQU5EIGNoYW5naW5nIGl0IHRvIHRpbWUsIGNzLCBkdiwgbm9tXG4gICAgICAgICAgICBzcGxpY2Uobi5zdHJva2VDb2xvciwgbi5uYW1lLCBbZHZDb2xvciwgJ3pkdiddLCBbY3NDb2xvciwgJ3pjcm9zcyddLCBbdGltZUNvbG9yLCAnenRpbWUnXSwgW25vbUNvbG9yLCAnem5vbSddKTtcbiAgICAgICAgICAgIGlmIChub21Db2xvciA9PSBuLnN0cm9rZUNvbG9yICYmIHpwYXJhbXMuem5vbS5pbmRleE9mKG4ubmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW2ZpbmROb2RlSW5kZXgobi5uYW1lKV0ubmF0dXJlID0gYWxsTm9kZXNbZmluZE5vZGVJbmRleChuLm5hbWUpXS5kZWZhdWx0TmF0dXJlO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybShuLm5hbWUsIHQgPSBudWxsLCB0eXBlVHJhbnNmb3JtID0gdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuLnN0cm9rZUNvbG9yID0gYztcbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiN0YWIxXCIpLnNlbGVjdChcInAjXCIuY29uY2F0KG4ubmFtZSkpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgaGV4VG9SZ2JhKGMpKTtcbiAgICAgICAgICAgIGlmIChkdkNvbG9yID09IGMpIHpwYXJhbXMuemR2LnB1c2gobi5uYW1lKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNzQ29sb3IgPT0gYykgenBhcmFtcy56Y3Jvc3MucHVzaChuLm5hbWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAodGltZUNvbG9yID09IGMpIHpwYXJhbXMuenRpbWUucHVzaChuLm5hbWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAobm9tQ29sb3IgPT0gYykge1xuICAgICAgICAgICAgICAgIHpwYXJhbXMuem5vbS5wdXNoKG4ubmFtZSk7XG4gICAgICAgICAgICAgICAgYWxsTm9kZXNbZmluZE5vZGVJbmRleChuLm5hbWUpXS5uYXR1cmUgPSBcIm5vbWluYWxcIjtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0obi5uYW1lLCB0ID0gbnVsbCwgdHlwZVRyYW5zZm9ybSA9IHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBib3JkZXJTdGF0ZSgpIHtcbiAgICB6cGFyYW1zLnpkdi5sZW5ndGggPiAwID9cbiAgICAgICAgJCgnI2R2QnV0dG9uIC5yZWN0Q29sb3Igc3ZnIGNpcmNsZScpLmF0dHIoJ3N0cm9rZScsIGR2Q29sb3IpIDpcbiAgICAgICAgJCgnI2R2QnV0dG9uJykuY3NzKCdib3JkZXItY29sb3InLCAnI2NjYycpO1xuICAgIHpwYXJhbXMuemNyb3NzLmxlbmd0aCA+IDAgP1xuICAgICAgICAkKCcjY3NCdXR0b24gLnJlY3RDb2xvciBzdmcgY2lyY2xlJykuYXR0cignc3Ryb2tlJywgY3NDb2xvcikgOlxuICAgICAgICAkKCcjY3NCdXR0b24nKS5jc3MoJ2JvcmRlci1jb2xvcicsICcjY2NjJyk7XG4gICAgenBhcmFtcy56dGltZS5sZW5ndGggPiAwID9cbiAgICAgICAgJCgnI3RpbWVCdXR0b24gLnJlY3RDb2xvciBzdmcgY2lyY2xlJykuYXR0cignc3Ryb2tlJywgdGltZUNvbG9yKSA6XG4gICAgICAgICQoJyN0aW1lQnV0dG9uJykuY3NzKCdib3JkZXItY29sb3InLCAnI2NjYycpO1xuICAgIHpwYXJhbXMuem5vbS5sZW5ndGggPiAwID9cbiAgICAgICAgJCgnI25vbUJ1dHRvbiAucmVjdENvbG9yIHN2ZyBjaXJjbGUnKS5hdHRyKCdzdHJva2UnLCBub21Db2xvcikgOlxuICAgICAgICAkKCcjbm9tQnV0dG9uJykuY3NzKCdib3JkZXItY29sb3InLCAnI2NjYycpO1xufVxuXG4vLyBzbWFsbCBhcHBlYXJhbmNlIHJlc2V0cywgYnV0IHBlcmhhcHMgdGhpcyB3aWxsIGJlY29tZSBhIGhhcmQgcmVzZXQgYmFjayB0byBhbGwgb3JpZ2luYWwgYWxsTm9kZSB2YWx1ZXM/XG5mdW5jdGlvbiBub2RlUmVzZXQobikge1xuICAgIG4uc3Ryb2tlQ29sb3IgPSBzZWxWYXJDb2xvcjtcbiAgICBuLnN0cm9rZVdpZHRoID0gXCIxXCI7XG4gICAgbi5ub2RlQ29sID0gbi5iYXNlQ29sO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2V0U2VsZWN0KGJ0bikge1xuICAgIGlmIChkYXRhdXJsKVxuICAgICAgICB6cGFyYW1zLnpkYXRhdXJsID0gZGF0YXVybDtcbiAgICBpZiAocHJvZHVjdGlvbiAmJiB6cGFyYW1zLnpzZXNzaW9uaWQgPT0gXCJcIikge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IERhdGEgZG93bmxvYWQgaXMgbm90IGNvbXBsZXRlLiBUcnkgYWdhaW4gc29vbi5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgenBhcmFtcy56dmFycyA9IFtdO1xuICAgIHpwYXJhbXMuenBsb3QgPSBbXTtcbiAgICB2YXIgc3Vic2V0RW1wdHkgPSB0cnVlO1xuICAgIC8vIGlzIHRoaXMgdGhlIHNhbWUgYXMgelBvcCgpP1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHsgLy8gcG9wdWxhdGUgenZhcnMgYW5kIHpzdWJzZXQgYXJyYXlzXG4gICAgICAgIHpwYXJhbXMuenZhcnMucHVzaChub2Rlc1tqXS5uYW1lKTtcbiAgICAgICAgdmFyIHRlbXAgPSBub2Rlc1tqXS5pZDtcbiAgICAgICAgenBhcmFtcy56c3Vic2V0W2pdID0gYWxsTm9kZXNbdGVtcF0uc3Vic2V0cmFuZ2U7XG4gICAgICAgIGlmICh6cGFyYW1zLnpzdWJzZXRbal0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHpwYXJhbXMuenN1YnNldFtqXVswXSAhPSBcIlwiKVxuICAgICAgICAgICAgICAgIHpwYXJhbXMuenN1YnNldFtqXVswXSA9IE51bWJlcih6cGFyYW1zLnpzdWJzZXRbal1bMF0pO1xuICAgICAgICAgICAgaWYgKHpwYXJhbXMuenN1YnNldFtqXVsxXSAhPSBcIlwiKVxuICAgICAgICAgICAgICAgIHpwYXJhbXMuenN1YnNldFtqXVsxXSA9IE51bWJlcih6cGFyYW1zLnpzdWJzZXRbal1bMV0pO1xuICAgICAgICB9XG4gICAgICAgIHpwYXJhbXMuenBsb3QucHVzaChhbGxOb2Rlc1t0ZW1wXS5wbG90dHlwZSk7XG4gICAgICAgIGlmICh6cGFyYW1zLnpzdWJzZXRbal1bMV0gIT0gXCJcIilcbiAgICAgICAgICAgIHN1YnNldEVtcHR5ID0gZmFsc2U7IC8vIG9ubHkgbmVlZCB0byBjaGVjayBvbmVcbiAgICB9XG5cbiAgICBpZiAoc3Vic2V0RW1wdHkgPT0gdHJ1ZSkge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IE5vIG5ldyBzdWJzZXQgc2VsZWN0ZWQuXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG91dHR5cGVzID0gW107XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBhbGxOb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBvdXR0eXBlcy5wdXNoKHtcbiAgICAgICAgICAgIHZhcm5hbWVzVHlwZXM6IGFsbE5vZGVzW2pdLm5hbWUsXG4gICAgICAgICAgICBuYXR1cmU6IGFsbE5vZGVzW2pdLm5hdHVyZSxcbiAgICAgICAgICAgIG51bWNoYXI6IGFsbE5vZGVzW2pdLm51bWNoYXIsXG4gICAgICAgICAgICBiaW5hcnk6IGFsbE5vZGVzW2pdLmJpbmFyeSxcbiAgICAgICAgICAgIGludGVydmFsOiBhbGxOb2Rlc1tqXS5pbnRlcnZhbFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc3Vic2V0c3R1ZmYgPSB7XG4gICAgICAgIHpkYXRhdXJsOiB6cGFyYW1zLnpkYXRhdXJsLFxuICAgICAgICB6dmFyczogenBhcmFtcy56dmFycyxcbiAgICAgICAgenN1YnNldDogenBhcmFtcy56c3Vic2V0LFxuICAgICAgICB6c2Vzc2lvbmlkOiB6cGFyYW1zLnpzZXNzaW9uaWQsXG4gICAgICAgIHpwbG90OiB6cGFyYW1zLnpwbG90LFxuICAgICAgICBjYWxsSGlzdG9yeTogY2FsbEhpc3RvcnksXG4gICAgICAgIHR5cGVTdHVmZjogb3V0dHlwZXNcbiAgICB9O1xuXG4gICAgdmFyIGpzb25vdXQgPSBKU09OLnN0cmluZ2lmeShzdWJzZXRzdHVmZik7XG4gICAgdmFyIHVybGNhbGwgPSByYXBwVVJMICsgXCJzdWJzZXRhcHBcIjtcbiAgICB2YXIgc29sYWpzb25vdXQgPSBcInNvbGFKU09OPVwiICsganNvbm91dDtcbiAgICBjb25zb2xlLmxvZyhcInVybGNhbGwgb3V0OiBcIiwgdXJsY2FsbCk7XG4gICAgY29uc29sZS5sb2coXCJQT1NUIG91dDogXCIsIHNvbGFqc29ub3V0KTtcblxuICAgIGZ1bmN0aW9uIHN1YnNldFNlbGVjdFN1Y2Nlc3MoYnRuLCBqc29uKSB7XG4gICAgICAgIHNlbGVjdExhZGRhLnN0b3AoKTsgLy8gc3RvcCBtb3Rpb25cbiAgICAgICAgJChcIiNidG5WYXJpYWJsZXNcIikudHJpZ2dlcihcImNsaWNrXCIpOyAvLyBwcm9ncmFtbWF0aWMgY2xpY2tzXG4gICAgICAgICQoXCIjYnRuTW9kZWxzXCIpLnRyaWdnZXIoXCJjbGlja1wiKTtcblxuICAgICAgICB2YXIgZ3JheU91dHMgPSBbXTtcbiAgICAgICAgdmFyIHJDYWxsID0gW107XG4gICAgICAgIHJDYWxsWzBdID0ganNvbi5jYWxsO1xuXG4gICAgICAgIC8vIHN0b3JlIGNvbnRlbnRzIG9mIHRoZSBwcmUtc3Vic2V0IHNwYWNlXG4gICAgICAgIHpQb3AoKTtcbiAgICAgICAgdmFyIG15Tm9kZXMgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCBhbGxOb2Rlcyk7XG4gICAgICAgIHZhciBteVBhcmFtcyA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIHpwYXJhbXMpO1xuICAgICAgICB2YXIgbXlUcmFucyA9IGpRdWVyeS5leHRlbmQodHJ1ZSwgW10sIHRyYW5zKTtcbiAgICAgICAgdmFyIG15Rm9yY2UgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCBmb3JjZXRvZ2dsZSk7XG4gICAgICAgIHZhciBteVByZXByb2Nlc3MgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIHt9LCBwcmVwcm9jZXNzKTtcbiAgICAgICAgdmFyIG15TG9nID0galF1ZXJ5LmV4dGVuZCh0cnVlLCBbXSwgbG9nQXJyYXkpO1xuICAgICAgICB2YXIgbXlIaXN0b3J5ID0galF1ZXJ5LmV4dGVuZCh0cnVlLCBbXSwgY2FsbEhpc3RvcnkpO1xuXG4gICAgICAgIHNwYWNlc1tteXNwYWNlXSA9IHtcbiAgICAgICAgICAgIFwiYWxsTm9kZXNcIjogbXlOb2RlcyxcbiAgICAgICAgICAgIFwienBhcmFtc1wiOiBteVBhcmFtcyxcbiAgICAgICAgICAgIFwidHJhbnNcIjogbXlUcmFucyxcbiAgICAgICAgICAgIFwiZm9yY2VcIjogbXlGb3JjZSxcbiAgICAgICAgICAgIFwicHJlcHJvY2Vzc1wiOiBteVByZXByb2Nlc3MsXG4gICAgICAgICAgICBcImxvZ0FycmF5XCI6IG15TG9nLFxuICAgICAgICAgICAgXCJjYWxsSGlzdG9yeVwiOiBteUhpc3RvcnlcbiAgICAgICAgfTtcblxuICAgICAgICAvLyByZW1vdmUgcHJlLXN1YnNldCBzdmdcbiAgICAgICAgdmFyIHNlbGVjdE1lID0gXCIjbVwiLmNvbmNhdChteXNwYWNlKTtcbiAgICAgICAgZDMuc2VsZWN0KHNlbGVjdE1lKS5hdHRyKCdjbGFzcycsICdpdGVtJyk7XG4gICAgICAgIHNlbGVjdE1lID0gXCIjd2hpdGVzcGFjZVwiLmNvbmNhdChteXNwYWNlKTtcbiAgICAgICAgZDMuc2VsZWN0KHNlbGVjdE1lKS5yZW1vdmUoKTtcblxuICAgICAgICBteXNwYWNlID0gc3BhY2VzLmxlbmd0aDtcbiAgICAgICAgY2FsbEhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICBmdW5jOiBcInN1YnNldFwiLFxuICAgICAgICAgICAgenZhcnM6IGpRdWVyeS5leHRlbmQodHJ1ZSwgW10sIHpwYXJhbXMuenZhcnMpLFxuICAgICAgICAgICAgenN1YnNldDogalF1ZXJ5LmV4dGVuZCh0cnVlLCBbXSwgenBhcmFtcy56c3Vic2V0KSxcbiAgICAgICAgICAgIHpwbG90OiBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCB6cGFyYW1zLnpwbG90KVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgdG8gZ3JheSBvdXQgYW5kIHJlbW92ZSBsaXN0ZW5lcnMgZm9yIHZhcmlhYmxlcyB0aGF0IGhhdmUgYmVlbiBzdWJzZXR0ZWQgb3V0IG9mIHRoZSBkYXRhXG4gICAgICAgIGZ1bmN0aW9uIHZhck91dCh2KSB7XG4gICAgICAgICAgICAvLyBpZiBpbiBub2RlcywgcmVtb3ZlIGdyYXkgb3V0IGluIGxlZnQgcGFuZWxcbiAgICAgICAgICAgIC8vIG1ha2UgdW5jbGlja2FibGUgaW4gbGVmdCBwYW5lbFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdE1lID0gdltpXS5yZXBsYWNlKC9cXFcvZywgXCJfXCIpO1xuICAgICAgICAgICAgICAgIGJ5SWQoc2VsZWN0TWUpLnN0eWxlLmNvbG9yID0gaGV4VG9SZ2JhKGdyYXlDb2xvcik7XG4gICAgICAgICAgICAgICAgc2VsZWN0TWUgPSBcInAjXCIuY29uY2F0KHNlbGVjdE1lKTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3Qoc2VsZWN0TWUpXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2hvd0xvZygnc3Vic2V0JywgckNhbGwpO1xuICAgICAgICByZVdyaXRlTG9nKCk7XG5cbiAgICAgICAgZDMuc2VsZWN0KFwiI2lubmVyY2Fyb3VzZWxcIilcbiAgICAgICAgICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnaXRlbSBhY3RpdmUnKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgKCkgPT4gXCJtXCIuY29uY2F0KG15c3BhY2UudG9TdHJpbmcoKSkpXG4gICAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ3doaXRlc3BhY2UnKTtcbiAgICAgICAgc3ZnID0gZDMuc2VsZWN0KFwiI3doaXRlc3BhY2VcIik7XG5cbiAgICAgICAgZDMuanNvbihqc29uLnVybCwgZnVuY3Rpb24oZXJyb3IsIGpzb24pIHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgICAgIHZhciBqc29uZGF0YSA9IGpzb247XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4ganNvbmRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXlJbmRleCA9IGZpbmROb2RlSW5kZXgoa2V5KTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5wbG90eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5wbG90eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5wbG90dmFsdWVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW215SW5kZXhdLnBsb3R0eXBlID0gXCJcIjtcblxuICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQodHJ1ZSwgYWxsTm9kZXNbbXlJbmRleF0sIGpzb25kYXRhW2tleV0pO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW215SW5kZXhdLnN1YnNldHBsb3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5zdWJzZXRyYW5nZSA9IFtcIlwiLCBcIlwiXTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5zZXR4cGxvdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW215SW5kZXhdLnNldHh2YWxzID0gW1wiXCIsIFwiXCJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFsbE5vZGVzW215SW5kZXhdLnZhbGlkID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JheU91dHMucHVzaChhbGxOb2Rlc1tteUluZGV4XS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsTm9kZXNbbXlJbmRleF0uZ3JheW91dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZVBsb3QoKTtcbiAgICAgICAgICAgIHBvcHVsYXRlUG9wb3ZlcigpO1xuICAgICAgICAgICAgbGF5b3V0KHYgPSBcImFkZFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyT3V0KGdyYXlPdXRzKTtcbiAgICB9XG5cbiAgICBzZWxlY3RMYWRkYS5zdGFydCgpOyAvL3N0YXJ0IGJ1dHRvbiBtb3Rpb25cbiAgICBtYWtlQ29yc1JlcXVlc3QodXJsY2FsbCwgYnRuLCBzdWJzZXRTZWxlY3RTdWNjZXNzLCBidG4gPT4gc2VsZWN0TGFkZGEuc3RvcCgpLCBzb2xhanNvbm91dCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRQcmVwcm9jZXNzKHVybCwgcCwgdiwgY2FsbGJhY2spIHtcbiAgICBjb25zb2xlLmxvZyh1cmwpO1xuICAgIGQzLmpzb24odXJsLCAoZXJyLCBqc29uKSA9PiB7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbnNpZGUgcmVhZFByZXByb2Nlc3MgZnVuY3Rpb24nKTtcbiAgICAgICAgY29uc29sZS5sb2coanNvbik7XG5cbiAgICAgICAgcHJpdiA9IGpzb24uZGF0YXNldC5wcml2IHx8IHByaXY7XG4gICAgICAgIC8vIGNvcHkgb2JqZWN0XG4gICAgICAgIE9iamVjdC5rZXlzKGpzb24udmFyaWFibGVzKS5mb3JFYWNoKGsgPT4gcFtrXSA9IGpzb24udmFyaWFibGVzW2tdKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgIH0pO1xufVxuXG4vLyByZW1vdmVzIGFsbCB0aGUgY2hpbGRyZW4gc3ZncyBpbnNpZGUgc3Vic2V0IGFuZCBzZXR4IGRpdnNcbmZ1bmN0aW9uIHJlUGxvdCgpIHtcbiAgICBkMy5zZWxlY3QoJyN0YWIyJylcbiAgICAgICAgLnNlbGVjdEFsbCgnc3ZnJylcbiAgICAgICAgLnJlbW92ZSgpO1xuICAgIGQzLnNlbGVjdCgnI3NldHgnKVxuICAgICAgICAuc2VsZWN0QWxsKCdzdmcnKVxuICAgICAgICAucmVtb3ZlKCk7XG4gICAgYWxsTm9kZXMuZm9yRWFjaChuID0+IG4uc2V0eHBsb3QgPSBuLnN1YnNldHBsb3QgPSBmYWxzZSk7XG59XG5cbmxldCBzaG93TG9nID0gKHZhbCwgckNhbGwpID0+IHtcbiAgICBsb2dBcnJheS5wdXNoKCh2YWwgKyAnOiAnKS5jb25jYXQockNhbGxbMF0pKTtcbiAgICBtLnJlZHJhdygpO1xufVxuXG5mdW5jdGlvbiByZVdyaXRlTG9nKCkge1xuICAgIGQzLnNlbGVjdChcIiNjb2xsYXBzZUxvZyBkaXYucGFuZWwtYm9keVwiKS5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAgIC5yZW1vdmUoKTtcbiAgICBkMy5zZWxlY3QoXCIjY29sbGFwc2VMb2cgZGl2LnBhbmVsLWJvZHlcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAuZGF0YShsb2dBcnJheSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLnRleHQoZCA9PiBkKTtcbn1cblxuLy8gYWN0cyBhcyBpZiB0aGUgdXNlciBjbGlja2VkIGluIHdoaXRlc3BhY2UuIHVzZWZ1bCB3aGVuIHJlc3RhcnQoKSBpcyBvdXRzaWRlIG9mIHNjb3BlXG5mdW5jdGlvbiBmYWtlQ2xpY2soKSB7XG4gICAgdmFyIG15d3MgPSBcIiN3aGl0ZXNwYWNlXCIuY29uY2F0KG15c3BhY2UpO1xuICAgIC8vIGQzIGFuZCBwcm9ncmFtbWF0aWMgZXZlbnRzIGRvbid0IG1lc2ggd2VsbCwgaGVyZSdzIGEgU08gd29ya2Fyb3VuZCB0aGF0IGxvb2tzIGdvb2QgYnV0IHVzZXMganF1ZXJ5Li4uXG4gICAgalF1ZXJ5LmZuLmQzQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWFjaCgoaSwgZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgICAgICBldnQuaW5pdE1vdXNlRXZlbnQoXCJtb3VzZWRvd25cIiwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgICAgICAgICBlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAkKG15d3MpLmQzQ2xpY2soKTtcbiAgICBkMy5zZWxlY3QobXl3cylcbiAgICAgICAgLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbn1cblxuLy8gc2VhcmNodmFyXG4kKFwiI3NlYXJjaHZhclwiKS5yZWFkeShmdW5jdGlvbigpe1xuXHQgICQoXCIjc2VhcmNodmFyXCIpLnZhbCgnJyk7XG59KTtcblxuZnVuY3Rpb24gdG9nKHYpe1xuXHQgIHJldHVybiB2ID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyc7XG59XG5cbiQoZG9jdW1lbnQpLm9uKCdpbnB1dCcsICcjc2VhcmNodmFyJywgZnVuY3Rpb24oKSB7XG4gICAgJCh0aGlzKVt0b2codGhpcy52YWx1ZSldKCd4Jyk7XG59KS5vbignbW91c2Vtb3ZlJywgJy54JywgZnVuY3Rpb24oZSkge1xuICAgICQodGhpcylbdG9nKHRoaXMub2Zmc2V0V2lkdGgtMTggPCBlLmNsaWVudFgtdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KV0oJ29uWCcpO1xufSkub24oJ2NsaWNrJywgJy5vblgnLCBmdW5jdGlvbigpe1xuICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3ggb25YJykudmFsKCcnKS5mb2N1cygpO1xuXHQgIHVwZGF0ZWRhdGEodmFsdWVLZXksMCk7XG59KTtcblxubGV0IFtzcmNoaWQsIHZrZXldID0gW1tdLCBbXV07XG4kKFwiI3NlYXJjaHZhclwiKS5vbihcImtleXVwXCIsIGZ1bmN0aW9uIHNlYXJjaChlKSB7XG5cdFx0JChcIiN0YWIxXCIpLmNoaWxkcmVuKCkucG9wb3ZlcignaGlkZScpO1xuXHQgIGxldCBbZmxhZywgaywgdmtleSwgc3JjaGlkXSA9IFswLCAwLCBbXSwgW11dO1xuXHRcdGlmICgkKHRoaXMpLnZhbCgpID09ICcnKSB7XG5cdFx0XHQgIFtzcmNoaWQsIGZsYWddID0gW1tdLCAwXTtcblx0XHRcdCAgdXBkYXRlZGF0YSh2YWx1ZUtleSwgZmxhZyk7XG5cdFx0XHQgIHJldHVybjtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBub2RlIGluIGFsbE5vZGVzKVxuXHRcdFx0ICBpZiAobm9kZS5uYW1lLmluZGV4T2YoJCh0aGlzKS52YWwoKSkgIT0gLTEpIHNyY2hpZFsrK2tdID0gaTtcblx0XHRmb3IgKGxldCBub2RlIGluIGFsbE5vZGVzKVxuXHRcdFx0ICBpZiAoKG5vZGUubGFibC5pbmRleE9mKCQodGhpcykudmFsKCkpICE9IC0xKSAmJiAoJC5pbkFycmF5KGksIHNyY2hpZCkgPT0gLTEpKSBzcmNoaWRbKytrXSA9IGk7XG5cblx0ICBpZiAoayA9PSAwKSB2a2V5ID0gdmFsdWVLZXk7XG5cdCAgZWxzZSB7XG5cdFx0XHRcdFtmbGFnLCBrLCB2a2V5XSA9IFsxLCAwLCBzcmNoaWQubWFwKHggPT4gdmFsdWVLZXlbeF0pXTtcblx0XHRcdFx0Zm9yIChsZXQgeCBpbiB2YWx1ZUtleSlcblx0XHRcdFx0XHQgIGlmICgkLmluQXJyYXkoeCwgdmtleSkgPT0gLTEpIHZrZXlbKytpXSA9IHg7XG5cdFx0fVxuXHQgIHVwZGF0ZWRhdGEodmtleSwgZmxhZyk7XG59KTtcblxuZnVuY3Rpb24gYWRkbGlzdGVuZXIobm9kZXMpe1xuXHQgIGQzLnNlbGVjdChcIiN0YWIxXCIpLnNlbGVjdEFsbChcInBcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICQoXCJib2R5IGRpdi5wb3BvdmVyXCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwidmFyaWFibGVzXCIpO1xuICAgICAgICAgICAgJChcImJvZHkgZGl2LnBvcG92ZXIgZGl2LnBvcG92ZXItY29udGVudFwiKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImZvcm0taG9yaXpvbnRhbFwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gdmFyQ2xpY2soKXtcbiAgICAgICAgICAgIGlmIChhbGxOb2Rlc1tmaW5kTm9kZUluZGV4KHRoaXMuaWQpXS5ncmF5b3V0KSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJyxmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBteVRleHQgPSBkMy5zZWxlY3QodGhpcykudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXlDb2xvciA9IGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXlTQyA9IGFsbE5vZGVzW2ZpbmROb2RlSW5kZXgobXlUZXh0KV0uc3Ryb2tlQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHZhciBteU5vZGUgPSBhbGxOb2Rlc1tmaW5kTm9kZUluZGV4KHRoaXMuaWQpXTtcblxuICAgICAgICAgICAgICAgICAgICB6cGFyYW1zLnp2YXJzID0gW107IC8vZW1wdHkgdGhlIHp2YXJzIGFycmF5XG4gICAgICAgICAgICAgICAgICAgIGlmKGQzLnJnYihteUNvbG9yKS50b1N0cmluZygpID09PSB2YXJDb2xvci50b1N0cmluZygpKSB7XHQvLyB3ZSBhcmUgYWRkaW5nIGEgdmFyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihub2Rlcy5sZW5ndGg9PTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKGZpbmROb2RlKG15VGV4dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzWzBdLnJlZmxleGl2ZT10cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7bm9kZXMucHVzaChmaW5kTm9kZShteVRleHQpKTt9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihteU5vZGUudGltZT09PVwieWVzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdDb2xvcnMobXlOb2RlLCB0aW1lQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZXhUb1JnYmEodGltZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYobXlOb2RlLm5hdHVyZT09PVwibm9taW5hbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnQ29sb3JzKG15Tm9kZSwgbm9tQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZXhUb1JnYmEobm9tQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gaGV4VG9SZ2JhKHNlbFZhckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZHJvcHBpbmcgYSB2YXJpYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGZpbmROb2RlKG15VGV4dClbXCJpbmRleFwiXSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpY2VMaW5rc0Zvck5vZGUoZmluZE5vZGUobXlUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihteVNDPT1kdkNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR2SW5kZXggPSB6cGFyYW1zLnpkdi5pbmRleE9mKG15VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR2SW5kZXggPiAtMSkgeyB6cGFyYW1zLnpkdi5zcGxpY2UoZHZJbmRleCwgMSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYobXlTQz09Y3NDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjc0luZGV4ID0genBhcmFtcy56Y3Jvc3MuaW5kZXhPZihteVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjc0luZGV4ID4gLTEpIHsgenBhcmFtcy56Y3Jvc3Muc3BsaWNlKGNzSW5kZXgsIDEpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKG15U0M9PXRpbWVDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lSW5kZXggPSB6cGFyYW1zLnp0aW1lLmluZGV4T2YobXlUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZUluZGV4ID4gLTEpIHsgenBhcmFtcy56dGltZS5zcGxpY2UodGltZUluZGV4LCAxKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihteVNDPT1ub21Db2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub21JbmRleCA9IHpwYXJhbXMuem5vbS5pbmRleE9mKG15VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vbUluZGV4ID4gLTEpIHsgenBhcmFtcy56bm9tLnNwbGljZShkdkluZGV4LCAxKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhckNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYW5lbFBsb3RzKCk7XG4gICAgICAgICAgICByZXN0YXJ0KCk7XG4gICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVkYXRhKHZhbCwgZmxhZykge1xuXHQgIGxldCBjbHIgPSAnIzAwMDAwMCc7XG5cdCAgbGV0IGJvcmRlcmNvbCA9IGNscjtcblx0ICB2YXIgYm9yZGVyc3R5bGU9J3NvbGlkJztcbiAgICBsZXQgbm9kZW5hbWVzID0gbm9kZXMubWFwKHggPT4geC5uYW1lKTtcblxuXHQgIGQzLnNlbGVjdChcIiN0YWIxXCIpLnNlbGVjdEFsbChcInBcIikuZGF0YSh2YWx1ZUtleSkucmVtb3ZlKCk7XG5cdCAgZDMuc2VsZWN0KFwiI3RhYjFcIikuc2VsZWN0QWxsKFwicFwiKVxuXHRcdCAgICAuZGF0YSh2YWwpXG5cdFx0ICAgIC5lbnRlcigpXG5cdFx0ICAgIC5hcHBlbmQoXCJwXCIpXG5cdFx0ICAgIC5hdHRyKFwiaWRcIiwgZCA9PiBkLnJlcGxhY2UoL1xcVy9nLCBcIl9cIikpIC8vIHJlcGxhY2Ugbm9uLWFscGhhbnVtZXJpY3MgZm9yIHNlbGVjdGlvbiBwdXJwb3NlcywgcGVyaGFwcyBlbnN1cmUgdGhpcyBpZCBpcyB1bmlxdWUgYnkgYWRkaW5nICdfJyB0byB0aGUgZnJvbnQ/XG5cdFx0ICAgIC50ZXh0KGQgPT4gZClcblx0XHQgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgZCA9PiAkLmluQXJyYXkoZmluZE5vZGUoZCkubmFtZSwgbm9kZW5hbWVzKSA9PSAtMSA/IHZhckNvbG9yIDogaGV4VG9SZ2JhKHNlbFZhckNvbG9yKSlcbiAgICAgICAgLnN0eWxlKCdib3JkZXItc3R5bGUnLCBkID0+ICQuaW5BcnJheShmaW5kTm9kZUluZGV4KGQpLCBzcmNoaWQpICE9IC0xICYmIGZsYWcgPT0gMSA/IGJvcmRlcnN0eWxlIDogbnVsbClcblx0XHRcdCAgLnN0eWxlKCdib3JkZXItY29sb3InLCBkID0+ICQuaW5BcnJheShmaW5kTm9kZUluZGV4KGQpLCBzcmNoaWQpICE9IC0xICYmIGZsYWcgPT0gMSA/IGJvcmRlcmNvbCA6IG51bGwpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1jb250YWluZXJcIiwgXCJib2R5XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJwb3BvdmVyXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS10cmlnZ2VyXCIsIFwiaG92ZXJcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLXBsYWNlbWVudFwiLCBcInJpZ2h0XCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1odG1sXCIsIFwidHJ1ZVwiKVxuICAgICAgICAuYXR0cihcIm9ubW91c2VvdmVyXCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJvbm1vdXNlb3V0XCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsIFwiU3VtbWFyeSBTdGF0aXN0aWNzXCIpO1xuXHQgIGZha2VDbGljaygpO1xuXHQgICQoXCIjdGFiMVwiKS5jaGlsZHJlbigpLnBvcG92ZXIoJ2hpZGUnKTtcblx0ICBwb3B1bGF0ZVBvcG92ZXIoKTtcblx0ICBhZGRsaXN0ZW5lcihub2Rlcyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2FwcC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBeUZBO0FBbzFCQTtBQW1DQTtBQTZmQTtBQXFDQTtBQVlBO0FBNlFBO0FBQ0E7QUE1d0RBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBQ0E7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQXpDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFBQTtBQVNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBTEE7QUFNQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQVNBO0FBQ0E7QUFHQTtBQUtBO0FBQUE7QUFDQTtBQUFBO0FBU0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBSUE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFBQTtBQUZBO0FBS0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFLQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFBQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQWRBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQUNBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQUE7QUFXQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFEQTtBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFBQTtBQUpBO0FBS0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./Ladda/dist/ladda-themeless.min.css ***!
  \********************************************/
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0xhZGRhL2Rpc3QvbGFkZGEtdGhlbWVsZXNzLm1pbi5jc3M/MWY5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vTGFkZGEvZGlzdC9sYWRkYS10aGVtZWxlc3MubWluLmNzc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 4 */
/* no static exports found */
/* all exports used */
/*!*****************!*\
  !*** ./app.css ***!
  \*****************/
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2FwcC5jc3M/N2YyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwLmNzc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./bootstrap/css/bootstrap-theme.min.css ***!
  \***********************************************/
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Jvb3RzdHJhcC9jc3MvYm9vdHN0cmFwLXRoZW1lLm1pbi5jc3M/OTBiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYm9vdHN0cmFwL2Nzcy9ib290c3RyYXAtdGhlbWUubWluLmNzc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(/*! ../bootstrap/css/bootstrap-theme.min.css */ 5);\n\n__webpack_require__(/*! ../app.css */ 4);\n\n__webpack_require__(/*! ../Ladda/dist/ladda-themeless.min.css */ 3);\n\nvar _mithril = __webpack_require__(/*! mithril */ 0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(/*! ./app.js */ 2);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Model = {\n    about: false,\n    cite: false,\n    citetoggle: false,\n    leftClosed: false,\n    rightClosed: false,\n    toggleHistory: false,\n    toggleLegend: false\n};\n\nfunction subpanel(title) {\n    var buttons = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var legend = title == \"Legend\";\n    var target = 'collapse' + title,\n        toggle = 'toggle' + title;\n\n    var z = app.zparams;\n    return (0, _mithril2.default)('#' + (legend ? \"legend.legendary\" : \"logdiv.logbox\") + '.panel.panel-default', {\n        style: { display: legend && z.ztime.length + z.zcross.length + z.zdv.length + z.znom.length || !legend && app.logArray.length > 0 ? 'block' : 'none' }\n    }, [(0, _mithril2.default)(\".panel-heading\", (0, _mithril2.default)(\"h3.panel-title\", title, (0, _mithril2.default)('span.glyphicon.glyphicon-large.glyphicon-chevron-' + (Model[toggle] ? 'up' : 'down') + '.pull-right[data-target=#' + target + '][data-toggle=collapse][href=#' + target + ']', {\n        style: 'cursor: pointer',\n        onclick: function onclick(_) {\n            return Model[toggle] = !Model[toggle];\n        } }))), (0, _mithril2.default)('#' + target + '.panel-collapse.collapse.in', (0, _mithril2.default)(\".panel-body\", !legend ? app.logArray.map(function (x) {\n        return (0, _mithril2.default)('p', x);\n    }) : buttons.map(function (x) {\n        return (0, _mithril2.default)('#' + x[0] + '.clearfix.' + (z[x[1]].length == 0 ? \"hide\" : \"show\"), [(0, _mithril2.default)(\".rectColor\", (0, _mithril2.default)(\"svg[style=width: 20px; height: 20px]\", (0, _mithril2.default)(\"circle[cx=10][cy=10][fill=white][r=9][stroke=black][stroke-width=2]\"))), (0, _mithril2.default)(\".rectLabel\", x[2])]);\n    })))]);\n}\n\nvar closepanel = function closepanel(val, side) {\n    if (Model[side + 'Closed']) return val + '.closepanel';\n    return side == 'left' && app.lefttab == 'tab2' ? val + '.expandpanel' : val;\n};\n\nfunction panel(side, title) {\n    var id = '#' + side + 'panel';\n    var dot = _mithril2.default.trust('&#9679;');\n    var style = { style: { height: 'calc(100% - 60px)' } };\n\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n    }\n\n    return (0, _mithril2.default)(closepanel('#' + side + 'panel.sidepanel.container.clearfix', style, side), [(0, _mithril2.default)('#toggle' + (side == 'left' ? 'L' : 'R') + 'panelicon.panelbar', style, (0, _mithril2.default)('span', {\n        onclick: function onclick(_) {\n            var key = side + 'Closed';\n            Model[key] = !Model[key];\n        }\n    }, [dot, (0, _mithril2.default)('br'), dot, (0, _mithril2.default)('br'), dot, (0, _mithril2.default)('br'), dot])), (0, _mithril2.default)('#' + side + 'paneltitle.panel-heading.text-center', (0, _mithril2.default)(\"h3.panel-title\", title))].concat(args));\n}\n\nvar or = function or(side, val) {\n    var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'block';\n    var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';\n\n    return app[side + 'tab'] === val ? y : n;\n};\n\nfunction leftpanel() {\n    return panel('left', 'Data Selection', (0, _mithril2.default)(\".btn-toolbar[role=toolbar][style=margin-left: .5em; margin-top: .5em\", (0, _mithril2.default)(\".btn-group\", (0, _mithril2.default)('button#btnVariables.btn.' + or('left', 'tab1', 'active', 'btn-default') + '[type=button]', {\n        title: 'Click variable name to add or remove the variable pebble from the modeling space.',\n        onclick: function onclick(_) {\n            return app.tabLeft('tab1');\n        }\n    }, \"Variables\"), (0, _mithril2.default)('button#btnSubset.btn.' + or('left', 'tab2', 'active', 'btn-default') + '[type=button]', {\n        onclick: function onclick(_) {\n            return app.tabLeft('tab2');\n        }\n    }, \"Subset\")), (0, _mithril2.default)(\"button#btnSelect.btn.btn-default.ladda-button[data-spinner-color=#000000][data-style=zoom-in][type=button]\", {\n        style: 'display: ' + (app.subset ? 'block' : 'none') + '; float: right; margin-right: 10px',\n        onclick: function onclick(_) {\n            return app.subsetSelect('btnSelect');\n        },\n        title: 'Subset data by the intersection of all selected values.'\n    }, (0, _mithril2.default)(\"span.ladda-label[style=pointer-events: none]\", \"Select\"))), (0, _mithril2.default)(closepanel('.row-fluid', 'left'), (0, _mithril2.default)('#leftpanelcontent', (0, _mithril2.default)('#leftContentArea[style=height: 453px; overflow: auto]', (0, _mithril2.default)('#tab1[style=display: ' + or('left', 'tab1') + '; padding: 10px 8px; text-align: center]', (0, _mithril2.default)('input#searchvar.form-control[type=text][placeholder=Search variables and labels][style=width: 100%; margin-bottom: 5px]')), (0, _mithril2.default)('#tab2[style=display: ' + or('left', 'tab2') + '; margin-top: .5em]'), (0, _mithril2.default)('#tab3', (0, _mithril2.default)('p[style=padding: .5em 1em; display: ' + or('left', 'tab3') + ']', {\n        title: \"Select a variable from within the visualization in the center panel to view its summary statistics.\"\n    }, (0, _mithril2.default)('center', (0, _mithril2.default)('b', app.summary.name), (0, _mithril2.default)('br'), (0, _mithril2.default)('i', app.summary.labl)), (0, _mithril2.default)('table', app.summary.data.map(function (x) {\n        return (0, _mithril2.default)('tr', x.map(function (y) {\n            return (0, _mithril2.default)('td', {\n                onmouseover: function onmouseover() {\n                    this.style['background-color'] = 'aliceblue';\n                },\n                onmouseout: function onmouseout() {\n                    this.style['background-color'] = '#f9f9f9';\n                }\n            }, y);\n        }));\n    }))))))));\n}\n\nfunction rightpanel() {\n    var button = function button(id, width, text) {\n        return (0, _mithril2.default)('button#' + id + '.btn.' + or('right', id, 'active', 'btn-default') + '[type=button][style=width: ' + width + ']', {\n            onclick: function onclick(_) {\n                return app.tabRight(id);\n            }\n        }, text);\n    };\n    return panel('right', 'Model Selection', (0, _mithril2.default)(\".btn-group.btn-group-justified[aria-label=...][role=group][style=margin-top: .5em]\", button('btnModels', \"33%\", \"Models\"), button('btnSetx', \"34%\", \"Set Covar.\"), button('btnResults', \"33%\", \"Results\")), (0, _mithril2.default)(closepanel('.row-fluid', 'right'), (0, _mithril2.default)('#rightpanelcontent', (0, _mithril2.default)('#rightContentArea[style=height: 453px; overflow: auto]', (0, _mithril2.default)('#results[style=display: ' + or('right', 'btnResults') + '; margin-top: .5em]', (0, _mithril2.default)(\"#resultsView.container[style=float: right; overflow: auto; width: 80%; background-color: white; white-space: nowrap]\"), (0, _mithril2.default)('#modelView[style=display: none; float: left; width: 20%; background-color: white]'), (0, _mithril2.default)(\"p#resultsHolder[style=padding: .5em 1em]\")), (0, _mithril2.default)('#setx[style=display: ' + or('right', 'btnSetx') + ']'), (0, _mithril2.default)('#models[style=display: ' + or('right', 'btnModels') + '; padding: 6px 12px; text-align: center]')))));\n}\n\nvar Body = function () {\n    function Body() {\n        _classCallCheck(this, Body);\n    }\n\n    _createClass(Body, [{\n        key: 'oncreate',\n        value: function oncreate() {\n            var extract = function extract(name, key, offset) {\n                key = key + '=';\n                var loc = window.location.toString();\n                var val = loc.indexOf(key) > 0 ? loc.substring(loc.indexOf(key) + offset) : '';\n                var idx = val.indexOf('&');\n                val = idx > 0 ? val.substring(0, idx) : val;\n                console.log(name, ': ', val);\n                return val;\n            };\n            var apikey = extract('apikey', 'key', 4);\n            app.main(extract('fileid', 'dfId', 5), extract('hostname', 'host', 5), extract('ddiurl', 'ddiurl', 7).replace(/%25/g, '%').replace(/%3A/g, ':').replace(/%2F/g, '/'), extract('dataurl', 'dataurl', 8).replace(/%25/g, '%').replace(/%3A/g, ':').replace(/%2F/g, '/'));\n        }\n    }, {\n        key: 'view',\n        value: function view() {\n            return (0, _mithril2.default)('main', (0, _mithril2.default)(\"nav#navbar.navbar.navbar-default.navbar-fixed-top[role=navigation]\", (0, _mithril2.default)(\"a.navbar-brand[style=margin-left: 0]\", (0, _mithril2.default)(\"img[src=images/TwoRavens.png][alt=TwoRavens][width=100][style=margin-left: 2em; margin-top: -0.5em]\", {\n                onmouseover: function onmouseover(_) {\n                    return Model.about = true;\n                },\n                onmouseout: function onmouseout(_) {\n                    return Model.about = false;\n                } })), (0, _mithril2.default)('#navbarNav[style=padding: 0.5em]', (0, _mithril2.default)('#dataField.field[style=margin-top: 0.5em; text-align: center]', (0, _mithril2.default)('h4#dataName[style=display: inline]', {\n                onclick: function onclick(_) {\n                    return Model.cite = Model.citetoggle = !Model.citetoggle;\n                },\n                onmouseout: function onmouseout(_) {\n                    return Model.citetoggle || (Model.cite = false);\n                },\n                onmouseover: function onmouseover(_) {\n                    return Model.cite = true;\n                }\n            }, \"Dataset Name\"), (0, _mithril2.default)('#cite.panel.panel-default[style=display: ' + (Model.cite ? 'block' : 'none') + '; position: absolute; right: 50%; width: 380px; text-align: left; z-index: 50]', (0, _mithril2.default)(\".panel-body\")), (0, _mithril2.default)(\"button#btnEstimate.btn.btn-default.ladda-button.navbar-right[data-spinner-color=#000000][data-style=zoom-in]\", {\n                onclick: function onclick(_) {\n                    return app.estimate('btnEstimate');\n                },\n                style: \"margin-left: 2em; margin-right: 1em\"\n            }, (0, _mithril2.default)(\"span.ladda-label\", \"Estimate\")), (0, _mithril2.default)(\"button#btnReset.btn.btn-default.navbar-right[title=Reset][style=margin-left: 2.0em]\", {\n                onclick: app.reset\n            }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-repeat[style=color: #818181; font-size: 1em; pointer-events: none]\")), (0, _mithril2.default)('#transformations.transformTool', {\n                title: 'Construct transformations of existing variables using valid R syntax. For example, assuming a variable named d, you can enter \"log(d)\" or \"d^2\".' }))),\n            /*m('.text-center', {\n              style: {margin: '5px'}\n              }, m(\".btn-group\", [\n              m(`a.btn.btn-default${location.href.endsWith('model') ? '.active' : ''}[href=/model][role=button]`, {oncreate: m.route.link}, \"Model\"),\n              m(`a.btn.btn-default${location.href.endsWith('explore') ? '.active' : ''}[href=/explore][role=button]`, {oncreate: m.route.link}, \"Explore\")\n              ]))*/\n            (0, _mithril2.default)('#about.panel.panel-default[style=display: ' + (Model.about ? 'block' : 'none') + '; left: 140px; position: absolute; width: 500px; z-index: 50]', (0, _mithril2.default)('.panel-body', 'TwoRavens v0.1 \"Dallas\" -- The Norse god Odin had two talking ravens as advisors, who would fly out into the world and report back all they observed. In the Norse, their names were \"Thought\" and \"Memory\". In our coming release, our thought-raven automatically advises on statistical model selection, while our memory-raven accumulates previous statistical models from Dataverse, to provide cummulative guidance and meta-analysis.'))), (0, _mithril2.default)('#main.left.carousel.slide' + (Model.leftClosed ? '.svg-leftpanel' : '') + (Model.rightClosed ? '.svg-rightpanel' : '') + '[style=overflow: auto]', (0, _mithril2.default)(\"#innercarousel.carousel-inner\", (0, _mithril2.default)('#m0.item.active', (0, _mithril2.default)('svg#whitespace'))), (0, _mithril2.default)(\"#spacetools.spaceTool[style=z-index: 16]\", (0, _mithril2.default)(\"button#btnForce.btn.btn-default[title=Pin the variable pebbles to the page.]\", {\n                onclick: app.forceSwitch\n            }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-pushpin\")), (0, _mithril2.default)(\"button#btnEraser.btn.btn-default[title=Wipe all variables from the modeling space.]\", {\n                onclick: app.erase\n            }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-magnet\"))), subpanel(\"Legend\", [['timeButton', 'ztime', 'Time'], ['csButton', 'zcross', 'Cross Sec'], ['dvButton', 'zdv', 'Dep Var'], ['nomButton', 'znom', 'Nom Var']]), subpanel(\"History\"), (0, _mithril2.default)('#ticker[style=background: #F9F9F9; bottom: 0; height: 40px; position: fixed; width: 100%; border-top: 1px solid #ADADAD]', (0, _mithril2.default)(\"a#logID[href=somelink][target=_blank]\", \"Replication\")), leftpanel(), rightpanel()));\n        }\n    }]);\n\n    return Body;\n}();\n\n_mithril2.default.route(document.body, '/model', {\n    '/model': Body,\n    '/explore': Body\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./src/plots.js ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.density = density;\nexports.bars = bars;\nexports.barsSubset = barsSubset;\nexports.densityNode = densityNode;\nexports.barsNode = barsNode;\nvar d3Color = '#1f77b4'; // d3's default blue\n\n// function to use d3 to graph density plots with preprocessed data\nfunction density(node, div, priv) {\n    var mydiv = {\n        subset: '#tab2',\n        setx: '#setx',\n        varSummary: '#tab3'\n    }[div];\n    if (!mydiv) return alert(\"Error: incorrect div selected for plots\");\n\n    var yVals = node.ploty;\n    var xVals = node.plotx;\n\n    // an array of objects\n    var data2 = [];\n    for (var i = 0; i < node.plotx.length; i++) {\n        data2.push({\n            x: node.plotx[i],\n            y: node.ploty[i]\n        });\n    }\n    var add = function add(d) {\n        d.x = +d.x;\n        d.y = +d.y;\n    };\n    data2.forEach(add);\n    if (priv && node.plotCI) {\n        // stores values for upper/lower bound\n        var store = function store(bound) {\n            var error = [];\n            for (var _i = 0; _i < node.plotx.length; _i++) {\n                error.push({\n                    x: node.plotx[_i],\n                    y: node.plotCI[bound][_i]\n                });\n            }\n            return error.map(add);\n        };\n        var _upperError = store('upperBound');\n        var _lowerError = store('lowerBound');\n        console.log('upperError\\n', _upperError);\n    }\n\n    var tempWidth = d3.select(mydiv).style(\"width\");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n    var tempHeight = d3.select(mydiv).style(\"height\");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 30\n    };\n\n    // Need to fix automatic width and height settings for leftpanel (#tab2, #tab3)\n    if (mydiv == \"#tab3\") {\n        width = 0.7 * (width - margin.left - margin.right), height = 0.3 * (height - margin.top - margin.bottom);\n    } else if (mydiv == \"#tab2\" | mydiv == \"#setx\") {\n        width = 200;\n        height = 120;\n    } else {\n        width = 0.35 * (width - margin.left - margin.right), height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n    var invx = d3.scale.linear().range([d3.min(xVals), d3.max(xVals)]).domain([0, width]);\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n    var xAxis = d3.svg.axis().scale(x).ticks(5).orient(\"bottom\");\n    var yAxis = d3.svg.axis().scale(y).orient(\"left\");\n    var brush = d3.svg.brush().x(x).extent(node.subsetrange).on(\"brush\", brushed);\n    var brush2 = d3.svg.brush().x(x).on(\"brush\", brushed2);\n    var area = d3.svg.area().interpolate(\"monotone\").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n    var line = d3.svg.line().x(function (d) {\n        return x(d.x);\n    }).y(function (d) {\n        return y(d.y);\n    }).interpolate(\"monotone\");\n\n    // cumbersome to treat \"tab3\" differently, but works for now\n    // tab3, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (mydiv == \"#tab3\") {\n        var plotsvg = d3.select(mydiv).selectAll(\"svg\").remove();\n        plotsvg = d3.select(mydiv).append(\"svg\").attr(\"id\", function () {\n            return node.name.toString().concat(mydiv.substr(1));\n        }).style(\"width\", 300 // set height to the height of #main.left\n        ).style(\"height\", 200).append(\"g\").attr(\"transform\", 'translate(' + margin.left + ',' + margin.top + ')');\n    } else {\n        var plotsvg = d3.select(mydiv).append(\"svg\").attr(\"id\", function () {\n            return node.name.toString().replace(/\\(|\\)/g, \"\").concat(\"_\", mydiv.substr(1), \"_\", node.id);\n        }).style(\"width\", width + margin.left + margin.right //setting height to the height of #main.left\n        ).style(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", 'translate(' + margin.left + ',' + margin.top + ')');\n    };\n    plotsvg.append(\"path\").datum(data2).attr(\"class\", \"area\").attr(\"d\", area);\n\n    if (priv && node.plotCI) {\n        //add upper bound\n        plotsvg.append(\"path\").attr(\"class\", \"upperError\").datum(upperError).attr(\"d\", area);\n    }\n\n    if (priv && node.plotCI) {\n        //add lower bound\n        plotsvg.append(\"path\").attr(\"class\", \"lowerError\").datum(lowerError).attr(\"d\", area);\n    }\n\n    plotsvg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis);\n\n    plotsvg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", 0 - margin.top / 2).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"12px\").text(node.name);\n\n    // add brush if subset\n    if (mydiv == \"#tab2\") {\n        plotsvg.append(\"text\").attr(\"id\", \"range\").attr(\"x\", 25).attr(\"y\", height + 40).text(function () {\n            return \"Range: \".concat(d3.min(xVals).toPrecision(4), \" to \", d3.max(xVals).toPrecision(4));\n        });\n\n        plotsvg.append(\"g\").attr(\"class\", \"x brush\").call(brush).selectAll(\"rect\").attr(\"height\", height);\n    }\n\n    // add z lines and sliders setx\n    if (mydiv == \"#setx\") {\n        plotsvg.append(\"text\").attr(\"id\", \"range\").attr(\"x\", 25).attr(\"y\", height + 40).text(function () {\n            return \"x: \".concat((+node.mean).toPrecision(4));\n        });\n\n        plotsvg.append(\"text\").attr(\"id\", \"range2\").attr(\"x\", 25).attr(\"y\", height + 50).text(function () {\n            return \"x1: \".concat((+node.mean).toPrecision(4));\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate(\"linear\");\n\n        var colSeq = [\"#A2CD5A\", \"orange\", \"red\"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (d3.min(xVals) - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (d3.max(xVals) - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                \"x\": x(+node.mean + i * node.sd),\n                \"y\": height * .7\n            }, {\n                \"x\": x(+node.mean + i * node.sd),\n                \"y\": height * .9\n            }];\n            plotsvg.append(\"path\").attr(\"d\", lineFunction([lineData[0], lineData[1]])).attr(\"stroke\", colSeq[d3.min([i, colSeq.length - 1])]).attr(\"stroke-width\", 1.5).attr(\"fill\", \"none\");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                \"x\": x(+node.mean - i * node.sd),\n                \"y\": height * .7\n            }, {\n                \"x\": x(+node.mean - i * node.sd),\n                \"y\": height * .9\n            }];\n            plotsvg.append(\"path\").attr(\"d\", lineFunction([lineData[0], lineData[1]])).attr(\"stroke\", colSeq[d3.min([i, colSeq.length - 1])]).attr(\"stroke-width\", 1.5).attr(\"fill\", \"none\");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height * .8 + \")\").call(d3.svg.axis().scale(x).ticks(0).orient(\"bottom\"));\n        var slider = plotsvg.append(\"g\").attr(\"class\", \"slider\").call(brush);\n        var handle = slider.append(\"polygon\").attr(\"class\", \"handle\").attr(\"transform\", \"translate(0,\" + height * .7 + \")\").attr(\"points\", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[0] == '' ? x(node.mean) : x(node.setxvals[0]);\n            return xnm - s + \",\" + -s + \" \" + (xnm + s) + \",\" + -s + \" \" + xnm + \",\" + s * 1.3;\n        });\n        var slider2 = plotsvg.append(\"g\").attr(\"class\", \"slider\").call(brush2);\n        var handle2 = slider2.append(\"polygon\").attr(\"class\", \"handle\").attr(\"transform\", \"translate(0,\" + height * .9 + \")\").attr(\"points\", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[1] == '' ? x(node.mean) : x(node.setxvals[1]);\n            return xnm - s + \",\" + s + \" \" + (xnm + s) + \",\" + s + \" \" + xnm + \",\" + -s * 1.3;\n        });\n    }\n\n    // brushing functions\n    function brushed() {\n        if (mydiv == \"#tab2\") {\n            plotsvg.select(\"text#range\").text(function () {\n                return brush.empty() ? \"Range: \".concat(d3.min(xVals).toPrecision(4), \" to \", d3.max(xVals).toPrecision(4)) : \"Range: \".concat(brush.extent()[0].toPrecision(4), \" to \", brush.extent()[1].toPrecision(4));\n            });\n            node.subsetrange = brush.extent()[0].toPrecision(4) != brush.extent()[1].toPrecision(4) ? [brush.extent()[0].toPrecision(4), brush.extent()[1].toPrecision(4)] : [\"\", \"\"];\n        } else if (mydiv == \"#setx\") {\n            var value = brush.extent()[0];\n            var s = 6;\n            if (d3.event.sourceEvent) {\n                value = x.invert(d3.mouse(this)[0]);\n                brush.extent([value, value]);\n            }\n\n            // set x position of slider center\n            var xpos = x(value);\n            if (value > d3.max(xVals)) {\n                // dragged past max\n                xpos = x(d3.max(xVals));\n            } else if (value < d3.min(xVals)) {\n                // dragged past min\n                xpos = x(d3.min(xVals));\n            } else {\n                var m = +node.mean;\n                var sd = +node.sd;\n                var zScore = (value - m) / sd; // z-score\n                var zRound = Math.round(zScore); // nearest integer z-score\n                if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                    xpos = x(m + zRound * sd);\n            }\n\n            // create slider symbol and text\n            handle.attr(\"points\", function (_) {\n                return xpos - s + \",\" + -s + \" \" + (xpos + s) + \",\" + -s + \" \" + xpos + \",\" + s * 1.3;\n            });\n            plotsvg.select(\"text#range\").text(function () {\n                return \"x: \".concat(invx(xpos).toPrecision(4));\n            });\n            node.setxvals[1] = invx(xpos).toPrecision(4);\n        }\n    }\n\n    // certainly a more clever way to do this, but for now it's basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center \n        var xpos = x(value);\n        if (value > d3.max(xVals)) {\n            // dragged past max\n            xpos = x(d3.max(xVals));\n        } else if (value < d3.min(xVals)) {\n            // dragged past min\n            xpos = x(d3.min(xVals));\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                xpos = x(m + zRound * sd);\n        }\n\n        // create slider symbol and text\n        handle2.attr(\"points\", function (_) {\n            return xpos - s + \",\" + s + \" \" + (xpos + s) + \",\" + s + \" \" + xpos + \",\" + -s * 1.3;\n        });\n        plotsvg.select(\"text#range2\").text(function () {\n            return \"x1: \".concat(invx(xpos).toPrecision(4));\n        });\n        node.setxvals[1] = invx(xpos).toPrecision(4);\n    }\n}\n\nfunction bars(node, div, priv) {\n    // Histogram spacing\n    var barPadding = .015; // Space between bars \n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var ciUpperVals = new Array();\n    var ciLowerVals = new Array();\n    var ciSize;\n\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature == \"nominal\") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[xi] = node.plotValuesCI.lowerBound[keys[i]];\n                    ciUpperVals[xi] = node.plotValuesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[xi] - ciLowerVals[xi];\n            };\n\n            yValKey.push({\n                y: yVals[xi],\n                x: keys[i]\n            });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n        ciUpperVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n        ciLowerVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            console.log(\"plotvalues in bars\");\n            console.log(node);\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[i] = node.plotvaluesCI.lowerBound[keys[i]];\n                    ciUpperVals[i] = node.plotvaluesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[i] - ciLowerVals[i];\n            }\n        }\n    }\n\n    if (yVals.length > 15 & node.numchar == \"numeric\" || yVals.length > 5 & node.numchar == \"character\") plotXaxis = false;\n    var maxY = d3.max(yVals); // in the future, set maxY to the value of the maximum confidence limit\n    if (priv && node.plotvaluesCI) maxY = d3.max(ciUpperVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var mydiv = void 0;\n    if (div == \"setx\") mydiv = \"#setx\";else if (div == \"varSummary\") mydiv = \"#tab3\";else return alert(\"Error: incorrect div selected for plots\");\n\n    var tempWidth = d3.select(mydiv).style(\"width\");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n    var tempHeight = d3.select(mydiv).style(\"height\");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 50\n    };\n\n    // Need to fix automatic width and height settings for leftpanel (#tab2, #tab3)\n    if (mydiv == \"#tab3\") {\n        width = 0.7 * (width - margin.left - margin.right);\n        height = 0.3 * (height - margin.top - margin.bottom);\n    } else if (mydiv == \"#setx\") {\n        width = 200;\n        height = 120;\n    } else {\n        width = 0.35 * (width - margin.left - margin.right);\n        height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    if (priv && node.stabilityBin) {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 1.5]).range([0, width]);\n    } else {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n    }\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient(\"bottom\");\n\n    var yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\n    var brush = d3.svg.brush().x(x).extent(function () {\n        return node.subsetrange.length == 1 ? [node.subsetrange[0], node.subsetrange[0]] : node.subsetrange;\n    }).on(\"brush\", brushed);\n\n    var brush2 = d3.svg.brush().x(x).on(\"brush\", brushed2);\n\n    // Create SVG element\n    // cumbersome to treat \"tab3\" differently, but works for now\n    // tab3, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (mydiv == \"#tab3\") {\n        var plotsvg = d3.select(mydiv).selectAll(\"svg\").remove();\n\n        var plotsvg = d3.select(mydiv).append(\"svg\").attr(\"id\", function () {\n            return node.name.toString().concat(mydiv.substr(1));\n        }).style(\"width\", 300 //setting height to the height of #main.left\n        ).style(\"height\", 200).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    } else {\n        var plotsvg = d3.select(mydiv).append(\"svg\").attr(\"id\", function () {\n            var myname = node.name.toString();\n            myname = myname.replace(/\\(|\\)/g, \"\");\n            return myname.concat(\"_\", mydiv.substr(1), \"_\", node.id);\n        }).style(\"width\", width + margin.left + margin.right //setting height to the height of #main.left\n        ).style(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    };\n\n    var rectWidth = x(minX + 0.5 - 2 * barPadding); //the \"width\" is the coordinate of the end of the first bar\n\n    plotsvg.selectAll(\"rect\").data(yVals).enter().append(\"rect\").attr(\"x\", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr(\"y\", function (d) {\n        return y(maxY - d);\n    }).attr(\"width\", rectWidth).attr(\"height\", y).attr(\"fill\", \"#1f77b4\");\n\n    // draw error bars, threshold line and extra bin\n    if (priv) {\n        if (yVals.length <= 20) {\n            plotsvg.selectAll(\"line\").data(ciUpperVals).enter().append(\"line\").style(\"stroke\", \"black\").attr(\"x1\", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr(\"y1\", function (d) {\n                return y(maxY - d);\n            }).attr(\"x2\", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr(\"y2\", function (d) {\n                var y2 = y(maxY - d + ciSize);\n                return y2 >= y(maxY) ? y(maxY) : y2;\n            });\n\n            //draw top ticks on error bars\n            //need to fix the height of the graphs - the tops of error bars are getting cut off\n            plotsvg.selectAll(\".topTick\").data(ciUpperVals).enter().append(\"line\").attr(\"class\", \"topTick\").style(\"stroke\", \"black\").attr(\"x1\", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding //make tick bigger to increase visibility\n                    );\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr(\"y1\", function (d) {\n                return y(maxY - d);\n            }).attr(\"x2\", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth; //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr(\"y2\", function (d) {\n                return y(maxY - d);\n            });\n\n            // draw bottom ticks of error bars\n            plotsvg.selectAll(\".bottomTick\").data(ciLowerVals).enter().append(\"line\").attr(\"class\", \"bottomTick\").style(\"stroke\", \"black\").attr(\"x1\", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding);\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr(\"y1\", function (d) {\n                return y(maxY - d);\n            }).attr(\"x2\", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth;\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr(\"y2\", function (d) {\n                return y(maxY - d);\n            });\n        } else {\n            plotsvg.selectAll(\".denseError\").data(yVals).enter().append(\"rect\").attr(\"class\", \"denseError\").attr(\"x\", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding);\n            }).attr(\"y\", function (d) {\n                return y(maxY - d) - .1 * y(d);\n            }).attr(\"width\", rectWidth).attr(\"height\", function (d) {\n                return y(maxY - d) + .1 * y(d) - (y(maxY - d) - .1 * y(d));\n            }).attr(\"fill\", \"silver\");\n        }\n\n        //if statement for stability histograms\n        //extra stability bin\n        if (node.stabilityBin) {\n            plotsvg.append(\"rect\").attr(\"x\", x(maxX + 0.5 - barPadding)).attr(\"y\", y(maxY) - node.stabilityBin).attr(\"width\", rectWidth).attr(\"height\", node.stabilityBin).attr(\"fill\", \"silver\");\n        }\n\n        //threshold line\n        if (node.threshold) {\n            plotsvg.append(\"line\").style(\"stroke\", \"black\").attr(\"x1\", x(minX - 0.5 + barPadding)).attr(\"y1\", y(maxY) - node.threshold).attr(\"x2\", function () {\n                console.log(\"stabilityBin\");\n                console.log(node.stabilityBin);\n                if (node.stabilityBin) {\n                    return x(maxX + 0.5 - barPadding) + rectWidth;\n                } else {\n                    return x(maxX + 0.5 - barPadding);\n                }\n            }).attr(\"y2\", y(maxY) - node.threshold);\n        }\n    }\n\n    if (plotXaxis) {\n        plotsvg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis);\n    }\n\n    plotsvg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", 0 - margin.top / 2).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"12px\").text(node.name);\n\n    if (mydiv == \"#setx\") {\n        plotsvg.append(\"text\").attr(\"id\", \"range\").attr(\"x\", 25).attr(\"y\", height + 40).text(function () {\n            if (node.nature === \"nominal\") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return \"x: \" + yValKey[t].x;\n            } else {\n                return \"x: \".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        plotsvg.append(\"text\").attr(\"id\", \"range2\").attr(\"x\", 25).attr(\"y\", height + 50).text(function () {\n            if (node.nature === \"nominal\") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return \"x1: \" + yValKey[t].x;\n            } else {\n                return \"x1: \".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate(\"linear\");\n\n        var colSeq = [\"#A2CD5A\", \"orange\", \"red\"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (minX - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (maxX - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                \"x\": x(+node.mean + i * node.sd),\n                \"y\": height * .7\n            }, {\n                \"x\": x(+node.mean + i * node.sd),\n                \"y\": height * .9\n            }];\n            plotsvg.append(\"path\").attr(\"d\", lineFunction([lineData[0], lineData[1]])).attr(\"stroke\", colSeq[d3.min([i, colSeq.length - 1])]).attr(\"stroke-width\", 1.5).attr(\"fill\", \"none\");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                \"x\": x(+node.mean - i * node.sd),\n                \"y\": height * .7\n            }, {\n                \"x\": x(+node.mean - i * node.sd),\n                \"y\": height * .9\n            }];\n            plotsvg.append(\"path\").attr(\"d\", lineFunction([lineData[0], lineData[1]])).attr(\"stroke\", colSeq[d3.min([i, colSeq.length - 1])]).attr(\"stroke-width\", 1.5).attr(\"fill\", \"none\");\n        }\n\n        for (var i = d3.min(xVals); i <= d3.max(xVals); i++) {\n            lineData = [{\n                \"x\": x(i),\n                \"y\": height * .75\n            }, {\n                \"x\": x(i),\n                \"y\": height * .85\n            }];\n            plotsvg.append(\"path\").attr(\"d\", lineFunction([lineData[0], lineData[1]])).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).attr(\"fill\", \"none\");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height * .8 + \")\").call(d3.svg.axis().scale(x).ticks(0).orient(\"bottom\"));\n\n        var slider = plotsvg.append(\"g\").attr(\"class\", \"slider\").call(brush);\n        var slider2 = plotsvg.append(\"g\").attr(\"class\", \"slider\").call(brush2);\n\n        var points = function points(i) {\n            return function (d) {\n                var xnm = void 0,\n                    s = 6;\n                if (node.setxvals[i] == '') {\n                    // if nominal, use the median frequency as the position for the setx slider\n                    xnm = node.nature == 'nominal' ? x(Math.round(xVals.length / 2) - 1) : x(node.mean);\n                } else {\n                    xnm = x(node.setxvals[i]);\n                };\n                return xnm - s + ',' + -s + ' ' + (xnm + s) + ',' + -s + ' ' + xnm + ',' + s * 1.3;\n            };\n        };\n        var handle = slider.append(\"polygon\").attr(\"class\", \"handle\").attr(\"transform\", \"translate(0,\" + height * .7 + \")\").attr(\"points\", points(0));\n        var handle2 = slider2.append(\"polygon\").attr(\"class\", \"handle\").attr(\"transform\", \"translate(0,\" + height * .9 + \")\").attr(\"points\", points(1));\n    }\n\n    function twoSF(x) {\n        var tsf = d3.format(\".2r\"); // format to two significant figures after the decimal place\n        return tsf(x).replace(/0+$/, \"\").replace(/\\.$/, \"\"); // trim trailing zeros after a period, and any orphaned period\n    }\n\n    // brushing functions\n    function brushed() {\n        var value = brush.extent()[0];\n        var s = 6;\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush.extent([value, value]);\n        }\n\n        // set x position of slider center                     \n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle.attr(\"points\", function (d) {\n            return xpos - s + \",\" + -s + \" \" + (xpos + s) + \",\" + -s + \" \" + xpos + \",\" + s * 1.3;\n        });\n        plotsvg.select(\"text#range\").text(function () {\n            if (node.nature === \"nominal\") {\n                return \"x: \" + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                return \"x: \".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[1] = +invx(xpos).toPrecision(4);\n    }\n\n    // certainly a more clever way to do this, but for now it's basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center \n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle2.attr(\"points\", function (d) {\n            return xpos - s + \",\" + s + \" \" + (xpos + s) + \",\" + s + \" \" + xpos + \",\" + -s * 1.3;\n        });\n        plotsvg.select(\"text#range2\").text(function () {\n            if (node.nature === \"nominal\") {\n                return \"x1: \" + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                return \"x1: \".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[1] = +invx(xpos).toPrecision(4);\n    }\n}\n\n// draws barplots in subset tab\nfunction barsSubset(node) {\n    // if untouched, set node.subsetrange to an empty array, meaning all values selected by default\n    if (node.subsetrange[0] == \"\" & node.subsetrange[1] == \"\") {\n        node.subsetrange = [];\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Variable name\n    var myname = node.name.toString();\n    myname = myname.replace(/\\(|\\)/g, \"\");\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    var xi = 0;\n    for (var i = 0; i < keys.length; i++) {\n        if (node.plotvalues[keys[i]] == 0) continue;\n        yVals[xi] = node.plotvalues[keys[i]];\n        xVals[xi] = xi;\n        yValKey.push({\n            y: yVals[xi],\n            x: keys[i]\n        });\n        xi = xi + 1;\n    }\n    if (node.nature === \"nominal\") {\n        // if nominal, orders bars left to right, highest frequency to lowest\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    }\n\n    plotXaxis = false;\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n    var gname = [\"subsetyes\", \"subsetno\"];\n\n    var yVals2 = [];\n    var yVals1 = [];\n    for (i = 0; i < yVals.length; i++) {\n        yVals1.push({\n            y0: maxY - yVals[i],\n            y1: yVals[i],\n            col: d3Color\n        });\n        yVals2.push({\n            y0: 0,\n            y1: maxY - yVals[i],\n            col: \"transparent\"\n        });\n    }\n    var freqs = [yVals1, yVals2];\n\n    // y0 is the starting point\n    // y1 is the length of the bar\n\n    var mydiv = \"#tab2\";\n    var width = 200;\n    var height = 120;\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 50\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient(\"bottom\");\n\n    var yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\n    //Create SVG element\n    var plotsvg = d3.select(mydiv).append(\"svg\").attr(\"id\", function () {\n        return myname.concat(\"_\", mydiv.substr(1), \"_\", node.id);\n    }).style(\"width\", width + margin.left + margin.right //setting height to the height of #main.left\n    ).style(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var freq = plotsvg.selectAll(\"g.freq\").data(freqs).enter().append(\"g\").attr(\"class\", \"freq\").attr(\"name\", function (d, i) {\n        return myname.concat(gname[i]);\n    });\n\n    var rect = freq.selectAll(\"rect\").data(Object).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"name\", function (d, i) {\n        return xVals[i];\n    }).attr(\"x\", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr(\"y\", function (d) {\n        return y(d.y0);\n    }).attr(\"width\", x(minX + 0.5 - 2 * barPadding) // the \"width\" is the coordinate of the end of the first bar\n    ).attr(\"height\", function (d) {\n        return y(d.y1);\n    }).style(\"fill\", function (d, i) {\n        if (node.subsetrange.length > 0 & d.col === d3Color & $.inArray(xVals[i].toString(), node.subsetrange) > -1) {\n            return selVarColor;\n        } else {\n            return d.col;\n        }\n    }).on(\"click\", function () {\n        var selectMe = this;\n        var selectName = this.getAttribute(\"name\");\n        if (this.parentNode.getAttribute(\"name\") == myname.concat(\"subsetno\")) {\n            selectMe = $('[name=\"' + myname.concat(\"subsetyes\") + '\"]').children('[name=\"' + selectName + '\"]')[0];\n        }\n        d3.select(selectMe).style(\"fill\", function (d, i) {\n            var myCol = \"\";\n            if (this.style.fill === selVarColor) {\n                var myindex = node.subsetrange.indexOf(this.getAttribute(\"name\"));\n                node.subsetrange.splice(myindex, 1);\n                myCol = d3Color;\n            } else {\n                node.subsetrange.push(this.getAttribute(\"name\"));\n                myCol = selVarColor;\n            }\n            return myCol;\n        });\n        plotsvg.select(\"text#selectrange\").text(function () {\n            if (node.subsetrange.length == 0) {\n                return \"Selected: all values\";\n            } else {\n                var a = node.subsetrange;\n                var selecteds = new Array();\n                a.forEach(function (val) {\n                    selecteds.push(yValKey[val].x);\n                });\n                return \"Selected: \" + selecteds;\n            }\n        });\n    }).on(\"mouseover\", function () {\n        var i = this.getAttribute(\"name\");\n        plotsvg.select(\"text#mymouseover\").text(function () {\n            return yValKey[i].x + \": \" + yValKey[i].y;\n        });\n    }).on(\"mouseout\", function () {\n        var i = this.getAttribute(\"name\");\n        plotsvg.select(\"text#mymouseover\").text(function () {\n            return \"Value: Frequency\";\n        });\n    });\n\n    if (plotXaxis) {\n        plotsvg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis);\n    } else {\n        plotsvg.append(\"text\").attr(\"id\", \"mymouseover\").attr(\"x\", 25).attr(\"y\", height + 20).text(function () {\n            return \"Value: Frequency\";\n        });\n    }\n\n    plotsvg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", 0 - margin.top / 2).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"12px\").text(myname);\n\n    plotsvg.append(\"text\").attr(\"id\", \"selectrange\").attr(\"x\", 25).attr(\"y\", height + 40).text(function () {\n        if (node.subsetrange.length == 0) return \"Selected: all values\";\n        var selecteds = new Array();\n        node.subsetrange.forEach(function (val) {\n            return selecteds.push(yValKey[val].x);\n        });\n        return \"Selected: \" + selecteds;\n    });\n}\n\nfunction densityNode(node, obj) {\n    var myname = node.name.toString().concat(\"nodeplot\");\n\n    if (typeof obj === \"undefined\") {\n        var obj = document.getElementById(node.name.toString() + \"biggroup\");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll(\"svg\")[0].length > 0) d3.select(obj).selectAll(\"svg\").remove();\n    }\n\n    var yVals = node.ploty;\n    var xVals = node.plotx;\n    // array of objects\n    var data2 = node.plotx.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    });\n\n    var width = 60; // hardcoded, should be set automatically\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n\n    var area = d3.svg.area().interpolate(\"monotone\").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n\n    var plotsvg = d3.select(obj).insert(\"svg\", \":first-child\").attr(\"x\", -40 // NOTE: Not sure exactly why these numbers work, but these hardcoded values seem to position the plot inside g correctly.  this shouldn't be hardcoded in the future\n    ).attr(\"y\", -45).attr(\"id\", function () {\n        return myname;\n    }).style(\"width\", width).style(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    plotsvg.append(\"path\").datum(data2).attr(\"class\", \"area\").attr(\"d\", area);\n}\n\nfunction barsNode(node, obj) {\n    var myname = node.name.toString().concat(\"nodeplot\");\n\n    if (typeof obj === \"undefined\") {\n        var obj = document.getElementById(node.name.toString() + \"biggroup\");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll(\"svg\")[0].length > 0) {\n            d3.select(obj).selectAll(\"svg\").remove();\n        }\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature === \"nominal\") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            yValKey.push({ y: yVals[xi], x: keys[i] });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n        }\n    }\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var width = 60;\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    //Create SVG element\n    var plotsvg = d3.select(obj).insert(\"svg\", \":first-child\").attr(\"x\", -40).attr(\"y\", -45).attr(\"id\", function () {\n        return myname;\n    }).style(\"width\", width // set height to the height of #main.left\n    ).style(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    plotsvg.selectAll(\"rect\").data(yVals).enter().append(\"rect\").attr(\"x\", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr(\"y\", function (d) {\n        return y(maxY - d);\n    }).attr(\"width\", x(minX + 0.5 - 2 * barPadding) // the \"width\" is the coordinate of the end of the first bar\n    ).attr(\"height\", y).attr(\"fill\", \"#1f77b4\");\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 8 */
/* no static exports found */
/* all exports used */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 9 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./~/setimmediate/setImmediate.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 1), __webpack_require__(/*! ./../process/browser.js */ 8)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/timers-browserify/main.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ 9);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanM/YjA4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ]);